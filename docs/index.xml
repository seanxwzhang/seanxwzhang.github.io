<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Ramblings on Deep Learning</title>
<link>https://seanzhang.me/</link>
<atom:link href="https://seanzhang.me/index.xml" rel="self" type="application/rss+xml"/>
<description>Ramblings on Deep Learning</description>
<generator>quarto-1.7.32</generator>
<lastBuildDate>Wed, 05 Mar 2025 08:00:00 GMT</lastBuildDate>
<item>
  <title>A hitchhiker‚Äôs guide to CUDA programming</title>
  <dc:creator>Sean Zhang</dc:creator>
  <link>https://seanzhang.me/posts/hitchhiker_cuda/</link>
  <description><![CDATA[ 





<p><em>In this post I introduce the CUDA programming ecosystem by writing a kernel achieves 95% of cuBLAS‚Äôs SGEMM performance. I hope this helps those are just getting started in CUDA programming.</em></p>
<!--more-->
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>GEMM is the <a href="https://petewarden.com/2015/04/20/why-gemm-is-at-the-heart-of-deep-learning/">corner stone of <strong>modern machine learning</strong></a>, many of us have been using high-level interfaces like <code>torch.matmul</code> or simply <code>t1 * t2</code> for granted without getting into the weeds (for a good reason!) and I was no different.</p>
<p>However, machine learning isn‚Äôt always just about designing the best loss function. Given the <a href="https://www.jmlr.org/papers/volume24/23-0069/23-0069.pdf">skyrocketing cost</a> of training and running large models, apply good system engineering principals to machine learning (or sometimes, <a href="https://tvm.apache.org/docs/how_to/tune_with_autotvm/index.html">vice versa</a>) is of great interest.</p>
<p>As I was researching on various ways to make large ML model inference faster (which by itself deserves another post, stay tunedüôÇ), there‚Äôs no going around writing my own kernel. I spent the last couple weeks reviewing CUDA programming from the beginning, and wrote a SGEMM kernel that achieves <strong>95% of cuBLAS</strong> (Nvidia‚Äôs close-sourced <strong>Cu</strong>da <strong>B</strong>asic <strong>L</strong>inear <strong>A</strong>lgebra <strong>S</strong>ubroutine library).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="warp_tiling_perf.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Performance of hand-written SGEMM kernel, achieving 95.6% or CUBLAS performance at M=N=K=4096"><img src="https://seanzhang.me/posts/hitchhiker_cuda/warp_tiling_perf.png" class="img-fluid figure-img" alt="Performance of hand-written SGEMM kernel, achieving 95.6% or CUBLAS performance at M=N=K=4096"></a></p>
<figcaption>Performance of hand-written SGEMM kernel, achieving 95.6% or CUBLAS performance at M=N=K=4096</figcaption>
</figure>
</div>
</section>
<section id="starting-from-the-basics" class="level1">
<h1>Starting from the basics</h1>
<p>Fundamentally, programming in CUDA (like any other parallel programming paradigm) is about breaking down a problem into sub-problems in a way that <strong>maximally utilize the hardware</strong>, which, usually consists of answering the following questions (iteratively, for multiple times):</p>
<ol type="1">
<li>What are the ways I can break down my problem?</li>
<li>Given a particular way to break down the problem, what‚Äôs the bottleneck of my current solution?</li>
<li>Can the bottleneck of the solution be improved if
<ol type="1">
<li>I break down the problem in a different way?</li>
<li>I apply <strong>hardware-specific</strong> tricks to improve the performance?</li>
</ol></li>
</ol>
<p>To meaningfully answer these questions, one needs to understand the GPU hardware.</p>
<section id="gpu-hardware" class="level2">
<h2 class="anchored" data-anchor-id="gpu-hardware">GPU Hardware</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="memory_hierarchy.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="A simplified overview of GPU architecture, numbers are for modern (as of 2024) GPU SM: Streaming Multiprocessor, the first-level ‚Äúparallel component‚Äù in GPU, there‚Äôre 128 SM in a RTX4090 HBM: High Bandwidth Memory, the ‚Äúglobal memory‚Äù/‚Äùdevice memory‚Äù of GPU, size is usually around 20GB~80GB. Communicating with this memory is considered extremely slow, on the order of 400-800 cycles per access. L2 cache: The cache for HBM, read and writes to HBM will be cached here. Communication with this memory is much faster (but Nvidia doesn‚Äôt disclose it publicly), a ballpark number for is 2TB/s. SMSP: Streaming Multiprocessor Sub-Partition, introduced in the Ampere architecture, the second-level ‚Äúparallel component‚Äù in GPU, there‚Äôre 4 SMSP in an SM. L1 cache: Each SM has its own L1 cache (smaller), also used to cache read and writes to HBM. Read/write to this memory usually takes 20-40 cycles. Shared Memory: Each SM has a chunk of memory for all threads/processes running on all of its SMSP. Read/write to this memory usually takes 20-40 cycles as well. Register File: A chunk of registers local to each SMSP (and local to the threads running on it). Read/write to registers takes 1 cycle (as fast as you can get). Warp Scheduler: The scheduler that schedules which warp gets run on the SMSP at any given time, more on this later. INT32: The arithmetic ‚Äúcore‚Äù that performs 32-bit integer arithmetics. This core works on scalar values. FP32: The arithmetic ‚Äúcore‚Äù that performs 32-bit floating point arithmetics. This core works on scalar values. Tensor Cores: The arithmetic ‚Äúcore‚Äù that can both perform floating point arithmetics and integer arithmetics. This core works on a bunch of values at a time (hence the name tensor)"><img src="https://seanzhang.me/posts/hitchhiker_cuda/memory_hierarchy.png" class="img-fluid figure-img" alt="A simplified overview of GPU architecture, numbers are for modern (as of 2024) GPU SM: Streaming Multiprocessor, the first-level ‚Äúparallel component‚Äù in GPU, there‚Äôre 128 SM in a RTX4090 HBM: High Bandwidth Memory, the ‚Äúglobal memory‚Äù/‚Äùdevice memory‚Äù of GPU, size is usually around 20GB~80GB. Communicating with this memory is considered extremely slow, on the order of 400-800 cycles per access. L2 cache: The cache for HBM, read and writes to HBM will be cached here. Communication with this memory is much faster (but Nvidia doesn‚Äôt disclose it publicly), a ballpark number for is 2TB/s. SMSP: Streaming Multiprocessor Sub-Partition, introduced in the Ampere architecture, the second-level ‚Äúparallel component‚Äù in GPU, there‚Äôre 4 SMSP in an SM. L1 cache: Each SM has its own L1 cache (smaller), also used to cache read and writes to HBM. Read/write to this memory usually takes 20-40 cycles. Shared Memory: Each SM has a chunk of memory for all threads/processes running on all of its SMSP. Read/write to this memory usually takes 20-40 cycles as well. Register File: A chunk of registers local to each SMSP (and local to the threads running on it). Read/write to registers takes 1 cycle (as fast as you can get). Warp Scheduler: The scheduler that schedules which warp gets run on the SMSP at any given time, more on this later. INT32: The arithmetic ‚Äúcore‚Äù that performs 32-bit integer arithmetics. This core works on scalar values. FP32: The arithmetic ‚Äúcore‚Äù that performs 32-bit floating point arithmetics. This core works on scalar values. Tensor Cores: The arithmetic ‚Äúcore‚Äù that can both perform floating point arithmetics and integer arithmetics. This core works on a bunch of values at a time (hence the name tensor)"></a></p>
<figcaption>A simplified overview of GPU architecture, numbers are for modern (as of 2024) GPU <strong>SM</strong>: Streaming Multiprocessor, the first-level ‚Äúparallel component‚Äù in GPU, there‚Äôre 128 SM in a RTX4090 <strong>HBM</strong>: High Bandwidth Memory, the ‚Äúglobal memory‚Äù/‚Äùdevice memory‚Äù of GPU, size is usually around 20GB~80GB. Communicating with this memory is considered extremely slow, on the order of 400-800 cycles per access. <strong>L2 cache</strong>: The cache for HBM, read and writes to HBM will be cached here. Communication with this memory is <a href="https://stackoverflow.com/questions/66921433/is-memory-operation-for-l2-cache-significantly-faster-than-global-memory-for-nvi">much faster</a> (but Nvidia doesn‚Äôt disclose it publicly), a ballpark number for is 2TB/s. <strong>SMSP</strong>: Streaming Multiprocessor Sub-Partition, introduced in the Ampere architecture, the second-level ‚Äúparallel component‚Äù in GPU, there‚Äôre 4 SMSP in an SM. <strong>L1 cache</strong>: Each SM has its own L1 cache (smaller), also used to cache read and writes to HBM. Read/write to this memory usually takes 20-40 cycles. <strong>Shared Memory</strong>: Each SM has a chunk of memory for all threads/processes running on all of its SMSP. Read/write to this memory usually takes 20-40 cycles as well. <strong>Register File</strong>: A chunk of registers local to each SMSP (and local to the threads running on it). Read/write to registers takes 1 cycle (as fast as you can get). <strong>Warp Scheduler</strong>: The scheduler that schedules which warp gets run on the SMSP at any given time, more on this later. <strong>INT32</strong>: The arithmetic ‚Äúcore‚Äù that performs 32-bit integer arithmetics. This core works on scalar values. <strong>FP32</strong>: The arithmetic ‚Äúcore‚Äù that performs 32-bit floating point arithmetics. This core works on scalar values. <strong>Tensor Cores</strong>: The arithmetic ‚Äúcore‚Äù that can both perform floating point arithmetics and integer arithmetics. This core works on a bunch of values at a time (hence the name tensor)</figcaption>
</figure>
</div>
<p>The above diagram hopefully depicts what a modern (Nvidia) GPU consists of. There‚Äôre a few things to note here about the hardware:</p>
<ol type="1">
<li><p>Both L1 cache and L2 cache are ‚Äúinvisible‚Äù to programmers in the sense that you can‚Äôt directly manipulate them (but you can <a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-l2-access-management">set the persistence size of L2 cache</a>, or <a href="https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#cache-operators">give hints</a> to the machine w.r.t. the cache policy)</p></li>
<li><p>L1 cache and Shared Memory actually the same physical memory, it‚Äôs up to the programmer to configure the size of each.</p></li>
<li><p>The bandwidth between each component varies greatly from GPU to GPU, but generally</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BHBM%7D%20%3C%20%5Ctext%7BL2%7D%20%3C%5Ctext%7BL1%7D%20=%20%5Ctext%7BShared%20Memory%7D%20%3C%20%5Ctext%7BRegister%20File%7D%0A"></p></li>
<li><p>Different GPU have different configurations of cores</p></li>
<li><p>Tensor core <a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#wmma-type-sizes">does not support fp32 operations</a></p></li>
</ol>
<p>What we can immediately conclude from this is that <strong>we want to avoid communication with HBM by caching data aggressively</strong>.</p>
<section id="memory-hierarchy" class="level3">
<h3 class="anchored" data-anchor-id="memory-hierarchy">Memory Hierarchy</h3>
<p>Let‚Äôs take a closer look at the memories in a GPU. The following diagram demonstrates Nvidia GPU‚Äôs memory hierarchy, notice how each SMSP has its own registers, SMSPs in the same SM shares the the same shared memory and L1 cache. This is why thread blocks are assigned to SM, not SMSP.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="A100_memory.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Memory hierarchy of A100"><img src="https://seanzhang.me/posts/hitchhiker_cuda/A100_memory.png" class="img-fluid figure-img" alt="Memory hierarchy of A100"></a></p>
<figcaption>Memory hierarchy of A100</figcaption>
</figure>
</div>
</section>
</section>
<section id="gpu-execution-model" class="level2">
<h2 class="anchored" data-anchor-id="gpu-execution-model">GPU Execution Model</h2>
<p>Another important aspect of the GPU hardware is to understand how it executes.</p>
<section id="simt" class="level3">
<h3 class="anchored" data-anchor-id="simt">SIMT</h3>
<p>The execution model follows a <a href="https://en.wikipedia.org/wiki/Single_instruction,_multiple_threads#:~:text=Single%20instruction%2C%20multiple%20threads%20(SIMT,SIMD)%20is%20combined%20with%20multithreading.">SIMT</a> model (as opposed to <a href="https://en.wikipedia.org/wiki/Single_instruction,_multiple_data">SIMD</a> or other forms of parallel computing model), this roughly means <strong>every line of code you write gets executed on multiple threads</strong>, in parallel, as opposed to explicitly telling the program how to parallelize the workload.</p>
<p>The following examples demonstrate 2 cases where you explicitly tell the program how to do the parallelization.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> multiprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pool</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> f(x):</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> Pool(processes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pool:</span>
<span id="cb1-7">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pool.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(f, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb2-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb2-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;omp.h&gt;</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> num_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>num_elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Parallelize the loop with OpenMP</span></span>
<span id="cb2-14">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma omp parallel for</span></span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> num_elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-16">        result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-18"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The following example demonstrates CUDA‚Äôs SMIT model, just read the highlighted part.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb3-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;vector&gt;</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This is the device code, runs in GPU</span></span>
<span id="cb3-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// IMPORTANT: Every thread executes the same program, you don't have for loops**</span></span>
<span id="cb3-6">__global__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> square<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>d_result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> num_elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-7">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> num_elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-9">        d_result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-11"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This is the host code, runs in CPU</span></span>
<span id="cb3-14"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> num_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>num_elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-17"></span>
<span id="cb3-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>d_result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-19">    cudaMalloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**)&amp;</span>d_result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> num_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb3-20"></span>
<span id="cb3-21">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> blockSize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-22">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> numBlocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>num_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blockSize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> blockSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This launchs the CUDA kernel on the GPU</span></span>
<span id="cb3-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: this is non-blocking**</span></span>
<span id="cb3-25">    square<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;&lt;</span>numBlocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> blockSize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;(</span>d_result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> num_elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-26"></span>
<span id="cb3-27">    cudaMemcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span> d_result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> num_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> cudaMemcpyDeviceToHost<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-28"></span>
<span id="cb3-29">    cudaFree<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>d_result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb3-30"></span>
<span id="cb3-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Print the result</span></span>
<span id="cb3-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> num_elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-33">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-34">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-35">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>cout <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>endl<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-36"></span>
<span id="cb3-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-38"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>A reasonable question to ask is, if every thread is executing the same code, how is it going to solve any useful task? The subtlety here is that although each thread is executing the same code, <strong>the data pointed by addresses in each thread is different</strong>.</p>
</section>
<section id="execution-hierarchy" class="level3">
<h3 class="anchored" data-anchor-id="execution-hierarchy">Execution Hierarchy</h3>
<p>Given the hardware hierarchy above, CUDA provides an execution hierarchy as follows</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="execution_hierarchy.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Simplified CUDA execution hierarchy"><img src="https://seanzhang.me/posts/hitchhiker_cuda/execution_hierarchy.png" class="img-fluid figure-img" alt="Simplified CUDA execution hierarchy"></a></p>
<figcaption>Simplified CUDA execution hierarchy</figcaption>
</figure>
</div>
<p>In CUDA, the execution of every problem/kernel program is represented as <strong>a set of thread blocks (called the grid)</strong>. The way this division of the problem is done is managed by the programmer, for example, to do matrix multiplication of two 4096 * 4096 matrix, one can choose to assign the calculation of every 128 * 128 output to one block, effectively giving 1024 blocks (4096^2 / 128^2).</p>
<p>Each block is assigned to <strong>one and only one SM</strong> (streaming multiprocessor), but multiple blocks can be assigned to one SM. The exact block-to-block distribution policy is not made public by Nvidia, but according to [3], the default distribution policy is <strong>round-robin</strong> (provided that there‚Äôs only one stream). Also, because each block will take up resources (register files, shared memory), the number of blocks (also called <strong>occupancy</strong>) that can be assigned to a single SM is limited by each block‚Äôs resource usage. As we‚Äôll see later, <strong>we want higher occupancy in order to hide memory latency.</strong></p>
<p>Another important concept in CUDA is called a <strong>warp</strong>, which basically means a group of 32 threads. A block can contain a configurable number of warps. The idea of warp is important because it‚Äôs the smallest scheduling primitive in CUDA.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="warp.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Warp is the smallest scheduling primitive, an SMSP can only execute instructions for one warp at a time. The ‚Äú.add‚Äù here simply symbolizes an addition operation carried out by each warp."><img src="https://seanzhang.me/posts/hitchhiker_cuda/warp.png" class="img-fluid figure-img" alt="Warp is the smallest scheduling primitive, an SMSP can only execute instructions for one warp at a time. The ‚Äú.add‚Äù here simply symbolizes an addition operation carried out by each warp."></a></p>
<figcaption>Warp is the smallest scheduling primitive, an SMSP can only execute instructions for one warp at a time. The ‚Äú.add‚Äù here simply symbolizes an addition operation carried out by each warp.</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="thread.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Every thread in a warp always executes the same thing (mostly, thread divergence can happen, sometimes intentionally by the programmer, in which case the execution is serialized by masking one group, execute; then masking another group, execute. This usually means degraded performance)"><img src="https://seanzhang.me/posts/hitchhiker_cuda/thread.png" class="img-fluid figure-img" alt="Every thread in a warp always executes the same thing (mostly, thread divergence can happen, sometimes intentionally by the programmer, in which case the execution is serialized by masking one group, execute; then masking another group, execute. This usually means degraded performance)"></a></p>
<figcaption>Every thread in a warp always executes the same thing (mostly, thread divergence can happen, sometimes intentionally by the programmer, in which case the execution is serialized by masking one group, execute; then masking another group, execute. This usually means degraded performance)</figcaption>
</figure>
</div>
<p>Every thread in a warp always executes the same thing (mostly, thread divergence can happen, sometimes intentionally by the programmer, in which case the execution is serialized by masking one group, execute; then masking another group, execute. This usually means degraded performance)</p>
</section>
<section id="latency-hiding" class="level3">
<h3 class="anchored" data-anchor-id="latency-hiding">Latency Hiding</h3>
<p>The left image above shows how different warps execute sequentially, but they are all doing arithmetic operations (addition), which is only part of the picture. Let‚Äôs see what happens if we try to depict a more realistic picture, i.e., we should load data from/to memory before doing addition.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="latency_hiding_1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7" title="A more realistic depiction of different warp carrying out memory loading before doing addition."><img src="https://seanzhang.me/posts/hitchhiker_cuda/latency_hiding_1.png" class="img-fluid figure-img" alt="A more realistic depiction of different warp carrying out memory loading before doing addition."></a></p>
<figcaption>A more realistic depiction of different warp carrying out memory loading before doing addition.</figcaption>
</figure>
</div>
<p>An important realization is that <strong>memory operation takes much longer time (~400 cycles)</strong> than arithmetic operations (~20 cycles [4]), so if there‚Äôs not enough warps on an SM that the scheduler can issue instructions to (because all of them are waiting for the memory load to complete, as all of their next operation depends on this), there will be cycles where no instructions are issued by the warp scheduler. This is very bad for performance because we are essentially wasting hardwares.</p>
<p>Now consider what happens if we have more warps</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="latency_hiding_2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8" title="More warps hide memory latency, no wasted cycles!"><img src="https://seanzhang.me/posts/hitchhiker_cuda/latency_hiding_2.png" class="img-fluid figure-img" alt="More warps hide memory latency, no wasted cycles!"></a></p>
<figcaption>More warps hide memory latency, no wasted cycles!</figcaption>
</figure>
</div>
<p>As more warps are assigned to an SM, the parallelism allows us to hide the latency of memory load, because we are always doing some work. Note that the parallelism can come from more warps per block, or more blocks. The difference that makes is that warps from different blocks can‚Äôt talk to each other via shared memory.</p>
</section>
<section id="occupancy" class="level3">
<h3 class="anchored" data-anchor-id="occupancy">Occupancy</h3>
<p>Occupancy measures the ratio between the number of active warps on an SM and the theoretical limit, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BOccupancy%7D%20=%20%5Cfrac%7B%5Ctext%7BActive%20concurrent%20warps%7D%7D%7B%5Ctext%7BTheoretical%20limit%20of%20number%20of%20active%20warps%20in%20an%20SM%7D%7D%0A"></p>
<p>Usually, <strong>the higher the occupancy, the more opportunity that the SM scheduler has in terms of hiding latency</strong>. However, importantly, <strong>this does not universally lead to more efficient program because more warps means smaller register usage per warp, and register access is much faster than shared memory access</strong>. More on this can be found on <span class="citation" data-cites="nvidia_lower_occupancy">(Nvidia 2010)</span>.</p>
<p>To get the numerator, we have to profile the kernel and obtained from measuring the warp scheduler‚Äôs issuance statistics. Usually this done via Nvidia‚Äôs <a href="https://developer.nvidia.com/nsight-compute">nsight compute</a> (in the old days it‚Äôs nvprof, but that‚Äôs long gone).</p>
<p>The denominator is fixed once the programmer determines the kernel‚Äôs launch configuration (block size, grid size, etc.), <strong>at compile time.</strong> Note that the theoretical limit has another upper bound regardless of your launch configuration, i.e., the hardware-defined maximum number of resident warps per SM (look for the <code>Maximum number of resident warps per SM</code> term on <span class="citation" data-cites="nvidia_cuda_guide">(Nvidia 2024)</span>). The latest number for Hopper architecture is 64.</p>
<p>At compile time, the denominator is determined by mainly 3 resources as shown below</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th></th>
<th>Block Resource Required</th>
<th>Limiting Factor</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>Shared Memory per Block</td>
<td>Shared Memory per SM</td>
</tr>
<tr class="even">
<td>2</td>
<td># Threads per block</td>
<td># Threads limit per SM</td>
</tr>
<tr class="odd">
<td>3</td>
<td># Register usage per thread</td>
<td>Register File per SM</td>
</tr>
</tbody>
</table>
<p>Concretely, the number of blocks that can be assigned to an SM is determined by taking the minimum of <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Ctext%7BTotal%20Resource%7D%7D%7B%5Ctext%7BResources%20Required%20per%20Block%7D%7D"> for all these 3 resources, meaning</p>
$$
<img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bgathered%7D%5Ctext%20%7B%20Theoretical%20Limit%20%7D=%5C%5C%5Cmin%5Cleft(%5Clfloor%5Cfrac%7B%5Ctext%7BSHM/%20SM%7D%7D%7B%5Ctext%7BSHM%20/%20block%7D%7D%5Ccdot%5Ctext%7BWarp/block%7D%5Crfloor,%20%5Clfloor%5Cfrac%7B%5Ctext%7BMaxThreads/SM%7D%7D%7B%5Ctext%7BWarpSize%7D%7D%5Crfloor,%20%5Clfloor%5Cfrac%7B%5Ctext%7BReg%20Size/SM%7D%7D%7B%5Ctext%7BReg/thread%7D%20%5Ccdot%20%5Ctext%7BWarpSize%7D%7D%5Crfloor%5Cright)%5Cend%7Bgathered%7D">
<p>$$</p>
<p>notations are as follows</p>
<ul>
<li>MaxThreads : the maximum number of threads an SM can take</li>
<li>SHM: shared memory in bytes</li>
<li>Warp/Block: number of warps per block, or blockSize/warpSize</li>
<li>WarpSize: number of threads per warp, always 32 in all Nvidia GPU so far</li>
<li>Reg/thread: register usage per thread</li>
</ul>
<p>Due to the importance of occupancy, there both <a href="https://developer.nvidia.com/nsight-compute">official</a> and <a href="https://xmartlabs.github.io/cuda-calculator/">unofficial</a> tools to calculate the theoretical limit.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="occupancy.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9" title="theoretical #warps depending on different launch configuration/resource usage, from CUDA Occupancy Calculator (xmartlabs.github.io)"><img src="https://seanzhang.me/posts/hitchhiker_cuda/occupancy.png" class="img-fluid figure-img" alt="theoretical #warps depending on different launch configuration/resource usage, from CUDA Occupancy Calculator (xmartlabs.github.io)"></a></p>
<figcaption>theoretical <code>#warps</code> depending on different launch configuration/resource usage, from <a href="https://xmartlabs.github.io/cuda-calculator/">CUDA Occupancy Calculator (xmartlabs.github.io)</a></figcaption>
</figure>
</div>
<p>Note how the <code>#warps</code> look like step change functions as the resource usage changes. This is because the <img src="https://latex.codecogs.com/png.latex?%5Clfloor%20%5Cquad%20%5Crfloor"> operation we did, as <code>#warps</code> needs to be an integer. The implication is that for a given level of occupancy, there‚Äôs a range of resource allocation we can give to each thread without affecting occupancy.</p>
</section>
</section>
</section>
<section id="matrix-multiplication" class="level1 page-columns page-full">
<h1>Matrix Multiplication</h1>
<p>Now that we covered the basics, let‚Äôs try to do a matrix multiplication. We are going to demonstrate various CUDA techniques by doing this.</p>
<ol type="1">
<li>Naive</li>
<li>Shared memory caching</li>
<li>Thread tiling</li>
<li>Thread tiling + vectorized access + coalesced access</li>
<li>Thread tiling+ vectorized access + coalesced access + prefetching/pipelining</li>
<li>Thread tiling+ vectorized access + coalesced access + prefetching/pipelining + swizzle</li>
<li>Warp tiling + vectorized access</li>
<li><del>Warp tiling + vectorized access + memory access swizzle</del></li>
<li>Warp tiling + vectorized access + k-split</li>
</ol>
<section id="naive" class="level2">
<h2 class="anchored" data-anchor-id="naive">Naive</h2>
<p>The naive algorithm to solve the matrix multiplication is demonstrated by both the mathematical definition as well as the diagram below</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="naive_matmul.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10" title="Naive matmul"><img src="https://seanzhang.me/posts/hitchhiker_cuda/naive_matmul.png" class="img-fluid figure-img" alt="Naive matmul"></a></p>
<figcaption>Naive matmul</figcaption>
</figure>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bgathered%7DC_%7Bij%7D%20%20=%20%5Csum_%7Bk=1%7D%5E%7BK%7DA_%7Bik%7DB_%7Bkj%7D%5Cend%7Bgathered%7D%0A"></p>
<p>The above shows the most essential operation in matmul, but in practice, people usually do</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AC%20=%20%5Calpha%5Ccdot(A%20%5Ctimes%20B)%20+%20%5Cbeta%5Ccdot%20C%0A"></p>
<p>which is a multiply-accumulation (MAC) operation with 2 scaling factors.</p>
<p>The following code shows the implementation of the naive matmul operation.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda_runtime.h&gt;</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define DIV_CEIL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(((</span>M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb4-4"></span>
<span id="cb4-5">__global__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> sgemm_naive<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-6">                            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-9"></span>
<span id="cb4-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-13">      tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb4-14">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-15">    C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb4-16">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-20"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb4-21"></span>
<span id="cb4-22">dim3 blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-23">dim3 gridDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>DIV_CEIL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> DIV_CEIL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">));</span></span>
<span id="cb4-24">sgemm_naive<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;&lt;</span>gridDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;(</span>M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb4-25"></span>
<span id="cb4-26"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb4-27"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Running the above code gives us the following poor performance.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="naive_matmul_perf.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11" title="Naive matmul performance"><img src="https://seanzhang.me/posts/hitchhiker_cuda/naive_matmul_perf.png" class="img-fluid figure-img" alt="Naive matmul performance"></a></p>
<figcaption>Naive matmul performance</figcaption>
</figure>
</div>
<p>To understand why the performance is poor, consider the <a href="https://crd.lbl.gov/divisions/amcr/computer-science-amcr/par/research/roofline/introduction/#:~:text=Arithmetic%20Intensity%20is%20the%20ratio,ndependent%20of%20the%20vector%20size.">arithmetic intensity</a> of this kernel:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bgathered%7D%0A%5Ctext%7BArithmetic%20Intensity%7D%20=%20%5Cfrac%7B%5Ctext%7BBytes%20Computed%7D%7D%7B%5Ctext%7BBytes%20I/IO%7D%7D%5C%5C%0A=%20%5Cfrac%7B1(C_%7Bij%7D)%20%5Ctimes%204%20(%5Ctext%7Bbytes%20per%20float%7D)%7D%7B(M(A_%7Bi:%7D)+%20N(B_%7B:j%7D))%5Ctimes%204(%5Ctext%7Bbytes%20per%20float%7D)%7D%5C%5C%0A=%5Cfrac%7B1%7D%7B2K%7D%0A%5Cend%7Bgathered%7D%0A"></p>
<p>which is very low. This is saying, for every <img src="https://latex.codecogs.com/png.latex?2K"> elements read, we are only calculating <img src="https://latex.codecogs.com/png.latex?1"> element from the memory read. This is bad because memory read is expensive, and we ideally want to do more work on the read data than just computing 1 number.</p>
<p>This can be verified by profiling this kernel with nsight compute and checking the roofline model:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="naive_matmul_roofline.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12" title="As can be seen, the arithmetic intensity of this kernel is too low, resulting 6% of theoretical fp32 performance achieved"><img src="https://seanzhang.me/posts/hitchhiker_cuda/naive_matmul_roofline.png" class="img-fluid figure-img" alt="As can be seen, the arithmetic intensity of this kernel is too low, resulting 6% of theoretical fp32 performance achieved"></a></p>
<figcaption>As can be seen, the arithmetic intensity of this kernel is too low, resulting 6% of theoretical fp32 performance achieved</figcaption>
</figure>
</div>
<p>Not only is the arithmetic intensity low, attention should also be paid to the 2 purple lines above</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb5-1">tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb5-3">    C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span></code></pre></div>
<p>The first line reads data from the device/global memory, without touching the shared memory at all, and the second line read from and write to device/global memory. Both lines are going to be very slow in GPU context. This will result in a very high <strong>throughput</strong>, but very bad performance. This is an example showing that <strong>maximizing throughput should never be the only optimization goal.</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="full_throughput.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13" title="This naive kernel achieves full throughput in both memory and compute! but it‚Äôs very bad algorithm"><img src="https://seanzhang.me/posts/hitchhiker_cuda/full_throughput.png" class="img-fluid figure-img" alt="This naive kernel achieves full throughput in both memory and compute! but it‚Äôs very bad algorithm"></a></p>
<figcaption>This naive kernel achieves full throughput in both memory and compute! but it‚Äôs very bad algorithm</figcaption>
</figure>
</div>
</section>
<section id="shared-memory-caching" class="level2">
<h2 class="anchored" data-anchor-id="shared-memory-caching">Shared Memory Caching</h2>
<p>Since we are not using shared memory, let‚Äôs try to resolve this first by using shared memory to cache the data before doing calculation, which results in the following algorithm.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://seanzhang.me/posts/hitchhiker_cuda/smem_matmul.png" class="img-fluid figure-img"></p>
<figcaption>Naive implementation + smem cache BM and BN are parameters determining how we partition the C matrix by blocks BK is the parameter determining how much data we load from global memory to shared memory every time. We have to have this BK parameter because shared memory is very limited, a whole BMxK block of data usually doesn‚Äôt fit</figcaption>
</figure>
</div>
<p>Adding smem access gives us the following performance, which is not that impressive. This is because adding smem access does not change the arithmetic intensity. The reason we still see some benefit in small matrix sizes is likely due to the fact that it increases L2 cache hit rate and the memory access is more coalesced as we are loading larger chunk of memories.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="smem_matmul_perf.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14" title="Shared memory cached matmul performance"><img src="https://seanzhang.me/posts/hitchhiker_cuda/smem_matmul_perf.png" class="img-fluid figure-img" alt="Shared memory cached matmul performance"></a></p>
<figcaption>Shared memory cached matmul performance</figcaption>
</figure>
</div>
<ul>
<li><p>Smem access kernel</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BLOCK_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb6-2">__global__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> sgemm_smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-5"></span>
<span id="cb6-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BLOCK_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BLOCK_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BLOCK_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-9"></span>
<span id="cb6-10">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> tx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-12"></span>
<span id="cb6-13">    __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> As<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-14">    __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> Bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-15"></span>
<span id="cb6-16">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-17">    B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-18">    C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-19"></span>
<span id="cb6-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-22">        As<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-23">        Bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-24">        __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-25">        A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-26">        B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-28">            tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> As<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-29">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-30">        __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb6-31">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-32">    C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb6-33"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></li>
</ul>
</section>
<section id="thread-tiling" class="level2">
<h2 class="anchored" data-anchor-id="thread-tiling">Thread Tiling</h2>
<p>Now let‚Äôs try to improve the arithmetic intensity. We can do this because for each <img src="https://latex.codecogs.com/png.latex?A_%7Bi:%7D"> we read, we can theoretically calculate the entire row of <img src="https://latex.codecogs.com/png.latex?C_%7Bi:%7D">, provided that we have the corresponding columns of <img src="https://latex.codecogs.com/png.latex?B"> read in. So as opposed to calculating a single element in <img src="https://latex.codecogs.com/png.latex?C">, we can theoretically calculate a whole row in <img src="https://latex.codecogs.com/png.latex?C">. But that‚Äôs too extreme, in practice, we can do something called thread tiling:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="smem_thread_tile_matmul.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15" title="Thread tiling + Shared memory access"><img src="https://seanzhang.me/posts/hitchhiker_cuda/smem_thread_tile_matmul.png" class="img-fluid figure-img" alt="Thread tiling + Shared memory access"></a></p>
<figcaption>Thread tiling + Shared memory access</figcaption>
</figure>
</div>
<p>The immediate benefit can be seen by calculating the arithmetic intensity again:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bgathered%7D%0A%5Ctext%7BArithmetic%20Intensity%7D%20=%20%5Cfrac%7B%5Ctext%7BBytes%20Computed%7D%7D%7B%5Ctext%7BBytes%20I/IO%7D%7D%5C%5C%0A=%20%5Cfrac%7BTM%20%5Ctimes%20TN%20%5Ctimes%204%20(%5Ctext%7Bbytes%20per%20float%7D)%7D%7B(K%5Ctimes%20TN%20+%20%20K%5Ctimes%20TM)%5Ctimes%204(%5Ctext%7Bbytes%20per%20float%7D)%7D%5C%5C%0A=%5Cfrac%7BTM%5Ctimes%20TN%7D%7BK%5Ctimes(TM%20+%20TN)%7D%0A%5Cend%7Bgathered%7D%0A"></p>
<p>And therefore the arithmetic intensity improvement is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BImprovement%7D%20=%20%5Cfrac%7B%5Cfrac%7BTM%5Ccdot%20TN%7D%7BK%5Ccdot(TM%20+%20TN)%7D%7D%7B%5Cfrac%7B1%7D%7B2K%7D%7D%20=%20%5Cfrac%7B2%7D%7B1/TM%20+%201/TN%7D%0A"></p>
<p>for squared matrices, this can be further simplified</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BImprovement%7D%20=%20%5Cfrac%7B2%7D%7B2/TM%7D%20=%20TM%0A"></p>
<p>which means the arithmetic intensity improvement is proportional to the size of the thread tiling. Note that we can‚Äôt arbitrarily make <img src="https://latex.codecogs.com/png.latex?TM"> as large as we want for the following reason:</p>
<ol type="1">
<li>A <img src="https://latex.codecogs.com/png.latex?LM/LN"> too large means less threads/warps, which causes occupancy to drop, therefore hinders performance</li>
<li>A <img src="https://latex.codecogs.com/png.latex?LM/LN"> too large means more register usage per warp, which also causes occupancy to drop</li>
<li>A <img src="https://latex.codecogs.com/png.latex?LM/LN"> too large can even cause register to overflow to local storage (on global memory), thereby significantly degrading performance</li>
</ol>
<p>Without much tuning, we are able to get the following performance with thread tiling:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="thread_tiling_perf.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16" title="Thread tiling performance"><img src="https://seanzhang.me/posts/hitchhiker_cuda/thread_tiling_perf.png" class="img-fluid figure-img" alt="Thread tiling performance"></a></p>
<figcaption>Thread tiling performance</figcaption>
</figure>
</div>
<p>Now we are talking üôÇ</p>
<ul>
<li><p>Thread tiling code</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb7-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma once</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda_runtime.h&gt;</span></span>
<span id="cb7-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cublas_v2.h&gt;</span></span>
<span id="cb7-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb7-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-9">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-10">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-11">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb7-12">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb7-13">__global__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> mysgemm_v4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-16"></span>
<span id="cb7-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> block_row_thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> block_col_thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> thread_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_row_thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_col_thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-20"></span>
<span id="cb7-21">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> tx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> block_row_thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-22">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> block_row_thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-23"></span>
<span id="cb7-24">    __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> As<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-25">    __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> Bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-26"></span>
<span id="cb7-27">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-28">    B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-29">    C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-30"></span>
<span id="cb7-31">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_tile_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-32">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_tile_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-33">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_tile_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-34"></span>
<span id="cb7-35">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_tile_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-36">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_tile_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-37">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_tile_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thread_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-38"></span>
<span id="cb7-39">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb7-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> a_tile_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-42">            As<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>a_tile_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a_tile_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>a_tile_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a_tile_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-43">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> b_tile_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-45">            Bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>b_tile_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b_tile_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>b_tile_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b_tile_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-46">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-47">        __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-48">        A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-49">        B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-51">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-52">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb7-53">                    tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> As<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>tx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-54">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-55">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-56">        __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb7-57">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-58">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb7-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span></span>
<span id="cb7-60">            C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb7-61">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-62"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></li>
</ul>
</section>
<section id="vectorized-access-coalesced-access" class="level2">
<h2 class="anchored" data-anchor-id="vectorized-access-coalesced-access">Vectorized Access &amp; Coalesced Access</h2>
<p>One of the common optimization method is <span class="citation" data-cites="nvidia_vectorized_memory">(Nvidia 2013)</span>, which is basically saying instead of getting a single float at a time, we want to get 2, or 4 floats at a time. This improves performance because</p>
<ul>
<li>In CUDA, all device/global memory access is done via 32-, 64-, or 128-byte memory transactions</li>
<li>For threads within a warp accessing global memories, their access will be grouped together in 32-, 64-, or 128-byte memory transactions, after data is read from memory, data for the warp will be distributed onto individual threads</li>
<li>If we are getting 4 consecutive 32-byte memory (8 floats) from a warp, we are issuing 4 instructions (the <code>LD</code> instruction); but if we are getting one 128-byte from a warp, we are only issuing 1 instruction (the <code>LD.128</code> instruction). There‚Äôre 2 benefits:
<ul>
<li>Smaller number of instructions ‚áí instruction cache hit rate will improve</li>
<li>Despite that the issuance of load instruction itself takes small number of cycles (majority of time for a <code>LD</code> operation is spent on waiting, and that‚Äôs usually hidden via high occupancy), there‚Äôre still small benefit of the reduced number of instruction issuance.</li>
</ul></li>
</ul>
<p>The following graph demonstrates the benefit of vectorized loading.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="vectorization.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17" title="Data movement rate comparison between different size of element read per thread"><img src="https://seanzhang.me/posts/hitchhiker_cuda/vectorization.png" class="img-fluid figure-img" alt="Data movement rate comparison between different size of element read per thread"></a></p>
<figcaption>Data movement rate comparison between different size of element read per thread</figcaption>
</figure>
</div>
<p>The actual implementation in CUDA is actually simple, instead of dealing with <code>float</code> type, just deal with <code>float4</code> , and the compiler will compile it to the correct instruction.</p>
<p>Beside vectorizing global memory access, we can also notice that there‚Äôs a non-coalesced memory access from shared memory when actually performing the per-thread multiplication. Consider the 2 outlined blocks of data that currently resides in shared memory:</p>
<ol type="1">
<li>the access to the red block from B is coalesced, because B is row-majored</li>
<li>the access to the red block from A is <strong>not coalesced</strong>, also because A is row-majored</li>
</ol>
<p>Note that it doesn‚Äôt matter how we choose iterate within the thread tile, we can read in a sub-row from A and a sub-column from B and one of them would still be <strong>non-coalesced</strong>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="coalesced_access.png" class="lightbox" data-gallery="quarto-lightbox-gallery-18" title="Coalesced access"><img src="https://seanzhang.me/posts/hitchhiker_cuda/coalesced_access.png" class="img-fluid figure-img" alt="Coalesced access"></a></p>
<figcaption>Coalesced access</figcaption>
</figure>
</div>
<p>To solve this, we can simply adopt a transposed shared memory layout.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="transpose_memory.png" class="lightbox" data-gallery="quarto-lightbox-gallery-19" title="Transpose the shared memory layout can result in coalesced read into registers (but non-coalesced write into shared memory, which can be handled via pipelining). Here the region marked by t1 and t2 are indicating what data each thread is responsible of loading from global memory and writing to shared memory. In practice, a thread can handle less than a row in the sub-block of global memory."><img src="https://seanzhang.me/posts/hitchhiker_cuda/transpose_memory.png" class="img-fluid figure-img" alt="Transpose the shared memory layout can result in coalesced read into registers (but non-coalesced write into shared memory, which can be handled via pipelining). Here the region marked by t1 and t2 are indicating what data each thread is responsible of loading from global memory and writing to shared memory. In practice, a thread can handle less than a row in the sub-block of global memory."></a></p>
<figcaption>Transpose the shared memory layout can result in coalesced read into registers (but non-coalesced write into shared memory, which can be handled via pipelining). Here the region marked by t1 and t2 are indicating what data each thread is responsible of loading from global memory and writing to shared memory. In practice, a thread can handle less than a row in the sub-block of global memory.</figcaption>
</figure>
</div>
<p>Combining the vectorization load and coalesced access, we get the following performance</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="coalesced_perf.png" class="lightbox" data-gallery="quarto-lightbox-gallery-20" title="Approaching 80% CuBLAS performance with vectorization and coalesced access"><img src="https://seanzhang.me/posts/hitchhiker_cuda/coalesced_perf.png" class="img-fluid figure-img" alt="Approaching 80% CuBLAS performance with vectorization and coalesced access"></a></p>
<figcaption>Approaching 80% CuBLAS performance with vectorization and coalesced access</figcaption>
</figure>
</div>
<ul>
<li><p>code</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb8-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma once</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda_runtime.h&gt;</span></span>
<span id="cb8-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cublas_v2.h&gt;</span></span>
<span id="cb8-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb8-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define OFFSET</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>ld<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)*(</span>ld<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)+(</span>col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb8-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#ifndef FETCH_FLOAT4</span></span>
<span id="cb8-10"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define FETCH_FLOAT4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pointer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reinterpret_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>float4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(&amp;(</span>pointer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb8-11"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-14">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-15">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-16">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-17">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb8-18">__global__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sgemm_tt_</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-20">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-21"></span>
<span id="cb8-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> block_row_thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-23">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> block_col_thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> thread_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_row_thread <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> block_col_thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-25"></span>
<span id="cb8-26">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> tx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> block_row_thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-27">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> block_row_thread<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-28"></span>
<span id="cb8-29">    __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> As<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-30">    __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> Bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-31"></span>
<span id="cb8-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ldg_a_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> thread_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb8-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ldg_b_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> thread_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-34"></span>
<span id="cb8-35">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_tile_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-36">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_tile_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-37">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_tile_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ldg_a_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb8-38"></span>
<span id="cb8-39">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_tile_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb8-40">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_tile_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-41">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_tile_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ldg_b_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-42"></span>
<span id="cb8-43">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb8-44"></span>
<span id="cb8-45">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldg_a_reg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ldg_a_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb8-46"></span>
<span id="cb8-47">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> a_frag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-48">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> b_frag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-49"></span>
<span id="cb8-50">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-51">    B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-52">    C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-53"></span>
<span id="cb8-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> a_tile_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-56">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ldg_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> a_tile_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> </span>
<span id="cb8-57">            FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldg_a_reg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ldg_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb8-58">                    FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OFFSET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a_tile_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_tile_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]);</span></span>
<span id="cb8-59">            As<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OFFSET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a_tile_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a_tile_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldg_a_reg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ldg_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-60">            As<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OFFSET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a_tile_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a_tile_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldg_a_reg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ldg_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-61">            As<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OFFSET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a_tile_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a_tile_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldg_a_reg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ldg_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-62">            As<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OFFSET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a_tile_col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a_tile_row<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldg_a_reg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>ldg_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-63">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-64">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> b_tile_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-65">            FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OFFSET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>b_tile_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_tile_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span></span>
<span id="cb8-66">                    FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OFFSET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>b_tile_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_tile_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]);</span></span>
<span id="cb8-67">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-68">        __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-69">        A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-70">        B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-72">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-73">                FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a_frag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>As<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OFFSET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]);</span></span>
<span id="cb8-74">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-75">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-76">                FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>b_frag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>Bs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OFFSET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> tx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]);</span></span>
<span id="cb8-77">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-78">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-79">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-80">                    accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> a_frag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b_frag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb8-81">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-82">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-83">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-84">        __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb8-85">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-86">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-88">            float4 ctmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OFFSET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> tx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)]);</span></span>
<span id="cb8-89">            ctmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ctmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-90">            ctmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ctmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-91">            ctmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ctmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-92">            ctmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ctmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-93">            FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>OFFSET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ty <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> tx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ctmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-94">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-95">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-96"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></li>
</ul>
</section>
<section id="data-prefetchingpipelining" class="level2">
<h2 class="anchored" data-anchor-id="data-prefetchingpipelining">Data prefetching/pipelining</h2>
<p>In CUDA, from the point of view of the warp scheduler, most instructions are ‚Äúasynchronous‚Äù in the sense that they all take some cycles to finish.</p>
<p>For example</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb9-1">ld<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>s32 r1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb9-2">ld<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>s32 r2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb9-3">add<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>s32 r3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> r2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-4">st<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>s32 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> r3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>In this PTX code (PTX is the pseudo-assembly language that C++ CUDA code compiles to), let‚Äôs say that the warp scheduler schedules the first <code>line ld.s32 r1, [j];</code>, the data from address <code>[j]</code> will not become ready in the next cycle (and won‚Äôt be for around 400 cycles if we are loading from global memory), so the scheduler simply fires away and issues the <code>ld.s32 r2, [k];</code> without waiting for <code>r1</code> to be loaded.</p>
<p>But when the scheduler sees <code>add.s32 r3, r1, r2;</code> there‚Äôs clearly a dependency on <code>r1</code> and <code>r2</code> to be available. So this warp will not be <strong>eligible</strong> for executing the next instruction, and we call it a <strong>stalled warp</strong>. Instead the scheduler will look at other warps to see if it schedule them. If no warps are eligible for execution, we‚Äôll be wasting execution units, and the number of active warps we talked about in the previous section will reduced, causing a lower occupancy.</p>
<p>With this in mind, we can devise a new way to optimize our kernel by prefetching the data and overlapping the fetch with computation. Here‚Äôs what I mean</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="pipeline_matmul.png" class="lightbox" data-gallery="quarto-lightbox-gallery-21" title="Prefetching with 2 stages"><img src="https://seanzhang.me/posts/hitchhiker_cuda/pipeline_matmul.png" class="img-fluid figure-img" alt="Prefetching with 2 stages"></a></p>
<figcaption>Prefetching with 2 stages</figcaption>
</figure>
</div>
<p>Of course we don‚Äôt have to limit ourselves to 2 stages, and in fact, modern CUDA has a nice <a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#asynchronous-data-copies-using-cuda-pipeline"><code>pipeline</code> interface</a> to work with for multi-stage loading.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="pipeline_matmul_3_stages.png" class="lightbox" data-gallery="quarto-lightbox-gallery-22" title="Prefetching with 3 stages"><img src="https://seanzhang.me/posts/hitchhiker_cuda/pipeline_matmul_3_stages.png" class="img-fluid figure-img" alt="Prefetching with 3 stages"></a></p>
<figcaption>Prefetching with 3 stages</figcaption>
</figure>
</div>
<p>Note that we can also do prefetching for the loading from smem to register step.</p>
<p>To implement prefetching is actually pretty simple, because the warp scheduler implements it for us. All we need to do is double the size of shared memory and register size and keep an index that points to the current stage of computation.</p>
<p>With prefetching, this is the result</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="pipeline_matmul_perf.png" class="lightbox" data-gallery="quarto-lightbox-gallery-23" title="Performance with prefetching"><img src="https://seanzhang.me/posts/hitchhiker_cuda/pipeline_matmul_perf.png" class="img-fluid figure-img" alt="Performance with prefetching"></a></p>
<figcaption>Performance with prefetching</figcaption>
</figure>
</div>
<ul>
<li><p>Code</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb10-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma once</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda_runtime.h&gt;</span></span>
<span id="cb10-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cublas_v2.h&gt;</span></span>
<span id="cb10-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb10-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#ifndef FETCH_FLOAT4</span></span>
<span id="cb10-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define FETCH_FLOAT4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pointer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reinterpret_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>float4<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(&amp;(</span>pointer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb10-10"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb10-11"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#ifndef DIV_UP</span></span>
<span id="cb10-12"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define DIV_UP</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>m<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>n<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-13"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb10-14"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define GROUP_SIZE </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb10-15"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define WARP_SIZE </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb10-16"></span>
<span id="cb10-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> kernel9 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-18"></span>
<span id="cb10-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-20">__device__ __forceinline__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> gmem_to_smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-22"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A: global -&gt; reg buffer</span></span>
<span id="cb10-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-24">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-25">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb10-26">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-27">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-28">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-29">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-30">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-31"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// B: global -&gt; reg buffer</span></span>
<span id="cb10-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-33">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-34">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb10-35">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>b_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>b_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb10-36">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-37"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-38"></span>
<span id="cb10-39">__device__ __forceinline__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> gmem_to_reg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-40"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-41"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A: global -&gt; reg buffer</span></span>
<span id="cb10-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-43">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-44">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb10-45">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-46"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// B: global -&gt; reg buffer</span></span>
<span id="cb10-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-48">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-49">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb10-50">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-51"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-52"></span>
<span id="cb10-53"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-54">__device__ __forceinline__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reg_to_smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-55"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-56"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A: reg buffer -&gt; smem</span></span>
<span id="cb10-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-58">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// note that this is uncoalesce memory write, and only 4 floats * 4 byte/float = 16 bytes per write</span></span>
<span id="cb10-59">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-60">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-61">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-62">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-63">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-64"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// B: reg buffer -&gt; smem</span></span>
<span id="cb10-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-66">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-67">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>b_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>b_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb10-68">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-69"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-70"></span>
<span id="cb10-71"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-72">__device__ __forceinline__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> smem_to_frag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> frag_phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> smem_phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> bk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-73"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// int swizzel_id = (threadIdx.x / 4) % 2;</span></span>
<span id="cb10-75"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll </span></span>
<span id="cb10-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-77">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-78">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// int swizzel_i = ((i / 4) ^ swizzel_id) * 4;</span></span>
<span id="cb10-79">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>frag_phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>smem_phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>bk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb10-80">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-81"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb10-82">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-83">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// int swizzel_i = ((i / 4) ^ swizzel_id) * 4;</span></span>
<span id="cb10-85">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>frag_phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>smem_phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>bk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb10-86">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-87"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-88"></span>
<span id="cb10-89"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// namespace kernel 9</span></span>
<span id="cb10-90"></span>
<span id="cb10-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This function assumes B is already transposed</span></span>
<span id="cb10-92"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-93">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-94">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-95">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-96">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-97">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> THREAD_NUMS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb10-98">__global__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> __launch_bounds__<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>THREAD_NUMS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> mysgemm_v9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-99"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-100">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-101">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-102">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> threads_per_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-103">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_ele_per_thread_smem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> threads_per_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-104">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_ele_per_thread_smem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> threads_per_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-105">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_rounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a_ele_per_thread_smem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-106">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_rounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b_ele_per_thread_smem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-107">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_threads_per_row_per_round <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-108">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threads_per_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> a_threads_per_row_per_round <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-109">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_threads_per_row_per_round <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-110">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threads_per_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> b_threads_per_row_per_round <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-111">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// int tid = threadIdx.y * blockDim.x + threadIdx.x;</span></span>
<span id="cb10-112">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// int lane_id = tid % 32;</span></span>
<span id="cb10-113">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> a_threads_per_row_per_round<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-114">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> a_threads_per_row_per_round<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-115">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> b_threads_per_row_per_round<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-116">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> b_threads_per_row_per_round<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-117"></span>
<span id="cb10-118">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> threads_per_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-119">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> threads_per_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-120">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a_ele_per_thread_smem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-121">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>b_ele_per_thread_smem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-122">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-123">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-124">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threads_per_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> a_threads_per_row_per_round <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// at least cover a row per round</span></span>
<span id="cb10-125">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threads_per_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> b_threads_per_row_per_round <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// at least cover a row per round</span></span>
<span id="cb10-126">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// at least 4 elements per thread and TN is a multiple of 4</span></span>
<span id="cb10-127"></span>
<span id="cb10-128">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb10-129"></span>
<span id="cb10-130">    __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// a transposed version of A block</span></span>
<span id="cb10-131">    __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-132"></span>
<span id="cb10-133">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// register for loading from global mem to smem</span></span>
<span id="cb10-134">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-135">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-136"></span>
<span id="cb10-137">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// fragment/register for computation</span></span>
<span id="cb10-138">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-139">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-140"></span>
<span id="cb10-141">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// move A to thread start</span></span>
<span id="cb10-142">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-143">    B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-144"></span>
<span id="cb10-145">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 1.1 fetch from global to smem, use register as buffer</span></span>
<span id="cb10-146">    kernel9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gmem_to_smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-147">    __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// need the sync such that the following fragment can be obtained</span></span>
<span id="cb10-148"></span>
<span id="cb10-149">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 1.2 load 0 round of smem-&gt;frag</span></span>
<span id="cb10-150">    kernel9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>smem_to_frag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// load first batch of frag from first block of smem</span></span>
<span id="cb10-151">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> smem_write_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// next index of smems to write to</span></span>
<span id="cb10-152">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> smem_read_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// read is current write</span></span>
<span id="cb10-153"></span>
<span id="cb10-154">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 2. start the blockwise loop</span></span>
<span id="cb10-155">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-156">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-157">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 2.0 fetch from global to smem, use register as buffer</span></span>
<span id="cb10-158">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-159">            A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// every iteration, A moves BK to the right</span></span>
<span id="cb10-160">            B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// every iteration, B moves BK * N down</span></span>
<span id="cb10-161">            kernel9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gmem_to_reg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// only load to reg, this is non-blocking</span></span>
<span id="cb10-162">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-163">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 2.1 use the frag already loaded to compute the outer product, note that we do register prefetching here</span></span>
<span id="cb10-164"></span>
<span id="cb10-165">        smem_read_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smem_write_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-166"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb10-167">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> b_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>b_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// load one sub row at a time from smem to frag</span></span>
<span id="cb10-168">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-169">            kernel9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>smem_to_frag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_read_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-170"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb10-171">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-172">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// outer product for the previous prefetched frag</span></span>
<span id="cb10-173"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb10-174">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-175">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-176">                    accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>b_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>b_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-177">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-178">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-179">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-180">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 2.2 if there's next block, start loading from reg to smem</span></span>
<span id="cb10-181">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-182">            kernel9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>reg_to_smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_write_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-183">            __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb10-184">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// prefetch a round of fragments from the current write, this will be blocking</span></span>
<span id="cb10-185">            kernel9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>smem_to_frag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_write_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb10-186">            smem_write_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// update next write</span></span>
<span id="cb10-187">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-188"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb10-189">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> </span>
<span id="cb10-190">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// one last round of outer product because we have only done BK - 1 products</span></span>
<span id="cb10-191"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb10-192">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-193">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-194">                accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-195">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-196">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-197">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-198"></span>
<span id="cb10-199">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 3. put the accumulate value down to C</span></span>
<span id="cb10-200">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// move C to thread tile start</span></span>
<span id="cb10-201">    C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb10-202"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb10-203">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-204"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb10-205">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-206">            float4 tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb10-207">            tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-208">            tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-209">            tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-210">            tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-211">            FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb10-212">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-213">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-214"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></li>
</ul>
</section>
<section id="swizzle" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="swizzle">Swizzle</h2>
<p>I was not particularly impressed with the result achieved by prefetching. If I profile the kernel, I found that the arithmetic intensity is high enough to achieve theoretical full performance, I also saw a good enough occupancy (<img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bactive%20warps%7D%20=%203.84"> ‚áí <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Boccupancy%7D%20=%20%5Cfrac%7B3.84%7D%7B4%7D%20=%2096%5C%25"> ). So the issue should be a ‚Äúnon-algorithmic‚Äù one.</p>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="swizzle_intensity_high.png" class="lightbox" data-gallery="quarto-lightbox-gallery-24" title="Arithmetic intensity is high enough"><img src="https://seanzhang.me/posts/hitchhiker_cuda/swizzle_intensity_high.png" class="img-fluid figure-img" alt="Arithmetic intensity is high enough"></a></p>
<figcaption>Arithmetic intensity is high enough</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="swizzle_occupancy_high.png" class="lightbox" data-gallery="quarto-lightbox-gallery-25" title="Occupancy is high"><img src="https://seanzhang.me/posts/hitchhiker_cuda/swizzle_occupancy_high.png" class="img-fluid figure-img" alt="Occupancy is high"></a></p>
<figcaption>Occupancy is high</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Looking closer at the profiler raw output, I noticed that there‚Äôs a very hight count of <code>l1text__data_bank_conflicts_pipe_lsu_mem_shared.sum</code> and <code>smsp__sass_l1text_data_bank_conflicts_pipe_lsu_mem_shared_op_st.sum</code> , the former indicates the memory read instructions have a very high ‚Äúbank conflict‚Äù, the latter indicates that memory writes instructions have a very high ‚Äúbank conflict‚Äù.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://seanzhang.me/posts/hitchhiker_cuda/swizzle_bank_conflict.png" class="img-fluid figure-img"></p>
<figcaption>Profiling result indicating high bank conflicts</figcaption>
</figure>
</div>
<p>There‚Äôre <a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#shared-memory-5-x">good resources</a> explaining what bank conflicts are, here‚Äôs how I understand it. Remember when we discussed vectorization, I said that in CUDA, all global memory access are done in 32-, 64-, or 128-byte transactions? Turns out that a different access constraint is applied on shared memory access.</p>
<p>In CUDA, every shared memory access is done via a memory ‚Äúbank‚Äù (think of it as an access point with 32-bit bandwidth per cycle). There‚Äôre 32 banks in shared memory for all SMs. The bank that a certain memory access goes through is determined by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BBank%20ID%7D%20=%20%5Clfloor(%5Ctext%7BAddr%7D%20%5C%25%20128)%20/%204%5Crfloor%0A"></p>
<p>where we assume the memory is byte-addressable. The 32 banks correspond to 32 threads in a warp, so the best pattern for arrange shared memory access is one where each thread access a different 4-byte (32 bits) in a 128-byte aligned consecutive 128-byte chunk of shared memory.</p>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="bank_illustration.png" class="lightbox" data-gallery="quarto-lightbox-gallery-26" title="Diagram illustrating bank conflict, source"><img src="https://seanzhang.me/posts/hitchhiker_cuda/bank_illustration.png" class="img-fluid figure-img" alt="Diagram illustrating bank conflict, source"></a></p>
<figcaption>Diagram illustrating bank conflict, <a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#shared-memory-5-x">source</a></figcaption>
</figure>
</div>
</div></div><p>Looking at the way the kernel writes to shared memory, there‚Äôs clearly bank conflicts, as shown below</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://seanzhang.me/posts/hitchhiker_cuda/swizzle_illustration.png" class="img-fluid figure-img"></p>
<figcaption>Diagram illustrating bank conflict during shared memory write. Note that there‚Äôs no bank conflict from reading global memory because all read from a warp is coalesced into memory transactions, so the first read from global memory would actually read more data than requested (since each thread requests a non-continuous chunk of data, which will turn into a memory transaction larger than 4 byte), but this is fine because they will reside in L2/L1 cache and will speed up subsequent reads.</figcaption>
</figure>
</div>
<p>From the perspective of memory banks, it‚Äôs called a 4-way bank conflict since each bank has 4 threads accessing it.</p>
<p>Also note that the bank conflict happens not only during write to shared memory, but also during read from shared memory.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://seanzhang.me/posts/hitchhiker_cuda/4_way_conflict.png" class="img-fluid figure-img"></p>
<figcaption>Diagram illustrating 4-way bank conflict</figcaption>
</figure>
</div>
<p>To solve this, we can use something called <strong>swizzle</strong>, which is a way to rearrange bank access such that all banks are utilized in all iterations.</p>
<p>The following diagram illustrates the idea.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://seanzhang.me/posts/hitchhiker_cuda/swizzle_idea.png" class="img-fluid figure-img"></p>
<figcaption>Diagram illustrating swizzle operation‚Äôs outcome</figcaption>
</figure>
</div>
<p>To actually implement swizzle is as follows:</p>
<ol type="1">
<li><p>For <img src="https://latex.codecogs.com/png.latex?N">-way bank conflict, if we conceptualize a particular memory operation to be 2 mappings</p>
<ol type="1">
<li><p>One map from memory address to Bank ID and is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BBank%20ID%7D(%5Ctext%7BAddr%7D_t)%20=%20f(%5Ctext%7BAddr%7D_t)%20=%20%5Clfloor(%5Ctext%7BAddr%7D_t%20%5C%25%20128)%20/%204%5Crfloor%0A"></p>
<p>where the subscript indicates the memory address is requested from thread <img src="https://latex.codecogs.com/png.latex?t"></p></li>
<li><p>One map from Bank ID and thread ID to bank row (n-th thread to access a particular bank), and is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BBank%20Row%7D(t,%20%5Ctext%7BAddr%7D_t)%20=%20%5Csum_%7Bi=0%7D%5E%7Bt-1%7D1%5Ccdot%20(%5Ctext%7BBank%20ID%7D(%5Ctext%7BAddr%7D_i)%20=%20%5Ctext%7BBank%20ID%7D(%5Ctext%7BAddr%7D_t))%0A"></p></li>
</ol></li>
<li><p>We can then use the <strong>XOR</strong> operator to create a new mapping from <img src="https://latex.codecogs.com/png.latex?(%5Ctext%7BBank%20ID,%20Bank%20Row%7D)%20%5Crightarrow%20%5Ctext%7BSwizzled%20Bank%20ID%7D">. We can do this because the group of <img src="https://latex.codecogs.com/png.latex?(%7B0,%20...,2%5E%7Bn%7D%7D,%20%5Ctext%7BXOR%7D)"> is a <a href="https://en.wikipedia.org/wiki/Group_theory">closed group</a> and the mapping is bijective.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BSwizzled%20ID%7D%20=%20%5Ctext%7BBank%20Row%7D%20%5Coplus%20%5Ctext%7BBank%20ID%7D%0A"></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://seanzhang.me/posts/hitchhiker_cuda/swizzle_close.png" class="img-fluid figure-img"></p>
<figcaption>Diagram illustrating desired swizzle operation, notice how each initial bank id gets mapped to a possibly different swizzled bank id without conflict, and that any bank id is only accessed once in each row. Also note that this swizzle operation can be applied where bank row and bank id are not necessarily the same set of numbers.</figcaption>
</figure>
</div></li>
<li><p>After obtaining the new bank id, convert it back to memory address with</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BSwizzled%20Addr%7D%20=%20f%5E%7B-1%7D(%5Ctext%7BSwizzled%20Bank%20ID%7D)%0A"></p>
<p>Note that to calculate <img src="https://latex.codecogs.com/png.latex?f%5E%7B-1%7D">, we often need more parameters than just the new bank id because <img src="https://latex.codecogs.com/png.latex?f"> is not bijective.</p></li>
<li><p>After obtaining the memory address, the write to and read from shared memory should share the same swizzle pattern to ensure correctness.</p></li>
</ol>
<p>After applying swizzle to the share memory read operation (due to time constraint, I didn‚Äôt apply to memory store), and rerun the profiling</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://seanzhang.me/posts/hitchhiker_cuda/swizzle_result.png" class="img-fluid figure-img"></p>
<figcaption>Share memory conflict significantly reduced, it didn‚Äôt reduce to 0 because of reason that will become clear in the subsequent section</figcaption>
</figure>
</div>
<p>However, the performance is completely disastrous</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://seanzhang.me/posts/hitchhiker_cuda/swizzle_perf.png" class="img-fluid figure-img"></p>
<figcaption>Performance of prefetching + swizzle goes back to round 1</figcaption>
</figure>
</div>
<p>The reason that this happens, despite little bank conflicts, is due to the fact that the swizzling algorithm only works <strong>if all the threads being considered come from the same warp</strong>, so in an implementation where we don‚Äôt distinguish warps (we are just doing 2-D thread tiling within a block), the result from swizzling is neural at best, at worst it causes significant non-coalesced memory access. The result shown above indicates the latter is at play.</p>
<p>Now we have a proper motivation for warp tiling.</p>
<ul>
<li><p>code for swizzle, relevant parts are highlighted</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb11-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma once</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda_runtime.h&gt;</span></span>
<span id="cb11-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cublas_v2.h&gt;</span></span>
<span id="cb11-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span></span>
<span id="cb11-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdlib.h&gt;</span></span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#ifndef FETCH_FLOAT4</span></span>
<span id="cb11-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define FETCH_FLOAT4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pointer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reinterpret_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>float4<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(&amp;(</span>pointer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb11-10"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb11-11"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#ifndef DIV_UP</span></span>
<span id="cb11-12"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define DIV_UP</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>m<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>n<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-13"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb11-14"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define GROUP_SIZE </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb11-15"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define WARP_SIZE </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb11-16"></span>
<span id="cb11-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> kernel9 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb11-20">__device__ __forceinline__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> gmem_to_smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-21"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-22"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A: global -&gt; reg buffer</span></span>
<span id="cb11-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-24">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-25">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb11-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// int bank_id = a_smem_y;</span></span>
<span id="cb11-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// int bank_row = tid * BK / 128;</span></span>
<span id="cb11-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// int swizzled_a_smem_y = a_smem_y + bank_row * WARP_SIZE * 4 / BK;</span></span>
<span id="cb11-29"></span>
<span id="cb11-30">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-31">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-32">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-33">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-34">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-35"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// B: global -&gt; reg buffer</span></span>
<span id="cb11-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-38">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb11-39">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>b_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>b_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb11-40">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-41"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-42"></span>
<span id="cb11-43">__device__ __forceinline__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> gmem_to_reg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-44"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-45"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A: global -&gt; reg buffer</span></span>
<span id="cb11-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-47">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-48">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb11-49">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-50"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// B: global -&gt; reg buffer</span></span>
<span id="cb11-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-52">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-53">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb11-54">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-55"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-56"></span>
<span id="cb11-57"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb11-58">__device__ __forceinline__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reg_to_smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-59"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-60"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// A: reg buffer -&gt; smem</span></span>
<span id="cb11-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-62">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// note that this is uncoalesce memory write, and only 4 floats * 4 byte/float = 16 bytes per write</span></span>
<span id="cb11-63">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-64">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-65">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-66">        smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-67">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-68"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// B: reg buffer -&gt; smem</span></span>
<span id="cb11-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-70">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-71">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>b_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>b_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb11-72">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-73"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-74"></span>
<span id="cb11-75"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb11-76">__device__ __forceinline__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> smem_to_frag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> frag_phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> smem_phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> bk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-77"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-78"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll </span></span>
<span id="cb11-79">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-80">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-81">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-82">        tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> WARP_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> WARP_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-83">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>frag_phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>smem_phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>bk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb11-84">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-85"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb11-86">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-87">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-88">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-89">        tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> WARP_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> WARP_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-90">        FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>frag_phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>smem_phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>bk<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb11-91">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-92"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-93"></span>
<span id="cb11-94"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// namespace kernel 9</span></span>
<span id="cb11-95"></span>
<span id="cb11-96"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This function assumes B is already transposed</span></span>
<span id="cb11-97"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-98">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-99">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-100">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-101">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-102">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> THREAD_NUMS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb11-103">__global__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> __launch_bounds__<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>THREAD_NUMS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> mysgemm_v9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-104"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-105">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-106">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-107">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> threads_per_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-108">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_ele_per_thread_smem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> threads_per_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-109">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_ele_per_thread_smem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> threads_per_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-110">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_rounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a_ele_per_thread_smem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-111">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_rounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b_ele_per_thread_smem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-112">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_threads_per_row_per_round <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-113">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threads_per_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> a_threads_per_row_per_round <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-114">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">constexpr</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_threads_per_row_per_round <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-115">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threads_per_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> b_threads_per_row_per_round <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-116">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> tid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-117">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// int lane_id = tid % 32;</span></span>
<span id="cb11-118">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>tid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> a_threads_per_row_per_round<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-119">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> a_threads_per_row_per_round<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-120">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>tid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> b_threads_per_row_per_round<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-121">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> b_threads_per_row_per_round<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-122"></span>
<span id="cb11-123">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> threads_per_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-124">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> threads_per_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-125">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a_ele_per_thread_smem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-126">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>b_ele_per_thread_smem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-127">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-128">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-129">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threads_per_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> a_threads_per_row_per_round <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// at least cover a row per round</span></span>
<span id="cb11-130">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threads_per_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> b_threads_per_row_per_round <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// at least cover a row per round</span></span>
<span id="cb11-131">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// at least 4 elements per thread and TN is a multiple of 4</span></span>
<span id="cb11-132"></span>
<span id="cb11-133">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb11-134"></span>
<span id="cb11-135">    __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// a transposed version of A block</span></span>
<span id="cb11-136">    __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-137"></span>
<span id="cb11-138">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// register for loading from global mem to smem</span></span>
<span id="cb11-139">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-140">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-141"></span>
<span id="cb11-142">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// fragment/register for computation</span></span>
<span id="cb11-143">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-144">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-145"></span>
<span id="cb11-146">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// move A to thread start</span></span>
<span id="cb11-147">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> a_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-148">    B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>b_smem_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-149"></span>
<span id="cb11-150">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 1.1 fetch from global to smem, use register as buffer</span></span>
<span id="cb11-151">    kernel9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gmem_to_smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-152">    __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// need the sync such that the following fragment can be obtained</span></span>
<span id="cb11-153"></span>
<span id="cb11-154">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 1.2 load 0 round of smem-&gt;frag</span></span>
<span id="cb11-155">    kernel9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>smem_to_frag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// load first batch of frag from first block of smem</span></span>
<span id="cb11-156">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> smem_write_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// next index of smems to write to</span></span>
<span id="cb11-157">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> smem_read_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// read is current write</span></span>
<span id="cb11-158"></span>
<span id="cb11-159">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 2. start the blockwise loop</span></span>
<span id="cb11-160">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-161">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-162">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 2.0 fetch from global to smem, use register as buffer</span></span>
<span id="cb11-163">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-164">            A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// every iteration, A moves BK to the right</span></span>
<span id="cb11-165">            B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// every iteration, B moves BK * N down</span></span>
<span id="cb11-166">            kernel9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gmem_to_reg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// only load to reg, this is non-blocking</span></span>
<span id="cb11-167">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-168">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 2.1 use the frag already loaded to compute the outer product, note that we do register prefetching here</span></span>
<span id="cb11-169"></span>
<span id="cb11-170">        smem_read_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smem_write_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-171"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb11-172">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> b_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>b_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// load one sub row at a time from smem to frag</span></span>
<span id="cb11-173">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-174">            kernel9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>smem_to_frag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_read_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-175"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb11-176">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-177">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// outer product for the previous prefetched frag</span></span>
<span id="cb11-178"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb11-179">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-180">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-181">                    accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>b_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>b_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-182">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-183">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-184">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-185">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 2.2 if there's next block, start loading from reg to smem</span></span>
<span id="cb11-186">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-187">            kernel9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>reg_to_smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldreg_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldreg_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> a_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_smem_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_smem_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> b_smem_x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_write_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-188">            __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb11-189">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// prefetch a round of fragments from the current write, this will be blocking</span></span>
<span id="cb11-190">            kernel9<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>smem_to_frag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_write_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-191">            smem_write_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// update next write</span></span>
<span id="cb11-192">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-193"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb11-194">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> </span>
<span id="cb11-195">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// one last round of outer product because we have only done BK - 1 products</span></span>
<span id="cb11-196"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb11-197">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb11-198">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-199">                accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-200">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-201">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-202">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-203"></span>
<span id="cb11-204">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// 3. put the accumulate value down to C</span></span>
<span id="cb11-205">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// move C to thread tile start</span></span>
<span id="cb11-206">    C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> bx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb11-207"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb11-208">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-209"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma unroll</span></span>
<span id="cb11-210">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-211">            float4 tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb11-212">            tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-213">            tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-214">            tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-215">            tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> accum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">][</span>j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-216">            FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-217">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-218">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-219"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></li>
</ul>
</section>
<section id="warp-tiling" class="level2">
<h2 class="anchored" data-anchor-id="warp-tiling">Warp Tiling</h2>
<p>Warp tiling, as the name suggests, is basically tiling at the warp level. Here‚Äôs the visual for the algorithm:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://seanzhang.me/posts/hitchhiker_cuda/warp_tiling.png" class="img-fluid figure-img"></p>
<figcaption>Diagram for warp tiling</figcaption>
</figure>
</div>
<p>The idea is that instead of treating threads in a block as equivalent, we distinguish them by which warp they come from. Therefore each warp now handles a larger tile (warp tile). To give flexibility to the selection of warp tile sizes, while allowing for the selection of thread tile sizes, we have to allow each thread to process more than one thread tile. Therefore each warp tile is further divided into multiple ‚Äúsubtile‚Äù, where each subtile consists of <img src="https://latex.codecogs.com/png.latex?32%20%5Ctimes%20%5Ctext%7BTM%7D%5Ctimes%5Ctext%7BTN%7D"> elements, meaning for each subtile to be calculated, all 32 threads needs to calculate only once. But to fill a whole warp tile, all 32 threads need to move from one subtile to another, causing the zig-zag movement seen above.</p>
<p>There‚Äôre many benefit to this approach:</p>
<ol type="1">
<li>Having the concept of warp tiling allows us to do effective swizzle.</li>
<li>A strided memory access pattern (from a thread‚Äôs perspective) allows for coalesced memory access.</li>
<li>Most importantly, because we are doing more work per thread (9 thread-tiles per thread, in the example), we are again increasing the arithmetic intensity!
<ol type="1">
<li>From shared memory‚Äôs perspective, processing each <img src="https://latex.codecogs.com/png.latex?TM%5Ctimes%20TN"> elements still requires <img src="https://latex.codecogs.com/png.latex?2K"> reads from shared memory</li>
<li>But from device memory‚Äôs perspective, processing each <img src="https://latex.codecogs.com/png.latex?%5C#%5Ctext%7Bsubtiles%7D%5Ctimes%20TM%20%5Ctimes%20TN"> elements only requires <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bsm%7D%5Ctimes%20TM%20%5Ctimes%20K%20+%20%5Ctext%7Bsn%7D%5Ctimes%20TN%20%5Ctimes%20K"> reads from global memory, meaning the arithmetic intensity is now</li>
</ol>
<img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Ctext%7Bsm%7D%5Ccdot%5Ctext%7Bsn%7D%5Ccdot%5Ctext%7BTM%7D%5Ccdot%5Ctext%7BTN%7D%7D%7BK%5Ccdot(%5Ctext%7Bsm%7D%5Ccdot%20%5Ctext%7BTM%7D%20+%20%5Ctext%7Bsn%7D%5Ccdot%5Ctext%7BTN%7D)%7D%0A"></li>
</ol>
<p>I‚Äôll leave the calculation for the arithmetic intensity improvement to the reader.</p>
<p>After implementing the warp tiling algorithm, this is the result:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://seanzhang.me/posts/hitchhiker_cuda/warp_tiling_perf.png" class="img-fluid figure-img"></p>
<figcaption>Performance of warp tiling</figcaption>
</figure>
</div>
<p>Note that there‚Äôre a few design decisions I made after experiments:</p>
<ul>
<li><p>I intentionally didn‚Äôt implement buffering/prefetching/pipelining, because doing so increases the required shared memory per block, the reduction of occupancy caused a bigger issue than the benefit of prefetching.</p></li>
<li><p>Due to time constraint, I didn‚Äôt implement swizzling on this kernel, but because of the strided access pattern, I‚Äôm only suffering from 2-way bank conflict, which was acceptable for me.</p></li>
<li><p>The code</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb12-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma once</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;algorithm&gt;</span></span>
<span id="cb12-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cassert&gt;</span></span>
<span id="cb12-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstdio&gt;</span></span>
<span id="cb12-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstdlib&gt;</span></span>
<span id="cb12-7"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cublas_v2.h&gt;</span></span>
<span id="cb12-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda_runtime.h&gt;</span></span>
<span id="cb12-9"></span>
<span id="cb12-10"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#ifndef FETCH_FLOAT4</span></span>
<span id="cb12-11"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define FETCH_FLOAT4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pointer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reinterpret_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>float4<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(&amp;(</span>pointer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb12-12"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb12-13"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#ifndef FETCH_FLOAT4_CONST</span></span>
<span id="cb12-14"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define FETCH_FLOAT4_CONST</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pointer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reinterpret_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>float4<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(&amp;(</span>pointer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb12-15"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb12-16"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define GROUP_SIZE </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb12-17"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define WARP_SIZE </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb12-18"></span>
<span id="cb12-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> kernel10 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> lda_m_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ldb_k_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb12-21">    __device__ __forceinline__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> gmem_to_smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-22">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll // A: global -&gt; reg buffer</span></span>
<span id="cb12-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lda_m_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> lda_m_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-25">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-26">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> float4 tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4_CONST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb12-27">            smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-28">            smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-29">            smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-30">            smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-31">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll // B: global -&gt; reg buffer</span></span>
<span id="cb12-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ldb_k_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> ldb_k_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-34">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-35">            FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4_CONST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb12-36">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-37">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-38"></span>
<span id="cb12-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-40">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-41">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-42">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-43">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-44">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-45">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-46">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WM_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-47">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WN_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-48">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-49">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_subtiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb12-50">    __device__ __forceinline__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> warp_matmul<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb12-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span id="cb12-53">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb12-54">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-55">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb12-56">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-57">                    frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WM_SUBTILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb12-58">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-59">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-60">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb12-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_subtiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-62">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb12-63">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-64">                    frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WN_SUBTILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb12-65">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-66">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-67">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb12-68">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-69">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb12-70">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_subtiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-71">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb12-72">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-73">                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb12-74">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-75">                            acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_subtiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb12-76">                        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-77">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-78">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-79">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-80">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-81">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-82"></span>
<span id="cb12-83"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// namespace kernel 10</span></span>
<span id="cb12-84"></span>
<span id="cb12-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// WARP tiling without double cache, performing C = alpha * A * B + beta * C</span></span>
<span id="cb12-86"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-87">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-88">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-89">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-90">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-91">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-92">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-93">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WM_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-94">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WN_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-95">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> NUM_THREADS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-96">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> lda_m_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-97">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ldb_k_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-98">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-99">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_subtiles</span>
<span id="cb12-100">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb12-101">__global__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> __launch_bounds__<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>NUM_THREADS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> mysgemm_v10<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb12-102"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-103">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// every thread loads 4 floats at a time in stride-fashion</span></span>
<span id="cb12-104">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> warp_m_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> WARP_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> WN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-105">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> warp_n_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> WARP_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> WN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-106">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_idx_a</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-107">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> k_idx_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-108">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> k_idx_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-109">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> n_idx_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-110">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> subtile_idx_m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> WARP_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>WN_SUBTILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-111">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> subtile_idx_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> WARP_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>WN_SUBTILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-112"></span>
<span id="cb12-113">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lda_m_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lda_m_stride must be positive to ensure uniform strides"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-114">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldb_k_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ldb_k_stride must be positive to ensure uniform strides"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-115"></span>
<span id="cb12-116">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// declare shared memory</span></span>
<span id="cb12-117">    __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// transposed</span></span>
<span id="cb12-118">    __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb12-119"></span>
<span id="cb12-120">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_idx_a</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k_idx_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-121">    B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k_idx_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_idx_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-122">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// move C to the warp start</span></span>
<span id="cb12-123">    C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> warp_m_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> subtile_idx_m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> warp_n_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> subtile_idx_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-124"></span>
<span id="cb12-125">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// move A and B to thread start for loading, this has nothing to do with warps</span></span>
<span id="cb12-126"></span>
<span id="cb12-127">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// declare accumulators</span></span>
<span id="cb12-128">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_subtiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-129"></span>
<span id="cb12-130">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// declare fragments</span></span>
<span id="cb12-131">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-132">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>n_subtiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb12-133"></span>
<span id="cb12-134"></span>
<span id="cb12-135">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb12-136">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-137">        kernel10<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gmem_to_smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> lda_m_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldb_k_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k_idx_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_idx_a</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k_idx_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_idx_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-138">        __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-139">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compute the warp level matmul</span></span>
<span id="cb12-140">        kernel10<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>warp_matmul<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WM_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WN_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_subtiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>smem_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> warp_m_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> subtile_idx_m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> warp_n_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> subtile_idx_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb12-141">        A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-142">        B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-143">        __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb12-144">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-145"></span>
<span id="cb12-146">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// reduce</span></span>
<span id="cb12-147"></span>
<span id="cb12-148">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-149">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_subtiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-150">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// move C to the subtile start</span></span>
<span id="cb12-151">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>C_subtile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WM_SUBTILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WN_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-152">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb12-153">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-154">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb12-155">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-156">                    float4 tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb12-157">                        C_subtile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb12-158">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> acc_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_subtiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-159">                    tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>acc_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-160">                    tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>acc_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-161">                    tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>acc_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-162">                    tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>acc_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-163">                    FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>C_subtile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-164">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-165">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-166">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-167">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-168"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></li>
</ul>
</section>
<section id="split-k" class="level2">
<h2 class="anchored" data-anchor-id="split-k">Split-K</h2>
<p>Comparing the kernel I wrote with CuBLAS, I noticed how the grid dim of CuBLAS has a third dimension (the (256, 2, 3) number). This suggest that the CuBLAS implementation is also splitting the matmul problem along the K dimension.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://seanzhang.me/posts/hitchhiker_cuda/split_k_profile.png" class="img-fluid figure-img"></p>
<figcaption>Profiling result from nsight compute, Kernel 2 is CuBLAS, mysgemm_v10 is the warp tiling kernel</figcaption>
</figure>
</div>
<p>The idea with split-K is as follows:</p>
<ul>
<li>As opposed to having each block, each warp, each thread iterating throughout the dimension K, we split the K dimension among blocks, so each block only computes a partial result.</li>
<li>After computing a partial result, we kick off another reduction kernel that merges all the partial result together.</li>
<li>The hope is that by increasing the number of blocks, we further increase occupancy and this benefit is hopefully larger than the additional overhead that the reduction kernel brings.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://seanzhang.me/posts/hitchhiker_cuda/split_k.png" class="img-fluid figure-img"></p>
<figcaption>Diagram illustrating split-K</figcaption>
</figure>
</div>
<p>After implementing the split-K algorithm, here‚Äôs the performance I got:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://seanzhang.me/posts/hitchhiker_cuda/split_k_perf.png" class="img-fluid figure-img"></p>
<figcaption>Performance of Split-K</figcaption>
</figure>
</div>
<p>Huh? It got worse than plain warp-tiling. After some tinkering (changing dimensions, etc.), I think the reason for the worse performance is possibly:</p>
<ol type="1">
<li>I haven‚Äôt run a complete sweep of hyper-parameters of this kernel, which is what CuBLAS surely did.</li>
<li>I‚Äôm using the kernel launch as an inter-block synchronization primitive (basically, calling the reduction kernel after the computation kernel in the same stream), but ideally, reduction can also happen in a block-by-block fashion, where as long as a set of blocks that cover the entire K dimension has finished calculation, a reduction kernel can be kicked off along that dimension. I‚Äôm not sure how to achieve this though, because afaik CUDA doesn‚Äôt have any other inter-block synchronization primitive than kernel launching.</li>
<li>I‚Äôm not using fancy things like <a href="https://arxiv.org/abs/2301.03598">stream-k</a>.</li>
<li>I‚Äôm too exhausted to do a proper swizzle on this kernel.</li>
</ol>
<p>But anyway, I‚Äôm happy that the split-K get implemented and is functionally correct. Here‚Äôs the code.</p>
<ul>
<li><p>Code for Split-k</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb13-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#pragma once</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;algorithm&gt;</span></span>
<span id="cb13-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cassert&gt;</span></span>
<span id="cb13-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstdio&gt;</span></span>
<span id="cb13-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cstdlib&gt;</span></span>
<span id="cb13-7"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cublas_v2.h&gt;</span></span>
<span id="cb13-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda_runtime.h&gt;</span></span>
<span id="cb13-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cooperative_groups.h&gt;</span></span>
<span id="cb13-10"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cooperative_groups/memcpy_async.h&gt;</span></span>
<span id="cb13-11"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cooperative_groups/reduce.h&gt;</span></span>
<span id="cb13-12"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda/barrier&gt;</span></span>
<span id="cb13-13"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda/pipeline&gt;</span></span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> cg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cooperative_groups<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-16"></span>
<span id="cb13-17"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#ifndef FETCH_FLOAT4</span></span>
<span id="cb13-18"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define FETCH_FLOAT4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pointer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reinterpret_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>float4<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(&amp;(</span>pointer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb13-19"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb13-20"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#ifndef FETCH_FLOAT4_CONST</span></span>
<span id="cb13-21"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define FETCH_FLOAT4_CONST</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>pointer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">reinterpret_cast</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>float4<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*&gt;(&amp;(</span>pointer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span></span>
<span id="cb13-22"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb13-23"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#ifndef DIV_UP</span></span>
<span id="cb13-24"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define DIV_UP</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(((</span>m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb13-25"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#endif</span></span>
<span id="cb13-26"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define GROUP_SIZE </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb13-27"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define WARP_SIZE </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb13-28"></span>
<span id="cb13-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">namespace</span> kernel11 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> lda_m_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ldb_k_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb13-31">    __device__ __forceinline__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> gmem_to_smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-32">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll // A: global -&gt; reg buffer</span></span>
<span id="cb13-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> lda_m_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> lda_m_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-35">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-36">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> float4 tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4_CONST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb13-37">            smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-38">            smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-39">            smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-40">            smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-41">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll // B: global -&gt; reg buffer</span></span>
<span id="cb13-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> ldb_k_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> ldb_k_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-44">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-45">            FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">])</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4_CONST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb13-46">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-47">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-48"></span>
<span id="cb13-49">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-50">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-51">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-52">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-53">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-54">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-55">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-56">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WM_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-57">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WN_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-58">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-59">              <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_subtiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb13-60">    __device__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> warp_matmul<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> warp_m_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> subtile_idx_m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> warp_n_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> subtile_idx_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-61">        smem_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> warp_m_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> subtile_idx_m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-62">        smem_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> warp_n_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> subtile_idx_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb13-64">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span id="cb13-65">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb13-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-67">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb13-68">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// for (uint m = 0; m &lt; TM; m+=4) {</span></span>
<span id="cb13-69">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//     FETCH_FLOAT4(frag_a[i * TM + m]) = FETCH_FLOAT4_CONST(smem_a[k * BM + i * WM_SUBTILE + m]);</span></span>
<span id="cb13-70">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// }</span></span>
<span id="cb13-71">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb13-72">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-73">                    frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WM_SUBTILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb13-74">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-75">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-76">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb13-77">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_subtiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-78">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb13-79">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// for (uint n = 0; n &lt; TN; n+=4) {</span></span>
<span id="cb13-80">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//     FETCH_FLOAT4(frag_b[i * TN + n]) = FETCH_FLOAT4_CONST(smem_b[k * BN + i * WN_SUBTILE + n]);</span></span>
<span id="cb13-81">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// }</span></span>
<span id="cb13-82">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb13-83">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-84">                    frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WN_SUBTILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb13-85">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-86">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-87">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb13-88">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-89">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb13-90">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_subtiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-91">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb13-92">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-93">                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb13-94">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-95">                            acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_subtiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb13-96">                        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-97">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-98">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-99">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-100">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-101">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-102"></span>
<span id="cb13-103"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// namespace kernel 11</span></span>
<span id="cb13-104"></span>
<span id="cb13-105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// WARP tiling without double cache, performing C = alpha * A * B + beta * C</span></span>
<span id="cb13-106"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-107">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-108">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-109">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-110">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-111">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-112">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-113">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-114">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WM_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-115">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> WN_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-116">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> NUM_THREADS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-117">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> lda_m_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-118">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> ldb_k_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-119">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-120">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n_subtiles</span>
<span id="cb13-121">          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb13-122">__global__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> __launch_bounds__<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>NUM_THREADS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> mysgemm_v11<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> beta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb13-123"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-124">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The strided split K can be visualized as follows:</span></span>
<span id="cb13-125">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</span></span>
<span id="cb13-126">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ</span></span>
<span id="cb13-127">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ‚îÇ split0 ‚îÇ split1 ‚îÇ split0 ‚îÇ split1 ‚îÇ split0 ‚îÇ split1 ‚îÇ split0 ‚îÇ</span></span>
<span id="cb13-128">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ</span></span>
<span id="cb13-129">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ‚îÇ block0 ‚îÇ block1 ‚îÇ block2 ‚îÇ block3 ‚îÇ block4 ‚îÇ block5 ‚îÇ block6 ‚îÇ</span></span>
<span id="cb13-130">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ</span></span>
<span id="cb13-131">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò</span></span>
<span id="cb13-132">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The reason for strided splits is that different splits handle BKs in a strided fashion to improve L2 cache hit rate.</span></span>
<span id="cb13-133">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Note that there might be remainder blocks left causing imbalanced processing across CTAs, this can be handled via stream-K (https://arxiv.org/pdf/2301.03598), but here we'll just ignore (the imbalance) and process it anyway.</span></span>
<span id="cb13-134">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// To assist reduction, it's better to store the output from different splits together:</span></span>
<span id="cb13-135">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                     </span></span>
<span id="cb13-136">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//  ‚îÇ    unit0 - split0   ‚îÇ                     </span></span>
<span id="cb13-137">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§                     </span></span>
<span id="cb13-138">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//  ‚îÇ    unit0 - split1   ‚îÇ                     </span></span>
<span id="cb13-139">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§                     </span></span>
<span id="cb13-140">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//  ‚îÇ    unit1 - split0   ‚îÇ                     </span></span>
<span id="cb13-141">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§                     </span></span>
<span id="cb13-142">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//  ‚îÇ    unit1 - split0   ‚îÇ                     </span></span>
<span id="cb13-143">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                     </span></span>
<span id="cb13-144"></span>
<span id="cb13-145"></span>
<span id="cb13-146">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> iters_per_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DIV_UP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of BKs a split handles (at least)</span></span>
<span id="cb13-147">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> last_iter_splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DIV_UP<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-148"></span>
<span id="cb13-149">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// every thread loads 4 floats at a time in stride-fashion</span></span>
<span id="cb13-150">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> warp_m_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> WARP_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> WN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-151">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> warp_n_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> WARP_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> WN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-152">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_idx_a</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-153">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> k_idx_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-154">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> k_idx_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-155">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> n_idx_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-156">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> subtile_idx_m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> WARP_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>WN_SUBTILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-157">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> subtile_idx_n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> WARP_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>WN_SUBTILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-158"></span>
<span id="cb13-159"></span>
<span id="cb13-160">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>lda_m_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lda_m_stride must be positive to ensure uniform strides"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-161">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">static_assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>ldb_k_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ldb_k_stride must be positive to ensure uniform strides"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-162"></span>
<span id="cb13-163">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// declare shared memory</span></span>
<span id="cb13-164">    __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// transposed</span></span>
<span id="cb13-165">    __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb13-166"></span>
<span id="cb13-167">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// move A and B to thread start for loading, this has nothing to do with warps</span></span>
<span id="cb13-168">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_idx_a</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> K <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k_idx_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-169">    B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k_idx_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_idx_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-170">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// move tC to the warp start, tC is the temporary gmem to store splits results</span></span>
<span id="cb13-171">    tC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> warp_m_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> subtile_idx_m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> warp_n_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> subtile_idx_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-172">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// move C to the warp start as well</span></span>
<span id="cb13-173">    C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> warp_m_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> subtile_idx_m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> warp_n_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> subtile_idx_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-174"></span>
<span id="cb13-175">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// declare accumulators</span></span>
<span id="cb13-176">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_subtiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-177"></span>
<span id="cb13-178">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// declare fragments</span></span>
<span id="cb13-179">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-180">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>n_subtiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-181"></span>
<span id="cb13-182"></span>
<span id="cb13-183">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb13-184">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> it <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> iters_per_split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>it<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-185">        kernel11<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gmem_to_smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> lda_m_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldb_k_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k_idx_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_idx_a</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k_idx_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_idx_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-186">        __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-187">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compute the warp level matmul</span></span>
<span id="cb13-188">        kernel11<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>warp_matmul<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WM_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WN_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_subtiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> warp_m_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> subtile_idx_m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> warp_n_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> subtile_idx_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-189">        A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-190">        B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> BK <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-191">        __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-192">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-193"></span>
<span id="cb13-194">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>last_iter_splits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> last_iter_splits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// process last iteration</span></span>
<span id="cb13-195">        kernel11<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>gmem_to_smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> lda_m_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> ldb_k_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> K<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k_idx_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_idx_a</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k_idx_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> BN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_idx_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-196">        __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-197">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// compute the warp level matmul</span></span>
<span id="cb13-198">        kernel11<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>warp_matmul<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>BM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> BK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WM_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> WN_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n_subtiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>smem_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> smem_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> frag_a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> frag_b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> warp_m_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> subtile_idx_m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> warp_n_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> subtile_idx_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-199">        __syncthreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-200">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-201"></span>
<span id="cb13-202">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// epilogue: reduce to (temporary) gmem</span></span>
<span id="cb13-203">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m_subtiles</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-204">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n_subtiles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-205">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// move C to the subtile start</span></span>
<span id="cb13-206">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>C_subtile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WM_SUBTILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WN_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-207">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tC_subtile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WM_SUBTILE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> WN_SUBTILE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-208">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb13-209">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-210">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// #pragma unroll</span></span>
<span id="cb13-211">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> TN<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-212">                    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> acc_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n_subtiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> TN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-213">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// only the first block in that split should accumulate from original C matrix</span></span>
<span id="cb13-214">                        float4 tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FETCH_FLOAT4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>C_subtile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb13-215">                        tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>acc_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-216">                        tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>acc_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-217">                        tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>acc_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-218">                        tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>acc_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-219"></span>
<span id="cb13-220">                        tC_subtile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-221">                        tC_subtile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-222">                        tC_subtile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-223">                        tC_subtile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-224">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-225">                        tC_subtile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>acc_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb13-226">                        tC_subtile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>acc_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb13-227">                        tC_subtile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>acc_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb13-228">                        tC_subtile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> acc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>acc_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb13-229">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-230">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-231">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-232">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-233">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-234"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-235"></span>
<span id="cb13-236"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-237">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> smem_elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-238">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> stages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-239">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> reduction_iters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb13-240">__global__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> reduce_k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__restrict__</span> tC<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">__restrict__</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> block_iters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-241">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">auto</span> grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>this_grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-242">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">auto</span> block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>this_thread_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// data is loaded using block as a group</span></span>
<span id="cb13-243">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">auto</span> tile <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tiled_partition<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(</span>block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// data is reduced using tile as a group</span></span>
<span id="cb13-244"></span>
<span id="cb13-245">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">extern</span> __shared__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[];</span></span>
<span id="cb13-246">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> smem_stage_offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>stages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb13-247">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>reduction_iters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">};</span></span>
<span id="cb13-248">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> stages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> smem_stage_offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> smem_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-249"></span>
<span id="cb13-250">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> gmem_init_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> smem_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-251">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> gmem_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gridDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> smem_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-252">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> smem_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>meta_group_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-253"></span>
<span id="cb13-254">    __shared__ cuda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>pipeline_shared_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span></span>
<span id="cb13-255">        cuda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>thread_scope<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>thread_scope_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-256">        stages</span>
<span id="cb13-257">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> shared_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-258">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">auto</span> pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cuda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>make_pipeline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>shared_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-259"></span>
<span id="cb13-260">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> reduce_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> fetch_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> reduce_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> block_iters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>reduce_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-261">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(;</span> fetch_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> block_iters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> fetch_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>reduce_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> stages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>fetch_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-262">            pipeline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>producer_acquire<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-263">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> shared_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fetch_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> stages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-264">            cuda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>memcpy_async<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-265">                               smem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> smem_stage_offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>shared_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb13-266">                               tC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gmem_init_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gmem_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> fetch_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-267">                               <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> smem_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-268">                               pipeline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb13-269">            pipeline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>producer_commit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-270">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-271">        pipeline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>consumer_wait<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-272">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> shared_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reduce_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> stages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-273">        <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> smem_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  tile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>meta_group_rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>thread_rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-274">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(;</span> smem_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> smem_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> smem_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> smem_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-275">            <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> element_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smem_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> smem_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-276">            sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>element_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smem<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>smem_stage_offsets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>shared_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> smem_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb13-277">            sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>element_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>reduce<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>tile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>element_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> cg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>plus<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;());</span></span>
<span id="cb13-278">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>tile<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>thread_rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-279">                <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uint</span> output_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> smem_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gridDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> smem_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> reduce_iter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> smem_offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> SPLIT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-280">                C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>output_offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>element_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// copy to global memory</span></span>
<span id="cb13-281">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-282">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-283">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// __syncthreads();</span></span>
<span id="cb13-284">        pipeline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>consumer_release<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb13-285">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-286"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></li>
</ul>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>There‚Äôre still non-negligible performance difference between my kernel and CuBLAS, even if we just cherry pick the best performant configuration (95.6%), let along other special dimensions (super thin matrix or super wide matrix), or structured matrices. Also, modern BLAS libraries has evolved to something more like a database look up that picks the best implementation given a particular problem size and particular hardware specs, so it‚Äôs not going to be a fruitful path trying to beat CuBLAS on this imo.</p>
<p>But hopefully I have proven to you that writing kernels are not that scary, and you should try too.</p>
<section id="credits" class="level2">
<h2 class="anchored" data-anchor-id="credits">Credits</h2>
<p><strong>A lot of credit</strong> goes to <span class="citation" data-cites="wangzyon_sgemm">(Wang 2024)</span> who has set up the benchmarking code, and <span class="citation" data-cites="boehm2022cuda_matmul">(Boehm 2022)</span> who has provided an warp tiling implementation. I added a split-K implementation and wrote my own warp tiling implementation, as well as prefetching implementation. If you just want to see the code, check this <a href="https://github.com/seanxwzhang/CUDA_GEMM">repo</a>.</p>



</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-boehm2022cuda_matmul" class="csl-entry">
Boehm, Simon. 2022. <span>‚ÄúHow to Optimize a CUDA Matmul Kernel for cuBLAS-Like Performance: A Worklog.‚Äù</span> <a href="https://siboehm.com/articles/22/CUDA-MMM">https://siboehm.com/articles/22/CUDA-MMM</a>.
</div>
<div id="ref-nvidia_lower_occupancy" class="csl-entry">
Nvidia. 2010. <span>‚ÄúBetter Performance at Lower Occupancy.‚Äù</span> <a href="https://www.nvidia.com/content/GTC-2010/pdfs/2238_GTC2010.pdf">https://www.nvidia.com/content/GTC-2010/pdfs/2238_GTC2010.pdf</a>.
</div>
<div id="ref-nvidia_vectorized_memory" class="csl-entry">
‚Äî‚Äî‚Äî. 2013. <span>‚ÄúCUDA Pro Tip: Increase Performance with Vectorized Memory Access.‚Äù</span> <a href="https://developer.nvidia.com/blog/cuda-pro-tip-increase-performance-with-vectorized-memory-access/">https://developer.nvidia.com/blog/cuda-pro-tip-increase-performance-with-vectorized-memory-access/</a>.
</div>
<div id="ref-nvidia_cuda_guide" class="csl-entry">
‚Äî‚Äî‚Äî. 2024. <span>‚ÄúCUDA c++ Programming Guide.‚Äù</span> <a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html">https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html</a>.
</div>
<div id="ref-wangzyon_sgemm" class="csl-entry">
Wang, Zyon. 2024. <span>‚ÄúNVIDIA_SGEMM_PRACTICE: Step-by-Step Optimization of CUDA SGEMM.‚Äù</span> <a href="https://github.com/wangzyon/NVIDIA_SGEMM_PRACTICE">https://github.com/wangzyon/NVIDIA_SGEMM_PRACTICE</a>.
</div>
</div></section></div> ]]></description>
  <category>CUDA</category>
  <category>programming</category>
  <category>technical</category>
  <guid>https://seanzhang.me/posts/hitchhiker_cuda/</guid>
  <pubDate>Wed, 05 Mar 2025 08:00:00 GMT</pubDate>
  <media:content url="https://seanzhang.me/posts/hitchhiker_cuda/warp_tiling_perf.png" medium="image" type="image/png" height="121" width="144"/>
</item>
<item>
  <title>SSM lacks sequence mixing</title>
  <dc:creator>Sean Zhang</dc:creator>
  <link>https://seanzhang.me/posts/ssm_lack_sequence_mixing/</link>
  <description><![CDATA[ 





<p><em>These are just my thoughts and intuition after tinkering with SSMs for the past month. Take with a grain of salt</em></p>
<!--more-->
<section id="opinion" class="level2">
<h2 class="anchored" data-anchor-id="opinion">Opinion</h2>
<p>Every architecture contains some implicit trade-offs. My impression is SSMs are a good sequential architecture for modalities where interactions within a sequence matters less than a good compression of past states. However, it might not be the best architecture if the following 2 conditions are met:</p>
<ol type="1">
<li>The marginal gain of additional compression quality outweighs the efficiency loss.</li>
<li><em>The way a task depends on past history varies a lot (the definition of ‚Äúa lot‚Äù will become clearer later).</em></li>
</ol>
<p>The 1st condition is fairly self-explanatory and is generally true for complicated deep learning tasks (chatbot, self-driving), at least for the time being, and especially true for areas that are yet to be solved.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="quality_complexity.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="An illustration of quality-efficiency trade-off"><img src="https://seanzhang.me/posts/ssm_lack_sequence_mixing/quality_complexity.png" class="img-fluid figure-img" alt="An illustration of quality-efficiency trade-off"></a></p>
<figcaption>An illustration of quality-efficiency trade-off</figcaption>
</figure>
</div>
<p>The 2nd condition is more subtle, because what does ‚Äúthe way a task depends on past history‚Äù actually mean? Before attempting to answer this question, here‚Äôs why I think it matters for SSM models.</p>
<p>But even before that, let‚Äôs do a quick recap of state space models are.</p>
</section>
<section id="ssm-models" class="level2">
<h2 class="anchored" data-anchor-id="ssm-models">SSM Models</h2>
<p>When I refer to SSM models, I‚Äôm not referring to the classical <a href="https://probml.github.io/ssm-book/root.html">state space models</a> used in a control context or a quantitative finance context, but rather SSM in the context of sequential neural networks.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="ssm_literature.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Literature roadmap of recent State Space neural network Model architectures"><img src="https://seanzhang.me/posts/ssm_lack_sequence_mixing/ssm_literature.png" class="img-fluid figure-img" alt="Literature roadmap of recent State Space neural network Model architectures"></a></p>
<figcaption>Literature roadmap of recent State Space neural network Model architectures</figcaption>
</figure>
</div>
<p>The above is literature roadmap of recent SSM architectures. The are some terrific detailed explanation on what they are:</p>
<ul>
<li><a href="https://srush.github.io/annotated-s4/">The Annotated S4</a> dives deep into S4 and explained the inner workings of S4.</li>
<li><a href="https://maartengrootendorst.substack.com/p/a-visual-guide-to-mamba-and-state#%C2%A7what-problem-does-it-attempt-to-solve">A Visual Guide to Mamba and State Space Models</a> explained, visually, what mamba does.</li>
<li><a href="https://hazyresearch.stanford.edu/blog/2023-03-27-long-learning">From Deep to Long Learning?</a> where the authors themselves gave a good account of the development of H3 and Hyena.</li>
</ul>
<p>In short, SSM is the following process that models state changes of a system</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Ccolor%7Bred%7Dh_%7Bt+1%7D%20&amp;=%20%7B%5Ccolor%7Bblue%7DA%7D%5Ccdot%20%7B%5Ccolor%7Bred%7D%7Bh_t%7D%7D%20+%20%7B%5Ccolor%7Bgreen%7D%7BB%5Ccdot%20x_t%7D%7D%5C%5C%0Ay_t%20&amp;=%20C%5Ccdot%20%7B%5Ccolor%7Bred%7D%7Bh_t%7D%7D%20+%20D%5Ccdot%20x_t%20%5C%5C%0A%5Ctext%7Bwhere%20%7D%20&amp;t%20:=%20%5Ctext%7BStep/Time%7D%5C%5C%0A&amp;h%20:=%20%5Ctext%7BHidden%20state%20of%20the%20system%7D%20%5C%5C%0A&amp;x%20:=%20%5Ctext%7BInput%20to%20the%20system%7D%5C%5C%0A&amp;y%20:=%20%5Ctext%7BOutput%20of%20the%20system%7D%20%5C%5C%0A&amp;A%20:=%20%5Ctext%7BA%20matrix%20determining%20how%20the%20state%20changes%20over%20%7Dt%20%5C%5C%0A&amp;B%20:=%20%5Ctext%7BHow%20input%20affects%20state%7D%20%5C%5C%0A&amp;C%20:=%20%5Ctext%7BHow%20state%20affects%20output%7D%20%5C%5C%0A&amp;D%20:=%20%5Ctext%7BHow%20input%20directly%20affects%20output%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p><em>(The above is only for discrete problem, similar formulation for continuous time; Also I‚Äôm neglecting the discretization step here for illustration purpose)</em></p>
<p>There‚Äôre many properties to this model, and its usefulness is immense in the field of control, signal processing, time series application, etc.</p>
<section id="history-preserving" class="level3">
<h3 class="anchored" data-anchor-id="history-preserving">History preserving</h3>
<p>Just by laying out the equations above does not guarantee a good compression of past history. The magic of SSMs comes from the theory of approximation theory, and in particular, orthogonal polynomials <span class="citation" data-cites="chihara1978">(Chihara 1978)</span>. Consider a scale value <img src="https://latex.codecogs.com/png.latex?x"> that varies with sequence <img src="https://latex.codecogs.com/png.latex?x">, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Af%20=%20f(x)%0A"></p>
<p>Suppose we want to approximate the history with a limited number of numbers <img src="https://latex.codecogs.com/png.latex?c_1,%20c_2,%20...%20c_N">, one way to achieve it is to let each <img src="https://latex.codecogs.com/png.latex?c_n"> correspond to a ‚Äúbasis function‚Äù <img src="https://latex.codecogs.com/png.latex?%5Cphi_n"> and let</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Chat%20f(x)%20=%20%5Csum_%7Bn=0%7D%5EN%20c_n%5Cphi_n(x)%0A"></p>
<p>The approximation error is therefore defined as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Ctext%7BError%7D%20&amp;=%20%7C%7Cf(x)%20-%20%5Chat%20f(x)%7C%7C%5E2_w%20=%20%5Cint_0%5E%5Cinfty(f(x)%20-%20%5Chat%20f(x))%5E2w(x)dx%5C%5C%0A%5Ctext%7Bwhere%20%7D%20w%20&amp;%20%5Ctext%7B%20defines%20a%20weighting%20function%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>The weighting function is added to further generalize the discussion. Expanding the error, one obtains</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cmathcal%7BL%7D%20&amp;=%20%5Cint_0%5E%5Cinfty(f(x)%20-%20%5Csum_%7Bn=0%7D%5ENc_n%5Cphi_n(x))%5E2w(x)dx%20%5C%5C%0A&amp;=%5Cint_0%5E%5Cinfty%5Cleft%5Bf%5E2(x)%20+%20%5Csum_%7Bi=0%7D%5ENc_i%5E2%5Cphi_i%5E2(x)%20-%202%5Csum_%7Bi%5Cneq%20j%7Dc_ic_j%5Cphi_i(x)%5Cphi_j(x)%20-%202%5Csum_%7Bi=0%7D%5ENc_i%5Cphi_i(x)f(x)%5Cright%5Dw(x)dx%0A%5Cend%7Baligned%7D%0A"></p>
<p>In practice, we don‚Äôt have to limit ourselves to integrating from <img src="https://latex.codecogs.com/png.latex?0"> to <img src="https://latex.codecogs.com/png.latex?%5Cinfty">. This motivates defining the inner product in the function space</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clangle%20f,%20g%5Crangle_w%20:=%20%5Cint_a%5Eb%20f(x)g(x)w(x)dx%0A"></p>
<p>The approximation error can be further rewritten as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BL%7D%20=%20%5Clangle%20f,%20f%5Crangle%20+%20%5Csum_%7Bi%7D%5EN%20c_i%5E2%5Clangle%5Cphi_i,%20%5Cphi_i%5Crangle%20+%20%5Csum_%7Bi%20%5Cneq%20j%7D%20c_ic_j%5Clangle%20%5Cphi_i,%20%5Cphi_j%20%5Crangle%20-%202%5Csum_%7Bi%7D%5ENc_i%5Clangle%20%5Cphi_i,%20f%5Crangle%0A"></p>
<p>Now, wouldn‚Äôt it be nice if we can eliminate some of the terms here? In fact, we can do exactly that with orthogonal polynomials<img src="https://latex.codecogs.com/png.latex?%5E2">.</p>
</section>
<section id="orthogonal-polynomials" class="level3">
<h3 class="anchored" data-anchor-id="orthogonal-polynomials">Orthogonal Polynomials</h3>
<p>Orthogonal polynomials have the property that they are orthogonal to each other under the inner product definition, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clangle%20%5Cphi_i,%20%5Cphi_j%20%5Crangle%20=%200,%20%5Cforall%20i%20%5Cneq%20j%0A"></p>
<p>One example would be the Legendre polynomials, which is defined over <img src="https://latex.codecogs.com/png.latex?t%20%5Cin%20%5B-1,%201%5D"> with <img src="https://latex.codecogs.com/png.latex?w(t)%20=%201">, and is of the following forms</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cphi_0(x)%20&amp;=%201%5C%5C%0A%5Cphi_1(x)%20&amp;=%20x%5C%5C%0A%5Cphi_2(x)%20&amp;=%20%5Cfrac%7B1%7D%7B2%7D(3x%5E2%20-%201)%5C%5C%0A%5Cphi_3(x)%20&amp;=%20%5Cfrac12(5x%5E3%20-%203x)%20%5C%5C%0A...%5C%5C%0A%5Cphi_n(x)%20&amp;=%20%5Cfrac%7B1%7D%7B2%5Enn!%7D%5Cfrac%7Bd%5En%7D%7Bdx%5En%7D(x%5E2-1)%5En%0A%5Cend%7Baligned%7D%0A"></p>
<p><em>(note: there‚Äôs one unique set of OPs for any weight function for any given interval)</em></p>
<p>With this property, the approximation error simplifies to (the 3rd term disappears)</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BL%7D%20=%20%5Clangle%20f,%20f%5Crangle%20+%20%5Csum_%7Bi%7D%5EN%20c_i%5E2%5Clangle%5Cphi_i,%20%5Cphi_i%5Crangle%20-%202%5Csum_%7Bi%7D%5ENc_i%5Clangle%20%5Cphi_i,%20f%5Crangle%0A"></p>
<p>To simplify it further, let‚Äôs define the constant in a meaningful way by taking the gradient of <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D"> with respect to <img src="https://latex.codecogs.com/png.latex?c_i"> and set it to 0</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Cnabla_%7Bc_i%7D%5Cmathcal%7BL%7D%20&amp;=%202c_i%5Clangle%5Cphi_i,%20%5Cphi_i%5Crangle%20-%202%5Clangle%5Cphi_i,%20f%5Crangle%20=%200%20%5C%5C%0A%5Crightarrow%20c_i%20&amp;=%5Cfrac%7B%5Clangle%5Cphi_i,%20%5Cphi_i%5Crangle%7D%7B%5Clangle%5Cphi_i,%20f%5Crangle%7D%0A%5Cend%7Baligned%7D%0A"></p>
<p>The above gives us a way to <strong>combine a set of orthogonal polynomials to achieve minimum approximation error with respect to any function <img src="https://latex.codecogs.com/png.latex?f">.</strong></p>
</section>
<section id="make-the-weight-time-dependent" class="level3">
<h3 class="anchored" data-anchor-id="make-the-weight-time-dependent">Make the weight time-dependent</h3>
<p>Now, what if the weighting function is also time dependent (changes over time)? Instead of <img src="https://latex.codecogs.com/png.latex?w(x)">, we have <img src="https://latex.codecogs.com/png.latex?w%5E%7B(t)%7D(x)">. This leads to a more complicated system where everything should be defined with respect to another time. To save you some time, this leads to the following equation for the ‚Äúminimization coefficient‚Äù</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ac_n(t)%20=%20%5Czeta(t)%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%5Clambda_n%20%5Cint%20fp_n%5E%7B(t)%7D%5Cfrac%7Bw%5E%7B(t)%7D%7D%7B%5Cmathcal%7B%5Cchi%7D%5E%7B(t)%7D%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?p_n%5E%7B(t)%7D"> is the basis OP used in the system, <img src="https://latex.codecogs.com/png.latex?%5Cchi%5E%7B(t)%7D(x)"> is a scaling function to increase the generality of the argument, and <img src="https://latex.codecogs.com/png.latex?%5Czeta(t)"> is a normalization term caused by <img src="https://latex.codecogs.com/png.latex?%5Cchi%5E%7B(t)%7D">, <img src="https://latex.codecogs.com/png.latex?w%5E%7B(t)%7D"> is the time-varying weighting function.</p>
<p>The difference between <img src="https://latex.codecogs.com/png.latex?t"> and <img src="https://latex.codecogs.com/png.latex?x"> is plotted below.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="diff_tx.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="The difference between t and x"><img src="https://seanzhang.me/posts/ssm_lack_sequence_mixing/diff_tx.png" class="img-fluid figure-img" alt="The difference between t and x"></a></p>
<figcaption>The difference between <img src="https://latex.codecogs.com/png.latex?t"> and <img src="https://latex.codecogs.com/png.latex?x"></figcaption>
</figure>
</div>
<p>Now, why on earth would we want to do this? We want to do this because we want to take the derivative of <img src="https://latex.codecogs.com/png.latex?c_n(t)"> with respect to <img src="https://latex.codecogs.com/png.latex?t">, and hopefully derive a SSM out of it. We can do exactly that</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%5Cfrac%7Bd%7D%7Bd%20t%7D%20c_n(t)=%20&amp;%20%5Czeta(t)%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Clambda_n%20%5Cint%20f(x)%5Cleft(%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20t%7D%20p_n(t,%20x)%5Cright)%20%5Cfrac%7B%5Comega%7D%7B%5Cchi%7D(t,%20x)%20%5Cmathrm%7Bd%7D%20x%20%5C%5C&amp;%20+%5Cint%20f(x)%5Cleft(%5Czeta%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Clambda_n%20p_n(t,%20x)%5Cright)%5Cleft(%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20t%7D%20%5Cfrac%7B%5Comega%7D%7B%5Cchi%7D(t,%20x)%5Cright)%20%5Cmathrm%7Bd%7D%20x%20.%5Cend%7Baligned%7D%0A"></p>
<p>The beauty here is that <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20t%7D%20p_n(t,%20x)"> and <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%7D%7B%5Cpartial%20t%7D%20%5Cfrac%7B%5Comega%7D%7B%5Cchi%7D(t,%20x)"> can both be expressed in close-form and related back to themselves, which means we get an ODE out of this!</p>
<p>Once an ODE is obtained, we can structure it to form an SSM. <strong>Note that the precise form of SSM depends on what weighting function/OP we use</strong>. Different choice of weighting function represents how we weight the history.</p>
<p>Here‚Äôs an example of the explicit form of SSM, for the Laguerre polynomials</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%5Cfrac%7Bd%7D%7Bd%20t%7D%20c(t)%20&amp;%20=-A%20c(t)+B%20f(t)%20%5C%5CA%20&amp;%20=%5Cleft%5B%5Cbegin%7Barray%7D%7Bcccc%7D%5Cfrac%7B1+%5Cbeta%7D%7B2%7D%20&amp;%200%20&amp;%20%5Cldots%20&amp;%200%20%5C%5C1%20&amp;%20%5Cfrac%7B1+%5Cbeta%7D%7B2%7D%20&amp;%20%5Cldots%20&amp;%200%20%5C%5C%5Cvdots%20&amp;%20&amp;%20%5Cddots%20&amp;%20%5C%5C1%20&amp;%201%20&amp;%20%5Cldots%20&amp;%20%5Cfrac%7B1+%5Cbeta%7D%7B2%7D%5Cend%7Barray%7D%5Cright%5D%20%5C%5CB%20&amp;%20=%5Czeta%5E%7B-%5Cfrac%7B1%7D%7B2%7D%7D%20%5Ccdot%5Cleft%5B%5Cbegin%7Barray%7D%7Bc%7D%5Cleft(%5Cbegin%7Barray%7D%7Bc%7D%5Calpha%20%5C%5C0%5Cend%7Barray%7D%5Cright)%20%5C%5C%5Cvdots%20%5C%5C%5Cleft(%5Cbegin%7Barray%7D%7Bc%7DN-1+%5Calpha%20%5C%5CN-1%5Cend%7Barray%7D%5Cright)%5Cend%7Barray%7D%5Cright%5D%5Cend%7Baligned%7D%0A"></p>
</section>
<section id="problem" class="level3">
<h3 class="anchored" data-anchor-id="problem">Problem?</h3>
<p>After defining the SSM in the continuous domain, one needs to discretize it and turn it into actual architecture and code. However, here I want to focus on 2 properties of SSM:</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>üí° 1. The way that <img src="https://latex.codecogs.com/png.latex?%5Ccolor%7Bred%7D%7Bh_t%7D"> evolves by itself is <strong>time invariant</strong> 2. The way <img src="https://latex.codecogs.com/png.latex?%5Ccolor%7Bbrown%7Dx_t"> affects <img src="https://latex.codecogs.com/png.latex?%5Ccolor%7Bred%7Dh_t"> is <strong>additive</strong></p>
</div>
</div>
<p><em>(here I‚Äôm abusing notations by using <img src="https://latex.codecogs.com/png.latex?h_t"> and <img src="https://latex.codecogs.com/png.latex?c(t)"> interchangeably, and using <img src="https://latex.codecogs.com/png.latex?x(t)"> for <img src="https://latex.codecogs.com/png.latex?f(t)">)</em></p>
<p>To elaborate a bit, it means</p>
<ol type="1">
<li>Without external input, this is a deterministic <strong>linear</strong> system (by design), and it‚Äôs much computationally easier to compute a linear system (i.e., convolution can be applied)</li>
<li>The expressiveness of the system is bound by <strong>linearity</strong></li>
</ol>
<p>To see why the 2nd point is true, we can expand the system equation and obtain</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ah_%7Bt+1%7D%20&amp;=%20A%20h_%7Bt%7D%20+%20Bx_%7Bt%7D%20%5C%5C%0A&amp;=%20A%5E2h_%7Bt-1%7D%20+%20ABx_%7Bt-1%7D%20+%20Bx_%7Bt%7D%20%5C%5C%0A&amp;=%20A%5Eth_1%20+%20A%5E%7Bt-1%7DBx_1%20+%20A%5E%7Bt-2%7DBx_2%20+%20...%20+%20Bx_t%0A%5C%5C%0Ay_%7Bt%7D%20&amp;=%20CA%5Eth_1%20+%20CA%5E%7Bt-1%7DBx_1%20+%20CA%5E%7Bt-2%7DBx_2%20+%20...%20+%20CBx_t%20+%20Dx_t%0A%5Cend%7Baligned%7D%0A"></p>
<p>where it‚Äôs clear <img src="https://latex.codecogs.com/png.latex?x_%7B1:t%7D"> can only affect the system state <img src="https://latex.codecogs.com/png.latex?h"> in linear fashion, if <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B"> are fixed. Also, if <img src="https://latex.codecogs.com/png.latex?C"> and <img src="https://latex.codecogs.com/png.latex?D"> are fixed, <img src="https://latex.codecogs.com/png.latex?y_t"> is also affected by <img src="https://latex.codecogs.com/png.latex?x_%7B1:t%7D"> in a linear fashion.</p>
</section>
<section id="lack-of-non-linearity" class="level3">
<h3 class="anchored" data-anchor-id="lack-of-non-linearity">Lack of non-linearity</h3>
<p>It‚Äôs clear that such a system, while might be desirable for system control, is not ideal to express a complicated system that is <strong>non-linear</strong>. And it‚Äôs hard to argue that tasks like language modeling will be a linear system. In the most recent architectures (such as Mamba<span class="citation" data-cites="mamba">(Gu and Dao 2024)</span>), this lack of expressiveness is addressed by</p>
<ol type="1">
<li>replacing <img src="https://latex.codecogs.com/png.latex?B"> with <img src="https://latex.codecogs.com/png.latex?B(x_t)"></li>
<li>replacing <img src="https://latex.codecogs.com/png.latex?C"> with <img src="https://latex.codecogs.com/png.latex?C(x_t)"></li>
<li>replacing <img src="https://latex.codecogs.com/png.latex?D"> with <img src="https://latex.codecogs.com/png.latex?D(x_t)"></li>
</ol>
<p>Therefore, the governing equation is replaced by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Ccolor%7Bred%7Dh_%7Bt+1%7D%20&amp;=%20%7B%5Ccolor%7Bblue%7DA%7D%5Ccdot%20%7B%5Ccolor%7Bred%7D%7Bh_t%7D%7D%20+%20%7B%5Ccolor%7Bgreen%7D%7BB(x_t)%5Ccdot%20x_t%7D%7D%20%5C%5C%0Ay_t%20&amp;=%20C(x_t)%5Ccdot%20%7B%5Ccolor%7Bred%7D%7Bh_t%7D%7D%20+%20D(x_t)%5Ccdot%20x_t%5C%5C%0A%5Cend%7Baligned%7D%0A"></p>
<p>where we can fold the input <img src="https://latex.codecogs.com/png.latex?x_t"> further into <img src="https://latex.codecogs.com/png.latex?B(x_t)"> and <img src="https://latex.codecogs.com/png.latex?D(x_t)"> without loss of generality, and obtain</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Ccolor%7Bred%7Dh_%7Bt+1%7D%20&amp;=%20%7B%5Ccolor%7Bblue%7DA%7D%5Ccdot%20%7B%5Ccolor%7Bred%7D%7Bh_t%7D%7D%20+%20%7B%5Ccolor%7Bgreen%7D%7BB(x_t)%7D%7D%20%5C%5C%0Ay_t%20&amp;=%20C(x_t)%5Ccdot%20%7B%5Ccolor%7Bred%7D%7Bh_t%7D%7D%20+%20D(x_t)%5C%5C%0A%5Cend%7Baligned%7D%0A"></p>
<p>Similarly, we can expand the system again and obtain</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0Ah_%7Bt+1%7D%20&amp;=%20A%5Eth_1%20+%20A%5E%7Bt-1%7DB(x_1)%20+%20A%5E%7Bt-2%7DB(x_2)%20+%20...%20+%20B(x_t)%0A%5C%5C%0Ay_%7Bt%7D%20&amp;=%20C(x_t)A%5E%7Bt-1%7Dh_1%20+%20C(x_t)A%5E%7Bt-1%7DB(x_2)%20+%20C(x_t)A%5E%7Bt-2%7DB(x_3)%20+%20...%20+%20C(x_t)B(x_t)%20+%20D(x_t)%0A%5Cend%7Baligned%7D%0A"></p>
<p>Although this is technically a non-linear system as long as <img src="https://latex.codecogs.com/png.latex?B(x)"> or <img src="https://latex.codecogs.com/png.latex?C(x)"> or <img src="https://latex.codecogs.com/png.latex?D(x)"> is non-linear (for example, <img src="https://latex.codecogs.com/png.latex?B(x)%20=%20%5Csin(x)">), <strong>this modeling does not involve any sequence-crossing terms</strong> like <img src="https://latex.codecogs.com/png.latex?B(x_1)%5Ccdot%20B(x_2)">.</p>
<p>This, in my opinion, hugely impacts the expressiveness of the system because the lack of sequence-cross in sequential modeling is similar to the lack of feature-crossing in tabular modeling, which will result in low sample efficiency.</p>
</section>
<section id="mamba-to-the-rescue" class="level3">
<h3 class="anchored" data-anchor-id="mamba-to-the-rescue">Mamba to the rescue?</h3>
<p>In the Mamba<img src="https://latex.codecogs.com/png.latex?%5E1"> paper, the authors (I‚Äôd argue partially) addressed this issue by:</p>
<ol type="1">
<li><p>inserting a <strong>convolution layer</strong> before <img src="https://latex.codecogs.com/png.latex?x">, but I don‚Äôt see how that will fundamentally change the picture, because <img src="https://latex.codecogs.com/png.latex?x_i"> and <img src="https://latex.codecogs.com/png.latex?x_j"> will not interact with each other if their sequential distance is larger than the convolution kernel size.</p></li>
<li><p>having <strong>more layers</strong> so <img src="https://latex.codecogs.com/png.latex?x_i"> and <img src="https://latex.codecogs.com/png.latex?x_j"> can interact with each other at a higher layer, but this does not change the fact that on a given layer, no cross-sequence interaction can happen.</p></li>
<li><p>creating a gating layer so that <strong>an explicit sequence-crossing layer</strong> is added to the output <img src="https://latex.codecogs.com/png.latex?y_t">, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0A%5Ctext%7BInstead%20of%20%7D%5Cquad%20y_t%20&amp;=%20C(x_t)h_t%20+%20D(x_t)%20%5C%5C%0A%5Ctext%7BLet%7D%5Cquad%20y_t&amp;=%5Csigma(x_%7B1:t%7D)*(C(x_t)h_t%20+%20D(x_t))%0A%5Cend%7Baligned%7D%0A"></p>
<p>which technically makes sequence-crossing possible. This is similar to GRU and LSTM. The additional expressiveness of such a gating mechanism, one can argue, is much less that attention, because the gate itself does not contain sequence-crossing terms.</p></li>
</ol>
</section>
</section>
<section id="intuition" class="level2">
<h2 class="anchored" data-anchor-id="intuition">Intuition</h2>
<p>By turning the linear SSM into an non-linear SSM, and adding these 3 additional modifications, SSM seem to perform well across many modalities (arguments can be made on the details of some of these experiment results, such as the extremely low vocab size used in the induction head<span class="citation" data-cites="induction_heads">(Olsson et al. 2022)</span> task).</p>
<p>However, a pattern has emerged through the evolution of SSM models where we started off with a beautiful mathematical model (a unified compression scheme) that has theoretical guarantees on approximation error and implementation efficiency. However, due to our limited understanding of the expressiveness required for complicated domains like language, an iterative approach must be taken to move the trad-off point (illustrated below) towards one that <strong>uses the minimum complexity to achieve the required expressiveness and completeness</strong>.</p>
<p>The question then becomes ‚Äúis transformer already at the best trade-off point‚Äù? For most domains?</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="complexity_trade_off.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="A visual illustration of the trade-off point"><img src="https://seanzhang.me/posts/ssm_lack_sequence_mixing/complexity_trade_off.png" class="img-fluid figure-img" alt="A visual illustration of the trade-off point"></a></p>
<figcaption>A visual illustration of the trade-off point</figcaption>
</figure>
</div>
<p><del>I have no idea.</del> (I have some ideas now!)</p>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-chihara1978" class="csl-entry">
Chihara, Th. 1978. <em>An Introduction to Orthogonal Polynomials</em>. Gordon; Breach, New York.
</div>
<div id="ref-mamba" class="csl-entry">
Gu, Albert, and Tri Dao. 2024. <span>‚ÄúMamba: Linear-Time Sequence Modeling with Selective State Spaces.‚Äù</span> <a href="https://arxiv.org/abs/2312.00752">https://arxiv.org/abs/2312.00752</a>.
</div>
<div id="ref-induction_heads" class="csl-entry">
Olsson, Catherine, Nelson Elhage, Neel Nanda, Nicholas Joseph, Nova DasSarma, Tom Henighan, Ben Mann, et al. 2022. <span>‚ÄúIn-Context Learning and Induction Heads.‚Äù</span> <a href="https://arxiv.org/abs/2209.11895">https://arxiv.org/abs/2209.11895</a>.
</div>
</div></section></div> ]]></description>
  <category>deep learning</category>
  <category>sequence modeling</category>
  <category>technical</category>
  <guid>https://seanzhang.me/posts/ssm_lack_sequence_mixing/</guid>
  <pubDate>Sat, 02 Mar 2024 08:00:00 GMT</pubDate>
  <media:content url="https://seanzhang.me/posts/ssm_lack_sequence_mixing/mamba.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Interactive FID</title>
  <dc:creator>Sean Zhang</dc:creator>
  <link>https://seanzhang.me/posts/interactive_fid/</link>
  <description><![CDATA[ 





<section id="the-question" class="level2">
<h2 class="anchored" data-anchor-id="the-question">The question</h2>
<p>Imagine that you have 2 curves in a 2-D space, <strong>how would you measure the similarity of these 2 curves?</strong></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fid_1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Two randomly drawn curves in 2D space"><img src="https://seanzhang.me/posts/interactive_fid/fid_1.png" class="img-fluid figure-img" alt="Two randomly drawn curves in 2D space"></a></p>
<figcaption>Two randomly drawn curves in 2D space</figcaption>
</figure>
</div>
<p>This question turns out to be of great importance, as it helps answer the following question:</p>
<ul>
<li>In machine learning, generative models need to be evaluated by comparing the data likelihood of generated output vs.&nbsp;the training dataset</li>
<li>In robotics, different movement trajectories need to be compared to evaluate their performance</li>
<li>In geographic information systems, trajectories of road, river, movements of animals need to be compared, where a similarity measure needs to be defined</li>
</ul>
<p>There‚Äôre some general properties we wish the distance measure <img src="https://latex.codecogs.com/png.latex?D"> to have:</p>
<ol type="1">
<li><strong>Commutativity</strong>: <img src="https://latex.codecogs.com/png.latex?D(A,%20B)%20=%20D(B,%20A)"> for curve <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?B"></li>
<li><strong>Translation invariant</strong>: <img src="https://latex.codecogs.com/png.latex?D(A+%5Clambda,%20B%20+%20%5Clambda)%20=%20D(A,%20B)">, where <img src="https://latex.codecogs.com/png.latex?A+%5Clambda"> is to translating all the points on <img src="https://latex.codecogs.com/png.latex?A"> by <img src="https://latex.codecogs.com/png.latex?%5Clambda"></li>
<li><strong>Definition of zero</strong>: <img src="https://latex.codecogs.com/png.latex?D(A,%20A)%20=%200"></li>
</ol>
<p>There‚Äôre also some properties that we want for the specific case of curves:</p>
<ol type="1">
<li><strong>Global instead of local</strong>: we want the distance measure to be defined in a global sense, as opposed to relying on specific points on these curve</li>
<li><strong>Continuous in addition to discrete</strong>: we want the distance measure to have a natural extension to continuous curves</li>
<li><strong>Insensitive to length</strong>: we don‚Äôt want the distance measure to be a function of the length of either curves</li>
</ol>
<p>It would not be trivial to define a such measure. For example, one can naively define the weighted sum/integral of square distances between all point pairs on these curves, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AD%20=%20%5Cfrac%7B1%7D%7BZ%7D%5Cint%5Cint%5ClVert%20A(t)%20-%20B(%5Ctau)%5CrVert_2%5E2d%5Ctau%20dt%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?Z"> could be a normalizing factor to normalize out the effect of length of these 2 curves (otherwise the longer curves are, the more dissimilar they will be, despite that they can be very similar). However, because a close-form solution for the length of any finite curve might not exist, it doesn‚Äôt have a nice close-form expression. Another downside is that this formulation is basically describing ‚Äúon average, how distant a point in curve A is from a point in curve B‚Äù, which might not be ideal.</p>
<p>Consider the following 2 curves:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fid_2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Two curves with different lengths but almost parallel"><img src="https://seanzhang.me/posts/interactive_fid/fid_2.png" class="img-fluid figure-img" alt="Two curves with different lengths but almost parallel"></a></p>
<figcaption>Two curves with different lengths but almost parallel</figcaption>
</figure>
</div>
<p>These 2 curves are almost parallel, except one has made a rather zigzag ‚Äúdetour‚Äù. If we are doing weight average, the distance between these 2 curves will be dominated by the ‚Äúdetour‚Äù as the ‚Äúdetour‚Äù takes a larger proportion in the upper curve. This might be something we want, but it neglects the fact that these 2 curves are very similar if we don‚Äôt look at the detour.</p>
<p>Is there a way to define a measure such that it doesn‚Äôt weight the distance so uniformly? But take into account the overall shape?</p>
</section>
<section id="fr√©chet-distance" class="level2">
<h2 class="anchored" data-anchor-id="fr√©chet-distance">Fr√©chet Distance</h2>
<p>The Fr√©chet Distance is defined as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AD(A,%20B)%20&amp;:=%20%5Coverbrace%7B%5Cmin_%7B%5Calpha,%20%5Cbeta%7D%7D%5E%7B%5Ctext%7BTaking%20minimum%20over%20function%20space%7D%7D%5Cmax_%7Bt%5Cin%5B0,%201%5D%7D%5Cleft%5C%7Bd(A(%5Calpha(t)),%20B(%5Cbeta(t)))%5Cright%5C%7D%5C%5C%0A%5Ctext%7Bwhere%20%7D&amp;A,%20B%5Ctext%7B%20are%20curves%20%7D%5C%5C&amp;%20A,%20B:%5B0,%201%5D%20%5Crightarrow%20%5Cmathcal%7BR%7D%5E2%5C%5C%0A&amp;%5Calpha,%20%5Cbeta%20%5Ctext%7B%20are%20any%20arbitrary%20%7Bnon-decreasing%7D%20scalar%20function%7D%20%5C%5C&amp;%5Calpha,%20%5Cbeta:%20%5B0,%201%5D%5Crightarrow%5B0,1%5D%20%5Ctext%7B%20s.t.%7D%5Cquad%5Calpha(%5Ctau_1)%20%5Cleq%5Calpha(%5Ctau_2)%5Cquad%20%5Cforall%20%5Ctau_1%5Cleq%5Ctau_2%5C%5C%0A&amp;t%5Cin%5B0,%201%5D%0A%5Cend%7Baligned%7D%0A"></p>
<p>In English, this is to say:</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Let‚Äôs suppose you are walking a dog. You are walking along curve A, the dog is walking along curve B. What‚Äôs the shortest leash that allows both you and the dog to finish the walk?</p>
</div>
</div>
<p>I‚Äôve found this explanation quite fascinating, because it gives such a good intuition to an otherwise complicated mathematical definition (especially because it‚Äôs doing a min over function space).</p>
<p>It‚Äôs such a good explanation that I build a <a href="https://www.seanzhang.me/demo/fd">demo</a> for this.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="fid_3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Fr√©chet Distance demo: the distance is indicated by the radius of the circles (all of the same radius); The green lines are the shortest distance from each red points from curve 1 to curve 2, all of the green lines should be shorter than Fr√©chet distance."><img src="https://seanzhang.me/posts/interactive_fid/fid_3.png" class="img-fluid figure-img" alt="Fr√©chet Distance demo: the distance is indicated by the radius of the circles (all of the same radius); The green lines are the shortest distance from each red points from curve 1 to curve 2, all of the green lines should be shorter than Fr√©chet distance."></a></p>
<figcaption>Fr√©chet Distance demo: the distance is indicated by the radius of the circles (all of the same radius); The green lines are the shortest distance from each red points from curve 1 to curve 2, all of the green lines should be shorter than Fr√©chet distance.</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <category>deep learning</category>
  <category>image generation</category>
  <guid>https://seanzhang.me/posts/interactive_fid/</guid>
  <pubDate>Thu, 23 Nov 2023 08:00:00 GMT</pubDate>
  <media:content url="https://seanzhang.me/posts/interactive_fid/fid.png" medium="image" type="image/png" height="74" width="144"/>
</item>
<item>
  <title>EM in a nutshell</title>
  <dc:creator>Sean Zhang</dc:creator>
  <link>https://seanzhang.me/posts/em_in_a_nutshell/</link>
  <description><![CDATA[ 





<p>One of the most interesting ideas in machine learning I‚Äôve found is the EM algorithm. The idea behind EM is summarized as follows:</p>
<ul>
<li>Normally, in a learning problem, we are given a dataset <img src="https://latex.codecogs.com/png.latex?X">, we think of a model that capture the probability of the dataset <img src="https://latex.codecogs.com/png.latex?P(x)">, and the model is governed by a bunch of parameters <img src="https://latex.codecogs.com/png.latex?%5Ctheta">.</li>
<li>What we do in machine learning (typically), is to solve for <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> by optimizing for the <strong>likelihood of the data</strong>, given by <img src="https://latex.codecogs.com/png.latex?P(X%7C%5Ctheta)">.</li>
<li>one example would be logistic regression for multi-class classification, where <img src="https://latex.codecogs.com/png.latex?%0AP(X%7C%5Ctheta)%20=%20%5Cprod_%7Bn=1%7D%5EN%20%5Cfrac%7B%5Csum_%7Bk=1%7D%5EK%5Cexp(%5Ctheta%5ETx_n)%5Ccdot%20y_%7Bnk%7D%7D%7B%5Csum_%7Bk=1%7D%5EK%5Cexp(%5Ctheta%5ETx_n)%7D%0A"></li>
<li>To maximize the <strong>likelihood of the data</strong>, we typically take the log of the likelihood and maximize it using
<ul>
<li>close-form solution (if available and dataset is small enough), e.g., linear regression</li>
<li>gradient descent (if close-form solution is not available or dataset is too large)</li>
</ul></li>
<li>However, there‚Äôre often cases where the distribution can‚Äôt be modeled so ‚Äúsimply‚Äù, meaning there‚Äôre more structure to the underlying distribution, where the distribution of <img src="https://latex.codecogs.com/png.latex?X"> is not only determined by <img src="https://latex.codecogs.com/png.latex?%5Ctheta">, but also by another set of random variables <img src="https://latex.codecogs.com/png.latex?Z">, one such example would be mixed gaussian where <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7DP(X%7C%5Ctheta)%20&amp;=%20%5Csum_%7Bz=k%7D%5EK%20P(X,%20Z%7C%5Ctheta)%20%5C%5C&amp;=%20%5Csum_%7Bz=k%7D%5EKP(Z=z%7C%5Ctheta)P(X%7CZ=z,%20%5Ctheta)%20%5C%5C&amp;=%20%5Cprod_%7Bn=1%7D%5EN%20%5Csum_%7Bz=k%7D%5EKP(z%20%7C%20%5Ctheta)P(x_n%7CZ%20=%20z,%20%5Ctheta)%20%5C%5C&amp;=%5Cprod_%7Bn=1%7D%5EN%20%5Csum_%7Bz=k%7D%5EK%20%5Cpi_%7Bk%7D%5Cmathcal%7BN%7D(x_n%20%7C%20%5Cmu_z,%20%5Csigma_z)%5Cend%7Baligned%7D%0A"> because there‚Äôs a sum inside the product, when taking the log of the likelihood, the close-form solution becomes very complex and hard to directly optimize for.</li>
</ul>
<hr>
<ul>
<li><p>Therefor, we optimize it through a two-step process</p>
<ul>
<li><strong>Expectation Step</strong>: Fix <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> to be <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E%7Bold%7D">, evaluate the posterior distribution of <img src="https://latex.codecogs.com/png.latex?Z"> , i.e., because we know the form of the likelihood, we can calculate the posterior as long as a prior of <img src="https://latex.codecogs.com/png.latex?Z"> is given. <img src="https://latex.codecogs.com/png.latex?%0AP(Z%20=%20z%20%7C%20%5Ctheta%5E%7Bold%7D,%20X)%20=%20%5Cfrac%7BP(Z%7C%5Ctheta%5E%7Bold%7D)P(X%7CZ,%5Ctheta%5E%7Bold%7D)%7D%7BP(X%7C%5Ctheta%5E%7Bold%7D)%7D%20=%20%5Cfrac%7BP(Z%7C%5Ctheta%5E%7Bold%7D)P(X%7CZ,%5Ctheta%5E%7Bold%7D)%7D%7B%5Csum_%7Bz%7DP(Z%7C%5Ctheta%5E%7Bold%7D)P(X%7C%5Ctheta%5E%7Bold%7D)%7D%0A"></li>
<li><strong>Maximization Step</strong>: Maximize the likelihood <img src="https://latex.codecogs.com/png.latex?P(X%7C%5Ctheta)"> but use the posterior <img src="https://latex.codecogs.com/png.latex?P(Z%7C%5Ctheta%5E%7Bold%7D,X)"> in place of the prior <img src="https://latex.codecogs.com/png.latex?P(Z%7C%5Ctheta)">, i.e., maximize <img src="https://latex.codecogs.com/png.latex?%0A%20%20Q(%5Ctheta,%20%5Ctheta%5E%7Bold%7D)%20=%20%5Csum_%7Bz%7D%20P(Z%7C%5Ctheta%5E%7Bold%7D,%20X)P(X%7CZ,%20%5Ctheta)%0A%20%20"></li>
<li>Repeat the two steps until convergence.</li>
</ul></li>
<li><p>We can interpret the EM algorithm by considering a decomposition of the likelihood, i.e., <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%5Cln(p(X%7C%5Ctheta))%20&amp;=%20%5Cmathcal%7BL%7D(q,%20%5Ctheta)%20+%20KL(q%7C%7Cp)%20%5C%5C&amp;=%20%5Csum_%7BZ%7Dq(Z)%5Cln(%5Cfrac%7Bp(X,%20Z%7C%20%5Ctheta)%7D%7Bq(Z)%7D)%20-%20%5Csum_%7BZ%7Dq(Z)%5Cln(%5Cfrac%7Bp(Z%7C%5Ctheta,X)%7D%7Bq(Z)%7D)%20%5C%5C&amp;=%20%5Csum_%7BZ%7Dq(Z)%5Cln(p(X,Z%7C%5Ctheta))%20-%20%5Csum_%7BZ%7Dq(Z)%5Cln(p(Z%7C%5Ctheta,%20X))%20%5C%5C&amp;=%5Csum_%7BZ%7Dq(Z)%5Cln(%5Cfrac%7Bp(X,Z%7C%5Ctheta)%7D%7Bp(Z%7C%5Ctheta,%20X)%7D)%5C%5C&amp;=%5Csum_%7BZ%7Dq(Z)%5Cln(p(X%7C%5Ctheta))%20%5C%5C&amp;=%5Cln(p(X%7C%5Ctheta))%5Cend%7Baligned%7D%0A"> where <img src="https://latex.codecogs.com/png.latex?q(Z)"> is an arbitrary prior of <img src="https://latex.codecogs.com/png.latex?Z">.</p>
<p>This decomposition tells us that <strong>for given a fixed <img src="https://latex.codecogs.com/png.latex?%5Ctheta">, the best prior <img src="https://latex.codecogs.com/png.latex?q(Z)"> is found by letting it equal to the posterior <img src="https://latex.codecogs.com/png.latex?p(Z%7C%5Ctheta,%20X)">,</strong> since it‚Äôs the only way to make the KL divergence 0. Also, for a fixed <img src="https://latex.codecogs.com/png.latex?P(Z)">, we can obtain the best <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> by using maximal likelihood optimization.</p></li>
</ul>

<div class="no-row-height column-margin column-container"><div class="">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://seanzhang.me/posts/em_in_a_nutshell/em_process.png" class="img-fluid figure-img"></p>
<figcaption>EM Process</figcaption>
</figure>
</div>
</div></div><section id="limitations" class="level2">
<h2 class="anchored" data-anchor-id="limitations">Limitations</h2>
<p>While the idea of EM is powerful, it is impractical in models where the evaluation of the posterior <img src="https://latex.codecogs.com/png.latex?p(Z%7C%5Ctheta,%20X)"> is impossible (think multi-layer deep neural network with nonlinearity in between).</p>
<p>To make inference about <img src="https://latex.codecogs.com/png.latex?Z"> in those cases, we need to resort to another powerful tool (Variational Inference).</p>


</section>

 ]]></description>
  <category>deep learning</category>
  <category>probability</category>
  <category>technical</category>
  <guid>https://seanzhang.me/posts/em_in_a_nutshell/</guid>
  <pubDate>Fri, 02 Aug 2019 07:00:00 GMT</pubDate>
  <media:content url="https://seanzhang.me/posts/em_in_a_nutshell/em.png" medium="image" type="image/png" height="144" width="144"/>
</item>
</channel>
</rss>
