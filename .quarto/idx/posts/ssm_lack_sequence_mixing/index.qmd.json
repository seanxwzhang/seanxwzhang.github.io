{"title":"SSM lacks sequence mixing","markdown":{"yaml":{"title":"SSM lacks sequence mixing","author":"Sean Zhang","date":"2024-03-02","date-modified":"2025-07-22","categories":["deep learning","sequence modeling","technical"],"image":"mamba.png","bibliography":"references.bib","link-citations":true,"description":"Every architecture contains some implicit trade-offs. My impression is SSMs are a good sequential architecture for modalities where interactions within a sequence matters less than a good compression of past states."},"headingText":"Opinion","containsRefs":false,"markdown":"\n\n\n*These are just my thoughts and intuition after tinkering with SSMs for the past month. Take with a grain of salt*\n\n<!--more-->\n\n\nEvery architecture contains some implicit trade-offs. My impression is SSMs are a good sequential architecture for modalities where interactions within a sequence matters less than a good compression of past states. However, it might not be the best architecture if the following 2 conditions are met:\n\n1. The marginal gain of additional compression quality outweighs the efficiency loss.\n2. *The way a task depends on past history varies a lot (the definition of ‚Äúa lot‚Äù will become clearer later).*\n\nThe 1st condition is fairly self-explanatory and is generally true for complicated deep learning tasks (chatbot, self-driving), at least for the time being, and especially true for areas that are yet to be solved.\n\n![An illustration of quality-efficiency trade-off](quality_complexity.png){.lightbox}\n\nThe 2nd condition is more subtle, because what does ‚Äúthe way a task depends on past history‚Äù actually mean? Before attempting to answer this question, here‚Äôs why I think it matters for SSM models. \n\nBut even before that, let‚Äôs do a quick recap of state space models are.\n\n## SSM Models\n\nWhen I refer to SSM models, I‚Äôm not referring to the classical [state space models](https://probml.github.io/ssm-book/root.html) used in a control context or a quantitative finance context, but rather SSM in the context of sequential neural networks.\n\n![Literature roadmap of recent State Space neural network Model architectures](ssm_literature.png){.lightbox}\n\nThe above is literature roadmap of recent SSM architectures. The are some terrific detailed explanation on what they are:\n\n- [The Annotated S4](https://srush.github.io/annotated-s4/) dives deep into S4 and explained the inner workings of S4.\n- [A Visual Guide to Mamba and State Space Models](https://maartengrootendorst.substack.com/p/a-visual-guide-to-mamba-and-state#%C2%A7what-problem-does-it-attempt-to-solve) explained, visually, what mamba does.\n- [From Deep to Long Learning?](https://hazyresearch.stanford.edu/blog/2023-03-27-long-learning) where the authors themselves gave a good account of the development of H3 and Hyena.\n\nIn short, SSM is the following process that models state changes of a system\n\n$$\n\\begin{aligned}\n\\color{red}h_{t+1} &= {\\color{blue}A}\\cdot {\\color{red}{h_t}} + {\\color{green}{B\\cdot x_t}}\\\\\ny_t &= C\\cdot {\\color{red}{h_t}} + D\\cdot x_t \\\\\n\\text{where } &t := \\text{Step/Time}\\\\\n&h := \\text{Hidden state of the system} \\\\\n&x := \\text{Input to the system}\\\\\n&y := \\text{Output of the system} \\\\\n&A := \\text{A matrix determining how the state changes over }t \\\\\n&B := \\text{How input affects state} \\\\\n&C := \\text{How state affects output} \\\\\n&D := \\text{How input directly affects output}\n\\end{aligned}\n$$\n\n*(The above is only for discrete problem, similar formulation for continuous time; Also I‚Äôm neglecting the discretization step here for illustration purpose)*\n\nThere‚Äôre many properties to this model, and its usefulness is immense in the field of control, signal processing, time series application, etc.\n\n### History preserving\n\nJust by laying out the equations above does not guarantee a good compression of past history. The magic of SSMs comes from the theory of approximation theory, and in particular, orthogonal polynomials [@chihara1978]. Consider a scale value $x$ that varies with sequence $x$, i.e.,\n\n$$\nf = f(x)\n$$\n\nSuppose we want to approximate the history with a limited number of numbers $c_1, c_2, ... c_N$, one way to achieve it is to let each $c_n$ correspond to a ‚Äúbasis function‚Äù $\\phi_n$ and let\n\n$$\n\\hat f(x) = \\sum_{n=0}^N c_n\\phi_n(x)\n$$\n\nThe approximation error is therefore defined as\n\n$$\n\\begin{aligned}\n\\text{Error} &= ||f(x) - \\hat f(x)||^2_w = \\int_0^\\infty(f(x) - \\hat f(x))^2w(x)dx\\\\\n\\text{where } w & \\text{ defines a weighting function}\n\\end{aligned}\n$$\n\nThe weighting function is added to further generalize the discussion. Expanding the error, one obtains\n\n$$\n\\begin{aligned}\n\\mathcal{L} &= \\int_0^\\infty(f(x) - \\sum_{n=0}^Nc_n\\phi_n(x))^2w(x)dx \\\\\n&=\\int_0^\\infty\\left[f^2(x) + \\sum_{i=0}^Nc_i^2\\phi_i^2(x) - 2\\sum_{i\\neq j}c_ic_j\\phi_i(x)\\phi_j(x) - 2\\sum_{i=0}^Nc_i\\phi_i(x)f(x)\\right]w(x)dx \n\\end{aligned}\n$$\n\nIn practice, we don‚Äôt have to limit ourselves to integrating from $0$ to $\\infty$. This motivates defining the inner product in the function space\n\n$$\n\\langle f, g\\rangle_w := \\int_a^b f(x)g(x)w(x)dx\n$$\n\nThe approximation error can be further rewritten as\n\n$$\n\\mathcal{L} = \\langle f, f\\rangle + \\sum_{i}^N c_i^2\\langle\\phi_i, \\phi_i\\rangle + \\sum_{i \\neq j} c_ic_j\\langle \\phi_i, \\phi_j \\rangle - 2\\sum_{i}^Nc_i\\langle \\phi_i, f\\rangle\n$$\n\nNow, wouldn‚Äôt it be nice if we can eliminate some of the terms here? In fact, we can do exactly that with orthogonal polynomials$^2$. \n\n### Orthogonal Polynomials\n\nOrthogonal polynomials have the property that they are orthogonal to each other under the inner product definition, i.e.,\n\n$$\n\\langle \\phi_i, \\phi_j \\rangle = 0, \\forall i \\neq j\n$$\n\nOne example would be the Legendre polynomials, which is defined over $t \\in [-1, 1]$ with $w(t) = 1$, and is of the following forms\n\n$$\n\\begin{aligned}\n\\phi_0(x) &= 1\\\\\n\\phi_1(x) &= x\\\\\n\\phi_2(x) &= \\frac{1}{2}(3x^2 - 1)\\\\\n\\phi_3(x) &= \\frac12(5x^3 - 3x) \\\\\n...\\\\\n\\phi_n(x) &= \\frac{1}{2^nn!}\\frac{d^n}{dx^n}(x^2-1)^n\n\\end{aligned}\n$$\n\n*(note: there‚Äôs one unique set of OPs for any weight function for any given interval)*\n\nWith this property, the approximation error simplifies to (the 3rd term disappears)\n\n$$\n\\mathcal{L} = \\langle f, f\\rangle + \\sum_{i}^N c_i^2\\langle\\phi_i, \\phi_i\\rangle - 2\\sum_{i}^Nc_i\\langle \\phi_i, f\\rangle\n$$\n\nTo simplify it further, let‚Äôs define the constant in a meaningful way by taking the gradient of $\\mathcal{L}$ with respect to $c_i$ and set it to 0\n\n$$\n\\begin{aligned}\n\\nabla_{c_i}\\mathcal{L} &= 2c_i\\langle\\phi_i, \\phi_i\\rangle - 2\\langle\\phi_i, f\\rangle = 0 \\\\\n\\rightarrow c_i &=\\frac{\\langle\\phi_i, \\phi_i\\rangle}{\\langle\\phi_i, f\\rangle}\n\\end{aligned}\n$$\n\nThe above gives us a way to **combine a set of orthogonal polynomials to achieve minimum approximation error with respect to any function $f$.** \n\n### Make the weight time-dependent\n\nNow, what if the weighting function is also time dependent (changes over time)? Instead of $w(x)$, we have $w^{(t)}(x)$. This leads to a more complicated system where everything should be defined with respect to another time. To save you some time, this leads to the following equation for the ‚Äúminimization coefficient‚Äù\n\n$$\nc_n(t) = \\zeta(t)^{-\\frac{1}{2}}\\lambda_n \\int fp_n^{(t)}\\frac{w^{(t)}}{\\mathcal{\\chi}^{(t)}}\n$$\n\nwhere $p_n^{(t)}$ is the basis OP used in the system, $\\chi^{(t)}(x)$  is a scaling function to increase the generality of the argument, and $\\zeta(t)$ is a normalization term caused by $\\chi^{(t)}$, $w^{(t)}$ is the time-varying weighting function.\n\nThe difference between $t$ and $x$ is plotted below.\n\n![The difference between $t$ and $x$](diff_tx.png){.lightbox}\n\nNow, why on earth would we want to do this? We want to do this because we want to take the derivative of $c_n(t)$ with respect to $t$, and hopefully derive a SSM out of it. We can do exactly that\n\n$$\n\\begin{aligned}\\frac{d}{d t} c_n(t)= & \\zeta(t)^{-\\frac{1}{2}} \\lambda_n \\int f(x)\\left(\\frac{\\partial}{\\partial t} p_n(t, x)\\right) \\frac{\\omega}{\\chi}(t, x) \\mathrm{d} x \\\\& +\\int f(x)\\left(\\zeta^{-\\frac{1}{2}} \\lambda_n p_n(t, x)\\right)\\left(\\frac{\\partial}{\\partial t} \\frac{\\omega}{\\chi}(t, x)\\right) \\mathrm{d} x .\\end{aligned}\n$$\n\nThe beauty here is that $\\frac{\\partial}{\\partial t} p_n(t, x)$ and $\\frac{\\partial}{\\partial t} \\frac{\\omega}{\\chi}(t, x)$ can both be expressed in close-form and related back to themselves, which means we get an ODE out of this!\n\nOnce an ODE is obtained, we can structure it to form an SSM. **Note that the precise form of SSM depends on what weighting function/OP we use**. Different choice of weighting function represents how we weight the history.\n\nHere‚Äôs an example of the explicit form of SSM, for the Laguerre polynomials\n\n$$\n\\begin{aligned}\\frac{d}{d t} c(t) & =-A c(t)+B f(t) \\\\A & =\\left[\\begin{array}{cccc}\\frac{1+\\beta}{2} & 0 & \\ldots & 0 \\\\1 & \\frac{1+\\beta}{2} & \\ldots & 0 \\\\\\vdots & & \\ddots & \\\\1 & 1 & \\ldots & \\frac{1+\\beta}{2}\\end{array}\\right] \\\\B & =\\zeta^{-\\frac{1}{2}} \\cdot\\left[\\begin{array}{c}\\left(\\begin{array}{c}\\alpha \\\\0\\end{array}\\right) \\\\\\vdots \\\\\\left(\\begin{array}{c}N-1+\\alpha \\\\N-1\\end{array}\\right)\\end{array}\\right]\\end{aligned}\n$$\n\n### Problem?\n\nAfter defining the SSM in the continuous domain, one needs to discretize it and turn it into actual architecture and code. However, here I want to focus on 2 properties of SSM:\n\n::: {.callout-note}\nüí° 1.  The way that $\\color{red}{h_t}$ evolves by itself is **time invariant**\n2.  The way $\\color{brown}x_t$ affects $\\color{red}h_t$ is **additive**\n:::\n\n*(here I‚Äôm abusing notations by using $h_t$  and $c(t)$ interchangeably, and using  $x(t)$ for $f(t)$)*\n\nTo elaborate a bit, it means\n\n1. Without external input, this is a deterministic **linear** system (by design), and it‚Äôs much computationally easier to compute a linear system (i.e., convolution can be applied)\n2. The expressiveness of the system is bound by **linearity**\n\n \n\nTo see why the 2nd point is true, we can expand the system equation and obtain\n\n$$\n\\begin{aligned}\nh_{t+1} &= A h_{t} + Bx_{t} \\\\\n&= A^2h_{t-1} + ABx_{t-1} + Bx_{t} \\\\\n&= A^th_1 + A^{t-1}Bx_1 + A^{t-2}Bx_2 + ... + Bx_t\n\\\\\ny_{t} &= CA^th_1 + CA^{t-1}Bx_1 + CA^{t-2}Bx_2 + ... + CBx_t + Dx_t\n\\end{aligned}\n$$\n\nwhere it‚Äôs clear $x_{1:t}$ can only affect the system state $h$ in linear fashion, if $A$ and $B$ are fixed. Also, if $C$ and $D$ are fixed, $y_t$ is also affected by $x_{1:t}$ in a linear fashion. \n\n### Lack of non-linearity\n\nIt‚Äôs clear that such a system, while might be desirable for system control, is not ideal to express a complicated system that is **non-linear**. And it‚Äôs hard to argue that tasks like language modeling will be a linear system. In the most recent architectures (such as Mamba[@mamba]), this lack of expressiveness is addressed by \n\n1. replacing $B$ with $B(x_t)$\n2. replacing $C$ with $C(x_t)$\n3. replacing $D$ with $D(x_t)$\n\nTherefore, the governing equation is replaced by\n\n$$\n\\begin{aligned}\n\\color{red}h_{t+1} &= {\\color{blue}A}\\cdot {\\color{red}{h_t}} + {\\color{green}{B(x_t)\\cdot x_t}} \\\\\ny_t &= C(x_t)\\cdot {\\color{red}{h_t}} + D(x_t)\\cdot x_t\\\\\n\\end{aligned}\n$$\n\nwhere we can fold the input $x_t$ further into $B(x_t)$ and $D(x_t)$ without loss of generality, and obtain\n\n$$\n\\begin{aligned}\n\\color{red}h_{t+1} &= {\\color{blue}A}\\cdot {\\color{red}{h_t}} + {\\color{green}{B(x_t)}} \\\\\ny_t &= C(x_t)\\cdot {\\color{red}{h_t}} + D(x_t)\\\\\n\\end{aligned}\n$$\n\nSimilarly, we can expand the system again and obtain\n\n$$\n\\begin{aligned}\nh_{t+1} &= A^th_1 + A^{t-1}B(x_1) + A^{t-2}B(x_2) + ... + B(x_t)\n\\\\\ny_{t} &= C(x_t)A^{t-1}h_1 + C(x_t)A^{t-1}B(x_2) + C(x_t)A^{t-2}B(x_3) + ... + C(x_t)B(x_t) + D(x_t)\n\\end{aligned}\n$$\n\nAlthough this is technically a non-linear system as long as $B(x)$ or $C(x)$ or $D(x)$  is non-linear (for example, $B(x) = \\sin(x)$), **this modeling does not involve any sequence-crossing terms** like $B(x_1)\\cdot B(x_2)$. \n\nThis, in my opinion, hugely impacts the expressiveness of the system because the lack of sequence-cross in sequential modeling is similar to the lack of feature-crossing in tabular modeling, which will result in low sample efficiency.\n\n### Mamba to the rescue?\n\nIn the Mamba$^1$ paper, the authors (I‚Äôd argue partially) addressed this issue by:\n\n1. inserting a **convolution layer** before $x$, but I don‚Äôt see how that will fundamentally change the picture, because $x_i$ and $x_j$ will not interact with each other if their sequential distance is larger than the convolution kernel size.\n2. having **more layers** so $x_i$ and $x_j$ can interact with each other at a higher layer, but this does not change the fact that on a given layer, no cross-sequence interaction can happen.\n3. creating a gating layer so that **an explicit sequence-crossing layer** is added to the output $y_t$, i.e., \n    \n    $$\n    \\begin{aligned}\n    \\text{Instead of }\\quad y_t &= C(x_t)h_t + D(x_t) \\\\\n    \\text{Let}\\quad y_t&=\\sigma(x_{1:t})*(C(x_t)h_t + D(x_t))\n    \\end{aligned}\n    $$\n    \n    which technically makes sequence-crossing possible. This is similar to GRU and LSTM. The additional expressiveness of such a gating mechanism, one can argue, is much less that attention, because the gate itself does not contain sequence-crossing terms.\n    \n\n## Intuition\n\nBy turning the linear SSM into an non-linear SSM, and adding these 3 additional modifications, SSM seem to perform well across many modalities (arguments can be made on the details of some of these experiment results, such as the extremely low vocab size used in the induction head[@induction_heads] task). \n\nHowever, a pattern has emerged through the evolution of SSM models where we started off with a beautiful mathematical model (a unified compression scheme) that has theoretical guarantees on approximation error and implementation efficiency. However, due to our limited understanding of the expressiveness required for complicated domains like language, an iterative approach must be taken to move the trad-off point (illustrated below) towards one that **uses the minimum complexity to achieve the required expressiveness and completeness**.\n\nThe question then becomes ‚Äúis transformer already at the best trade-off point‚Äù? For most domains?\n\n![A visual illustration of the trade-off point](complexity_trade_off.png){.lightbox}\n\n\n~~I have no idea.~~ (I have some ideas now!)\n","srcMarkdownNoYaml":"\n\n\n*These are just my thoughts and intuition after tinkering with SSMs for the past month. Take with a grain of salt*\n\n<!--more-->\n\n## Opinion\n\nEvery architecture contains some implicit trade-offs. My impression is SSMs are a good sequential architecture for modalities where interactions within a sequence matters less than a good compression of past states. However, it might not be the best architecture if the following 2 conditions are met:\n\n1. The marginal gain of additional compression quality outweighs the efficiency loss.\n2. *The way a task depends on past history varies a lot (the definition of ‚Äúa lot‚Äù will become clearer later).*\n\nThe 1st condition is fairly self-explanatory and is generally true for complicated deep learning tasks (chatbot, self-driving), at least for the time being, and especially true for areas that are yet to be solved.\n\n![An illustration of quality-efficiency trade-off](quality_complexity.png){.lightbox}\n\nThe 2nd condition is more subtle, because what does ‚Äúthe way a task depends on past history‚Äù actually mean? Before attempting to answer this question, here‚Äôs why I think it matters for SSM models. \n\nBut even before that, let‚Äôs do a quick recap of state space models are.\n\n## SSM Models\n\nWhen I refer to SSM models, I‚Äôm not referring to the classical [state space models](https://probml.github.io/ssm-book/root.html) used in a control context or a quantitative finance context, but rather SSM in the context of sequential neural networks.\n\n![Literature roadmap of recent State Space neural network Model architectures](ssm_literature.png){.lightbox}\n\nThe above is literature roadmap of recent SSM architectures. The are some terrific detailed explanation on what they are:\n\n- [The Annotated S4](https://srush.github.io/annotated-s4/) dives deep into S4 and explained the inner workings of S4.\n- [A Visual Guide to Mamba and State Space Models](https://maartengrootendorst.substack.com/p/a-visual-guide-to-mamba-and-state#%C2%A7what-problem-does-it-attempt-to-solve) explained, visually, what mamba does.\n- [From Deep to Long Learning?](https://hazyresearch.stanford.edu/blog/2023-03-27-long-learning) where the authors themselves gave a good account of the development of H3 and Hyena.\n\nIn short, SSM is the following process that models state changes of a system\n\n$$\n\\begin{aligned}\n\\color{red}h_{t+1} &= {\\color{blue}A}\\cdot {\\color{red}{h_t}} + {\\color{green}{B\\cdot x_t}}\\\\\ny_t &= C\\cdot {\\color{red}{h_t}} + D\\cdot x_t \\\\\n\\text{where } &t := \\text{Step/Time}\\\\\n&h := \\text{Hidden state of the system} \\\\\n&x := \\text{Input to the system}\\\\\n&y := \\text{Output of the system} \\\\\n&A := \\text{A matrix determining how the state changes over }t \\\\\n&B := \\text{How input affects state} \\\\\n&C := \\text{How state affects output} \\\\\n&D := \\text{How input directly affects output}\n\\end{aligned}\n$$\n\n*(The above is only for discrete problem, similar formulation for continuous time; Also I‚Äôm neglecting the discretization step here for illustration purpose)*\n\nThere‚Äôre many properties to this model, and its usefulness is immense in the field of control, signal processing, time series application, etc.\n\n### History preserving\n\nJust by laying out the equations above does not guarantee a good compression of past history. The magic of SSMs comes from the theory of approximation theory, and in particular, orthogonal polynomials [@chihara1978]. Consider a scale value $x$ that varies with sequence $x$, i.e.,\n\n$$\nf = f(x)\n$$\n\nSuppose we want to approximate the history with a limited number of numbers $c_1, c_2, ... c_N$, one way to achieve it is to let each $c_n$ correspond to a ‚Äúbasis function‚Äù $\\phi_n$ and let\n\n$$\n\\hat f(x) = \\sum_{n=0}^N c_n\\phi_n(x)\n$$\n\nThe approximation error is therefore defined as\n\n$$\n\\begin{aligned}\n\\text{Error} &= ||f(x) - \\hat f(x)||^2_w = \\int_0^\\infty(f(x) - \\hat f(x))^2w(x)dx\\\\\n\\text{where } w & \\text{ defines a weighting function}\n\\end{aligned}\n$$\n\nThe weighting function is added to further generalize the discussion. Expanding the error, one obtains\n\n$$\n\\begin{aligned}\n\\mathcal{L} &= \\int_0^\\infty(f(x) - \\sum_{n=0}^Nc_n\\phi_n(x))^2w(x)dx \\\\\n&=\\int_0^\\infty\\left[f^2(x) + \\sum_{i=0}^Nc_i^2\\phi_i^2(x) - 2\\sum_{i\\neq j}c_ic_j\\phi_i(x)\\phi_j(x) - 2\\sum_{i=0}^Nc_i\\phi_i(x)f(x)\\right]w(x)dx \n\\end{aligned}\n$$\n\nIn practice, we don‚Äôt have to limit ourselves to integrating from $0$ to $\\infty$. This motivates defining the inner product in the function space\n\n$$\n\\langle f, g\\rangle_w := \\int_a^b f(x)g(x)w(x)dx\n$$\n\nThe approximation error can be further rewritten as\n\n$$\n\\mathcal{L} = \\langle f, f\\rangle + \\sum_{i}^N c_i^2\\langle\\phi_i, \\phi_i\\rangle + \\sum_{i \\neq j} c_ic_j\\langle \\phi_i, \\phi_j \\rangle - 2\\sum_{i}^Nc_i\\langle \\phi_i, f\\rangle\n$$\n\nNow, wouldn‚Äôt it be nice if we can eliminate some of the terms here? In fact, we can do exactly that with orthogonal polynomials$^2$. \n\n### Orthogonal Polynomials\n\nOrthogonal polynomials have the property that they are orthogonal to each other under the inner product definition, i.e.,\n\n$$\n\\langle \\phi_i, \\phi_j \\rangle = 0, \\forall i \\neq j\n$$\n\nOne example would be the Legendre polynomials, which is defined over $t \\in [-1, 1]$ with $w(t) = 1$, and is of the following forms\n\n$$\n\\begin{aligned}\n\\phi_0(x) &= 1\\\\\n\\phi_1(x) &= x\\\\\n\\phi_2(x) &= \\frac{1}{2}(3x^2 - 1)\\\\\n\\phi_3(x) &= \\frac12(5x^3 - 3x) \\\\\n...\\\\\n\\phi_n(x) &= \\frac{1}{2^nn!}\\frac{d^n}{dx^n}(x^2-1)^n\n\\end{aligned}\n$$\n\n*(note: there‚Äôs one unique set of OPs for any weight function for any given interval)*\n\nWith this property, the approximation error simplifies to (the 3rd term disappears)\n\n$$\n\\mathcal{L} = \\langle f, f\\rangle + \\sum_{i}^N c_i^2\\langle\\phi_i, \\phi_i\\rangle - 2\\sum_{i}^Nc_i\\langle \\phi_i, f\\rangle\n$$\n\nTo simplify it further, let‚Äôs define the constant in a meaningful way by taking the gradient of $\\mathcal{L}$ with respect to $c_i$ and set it to 0\n\n$$\n\\begin{aligned}\n\\nabla_{c_i}\\mathcal{L} &= 2c_i\\langle\\phi_i, \\phi_i\\rangle - 2\\langle\\phi_i, f\\rangle = 0 \\\\\n\\rightarrow c_i &=\\frac{\\langle\\phi_i, \\phi_i\\rangle}{\\langle\\phi_i, f\\rangle}\n\\end{aligned}\n$$\n\nThe above gives us a way to **combine a set of orthogonal polynomials to achieve minimum approximation error with respect to any function $f$.** \n\n### Make the weight time-dependent\n\nNow, what if the weighting function is also time dependent (changes over time)? Instead of $w(x)$, we have $w^{(t)}(x)$. This leads to a more complicated system where everything should be defined with respect to another time. To save you some time, this leads to the following equation for the ‚Äúminimization coefficient‚Äù\n\n$$\nc_n(t) = \\zeta(t)^{-\\frac{1}{2}}\\lambda_n \\int fp_n^{(t)}\\frac{w^{(t)}}{\\mathcal{\\chi}^{(t)}}\n$$\n\nwhere $p_n^{(t)}$ is the basis OP used in the system, $\\chi^{(t)}(x)$  is a scaling function to increase the generality of the argument, and $\\zeta(t)$ is a normalization term caused by $\\chi^{(t)}$, $w^{(t)}$ is the time-varying weighting function.\n\nThe difference between $t$ and $x$ is plotted below.\n\n![The difference between $t$ and $x$](diff_tx.png){.lightbox}\n\nNow, why on earth would we want to do this? We want to do this because we want to take the derivative of $c_n(t)$ with respect to $t$, and hopefully derive a SSM out of it. We can do exactly that\n\n$$\n\\begin{aligned}\\frac{d}{d t} c_n(t)= & \\zeta(t)^{-\\frac{1}{2}} \\lambda_n \\int f(x)\\left(\\frac{\\partial}{\\partial t} p_n(t, x)\\right) \\frac{\\omega}{\\chi}(t, x) \\mathrm{d} x \\\\& +\\int f(x)\\left(\\zeta^{-\\frac{1}{2}} \\lambda_n p_n(t, x)\\right)\\left(\\frac{\\partial}{\\partial t} \\frac{\\omega}{\\chi}(t, x)\\right) \\mathrm{d} x .\\end{aligned}\n$$\n\nThe beauty here is that $\\frac{\\partial}{\\partial t} p_n(t, x)$ and $\\frac{\\partial}{\\partial t} \\frac{\\omega}{\\chi}(t, x)$ can both be expressed in close-form and related back to themselves, which means we get an ODE out of this!\n\nOnce an ODE is obtained, we can structure it to form an SSM. **Note that the precise form of SSM depends on what weighting function/OP we use**. Different choice of weighting function represents how we weight the history.\n\nHere‚Äôs an example of the explicit form of SSM, for the Laguerre polynomials\n\n$$\n\\begin{aligned}\\frac{d}{d t} c(t) & =-A c(t)+B f(t) \\\\A & =\\left[\\begin{array}{cccc}\\frac{1+\\beta}{2} & 0 & \\ldots & 0 \\\\1 & \\frac{1+\\beta}{2} & \\ldots & 0 \\\\\\vdots & & \\ddots & \\\\1 & 1 & \\ldots & \\frac{1+\\beta}{2}\\end{array}\\right] \\\\B & =\\zeta^{-\\frac{1}{2}} \\cdot\\left[\\begin{array}{c}\\left(\\begin{array}{c}\\alpha \\\\0\\end{array}\\right) \\\\\\vdots \\\\\\left(\\begin{array}{c}N-1+\\alpha \\\\N-1\\end{array}\\right)\\end{array}\\right]\\end{aligned}\n$$\n\n### Problem?\n\nAfter defining the SSM in the continuous domain, one needs to discretize it and turn it into actual architecture and code. However, here I want to focus on 2 properties of SSM:\n\n::: {.callout-note}\nüí° 1.  The way that $\\color{red}{h_t}$ evolves by itself is **time invariant**\n2.  The way $\\color{brown}x_t$ affects $\\color{red}h_t$ is **additive**\n:::\n\n*(here I‚Äôm abusing notations by using $h_t$  and $c(t)$ interchangeably, and using  $x(t)$ for $f(t)$)*\n\nTo elaborate a bit, it means\n\n1. Without external input, this is a deterministic **linear** system (by design), and it‚Äôs much computationally easier to compute a linear system (i.e., convolution can be applied)\n2. The expressiveness of the system is bound by **linearity**\n\n \n\nTo see why the 2nd point is true, we can expand the system equation and obtain\n\n$$\n\\begin{aligned}\nh_{t+1} &= A h_{t} + Bx_{t} \\\\\n&= A^2h_{t-1} + ABx_{t-1} + Bx_{t} \\\\\n&= A^th_1 + A^{t-1}Bx_1 + A^{t-2}Bx_2 + ... + Bx_t\n\\\\\ny_{t} &= CA^th_1 + CA^{t-1}Bx_1 + CA^{t-2}Bx_2 + ... + CBx_t + Dx_t\n\\end{aligned}\n$$\n\nwhere it‚Äôs clear $x_{1:t}$ can only affect the system state $h$ in linear fashion, if $A$ and $B$ are fixed. Also, if $C$ and $D$ are fixed, $y_t$ is also affected by $x_{1:t}$ in a linear fashion. \n\n### Lack of non-linearity\n\nIt‚Äôs clear that such a system, while might be desirable for system control, is not ideal to express a complicated system that is **non-linear**. And it‚Äôs hard to argue that tasks like language modeling will be a linear system. In the most recent architectures (such as Mamba[@mamba]), this lack of expressiveness is addressed by \n\n1. replacing $B$ with $B(x_t)$\n2. replacing $C$ with $C(x_t)$\n3. replacing $D$ with $D(x_t)$\n\nTherefore, the governing equation is replaced by\n\n$$\n\\begin{aligned}\n\\color{red}h_{t+1} &= {\\color{blue}A}\\cdot {\\color{red}{h_t}} + {\\color{green}{B(x_t)\\cdot x_t}} \\\\\ny_t &= C(x_t)\\cdot {\\color{red}{h_t}} + D(x_t)\\cdot x_t\\\\\n\\end{aligned}\n$$\n\nwhere we can fold the input $x_t$ further into $B(x_t)$ and $D(x_t)$ without loss of generality, and obtain\n\n$$\n\\begin{aligned}\n\\color{red}h_{t+1} &= {\\color{blue}A}\\cdot {\\color{red}{h_t}} + {\\color{green}{B(x_t)}} \\\\\ny_t &= C(x_t)\\cdot {\\color{red}{h_t}} + D(x_t)\\\\\n\\end{aligned}\n$$\n\nSimilarly, we can expand the system again and obtain\n\n$$\n\\begin{aligned}\nh_{t+1} &= A^th_1 + A^{t-1}B(x_1) + A^{t-2}B(x_2) + ... + B(x_t)\n\\\\\ny_{t} &= C(x_t)A^{t-1}h_1 + C(x_t)A^{t-1}B(x_2) + C(x_t)A^{t-2}B(x_3) + ... + C(x_t)B(x_t) + D(x_t)\n\\end{aligned}\n$$\n\nAlthough this is technically a non-linear system as long as $B(x)$ or $C(x)$ or $D(x)$  is non-linear (for example, $B(x) = \\sin(x)$), **this modeling does not involve any sequence-crossing terms** like $B(x_1)\\cdot B(x_2)$. \n\nThis, in my opinion, hugely impacts the expressiveness of the system because the lack of sequence-cross in sequential modeling is similar to the lack of feature-crossing in tabular modeling, which will result in low sample efficiency.\n\n### Mamba to the rescue?\n\nIn the Mamba$^1$ paper, the authors (I‚Äôd argue partially) addressed this issue by:\n\n1. inserting a **convolution layer** before $x$, but I don‚Äôt see how that will fundamentally change the picture, because $x_i$ and $x_j$ will not interact with each other if their sequential distance is larger than the convolution kernel size.\n2. having **more layers** so $x_i$ and $x_j$ can interact with each other at a higher layer, but this does not change the fact that on a given layer, no cross-sequence interaction can happen.\n3. creating a gating layer so that **an explicit sequence-crossing layer** is added to the output $y_t$, i.e., \n    \n    $$\n    \\begin{aligned}\n    \\text{Instead of }\\quad y_t &= C(x_t)h_t + D(x_t) \\\\\n    \\text{Let}\\quad y_t&=\\sigma(x_{1:t})*(C(x_t)h_t + D(x_t))\n    \\end{aligned}\n    $$\n    \n    which technically makes sequence-crossing possible. This is similar to GRU and LSTM. The additional expressiveness of such a gating mechanism, one can argue, is much less that attention, because the gate itself does not contain sequence-crossing terms.\n    \n\n## Intuition\n\nBy turning the linear SSM into an non-linear SSM, and adding these 3 additional modifications, SSM seem to perform well across many modalities (arguments can be made on the details of some of these experiment results, such as the extremely low vocab size used in the induction head[@induction_heads] task). \n\nHowever, a pattern has emerged through the evolution of SSM models where we started off with a beautiful mathematical model (a unified compression scheme) that has theoretical guarantees on approximation error and implementation efficiency. However, due to our limited understanding of the expressiveness required for complicated domains like language, an iterative approach must be taken to move the trad-off point (illustrated below) towards one that **uses the minimum complexity to achieve the required expressiveness and completeness**.\n\nThe question then becomes ‚Äúis transformer already at the best trade-off point‚Äù? For most domains?\n\n![A visual illustration of the trade-off point](complexity_trade_off.png){.lightbox}\n\n\n~~I have no idea.~~ (I have some ideas now!)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"toc-depth":3,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":["sandstone"],"toc-location":"left","title-block-banner":true,"title":"SSM lacks sequence mixing","author":"Sean Zhang","date":"2024-03-02","date-modified":"2025-07-22","categories":["deep learning","sequence modeling","technical"],"image":"mamba.png","bibliography":["references.bib"],"link-citations":true,"description":"Every architecture contains some implicit trade-offs. My impression is SSMs are a good sequential architecture for modalities where interactions within a sequence matters less than a good compression of past states."},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}