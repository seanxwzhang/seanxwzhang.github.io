{"title":"A hitchhiker's guide to CUDA programming","markdown":{"yaml":{"title":"A hitchhiker's guide to CUDA programming","author":"Sean Zhang","date":"2025-03-05","categories":["CUDA","programming","technical"],"image":"warp_tiling_perf.png","description":"Walkthrough of writing a SGEMM kernel that achieves 95% of cuBLAS performance","bibliography":"references.bib","link-citations":true},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n*In this post I introduce the CUDA programming ecosystem by writing a kernel achieves 95% of cuBLAS‚Äôs SGEMM performance. I hope this helps those are just getting started in CUDA programming.*\n\n<!--more-->\n\n\nGEMM is the [corner stone of **modern machine learning**](https://petewarden.com/2015/04/20/why-gemm-is-at-the-heart-of-deep-learning/), many of us have been using high-level interfaces like `torch.matmul` or simply `t1 * t2` for granted without getting into the weeds (for a good reason!) and I was no different. \n\nHowever, machine learning isn‚Äôt always just about designing the best loss function. Given the [skyrocketing cost](https://www.jmlr.org/papers/volume24/23-0069/23-0069.pdf) of training and running large models, apply good system engineering principals to machine learning (or sometimes, [vice versa](https://tvm.apache.org/docs/how_to/tune_with_autotvm/index.html)) is of great interest.\n\nAs I was researching on various ways to make large ML model inference faster (which by itself deserves another post, stay tunedüôÇ), there‚Äôs no going around writing my own kernel. I spent the last couple weeks reviewing CUDA programming from the beginning, and wrote a SGEMM kernel that achieves **95% of cuBLAS** (Nvidia‚Äôs close-sourced **Cu**da **B**asic **L**inear **A**lgebra **S**ubroutine library).\n\n![Performance of hand-written SGEMM kernel, achieving 95.6% or CUBLAS performance at M=N=K=4096](warp_tiling_perf.png){.lightbox}\n\n# Starting from the basics\n\nFundamentally, programming in CUDA (like any other parallel programming paradigm) is about breaking down a problem into sub-problems in a way that **maximally utilize the hardware**, which, usually consists of answering the following questions (iteratively, for multiple times):\n\n1. What are the ways I can break down my problem?\n2. Given a particular way to break down the problem, what‚Äôs the bottleneck of my current solution? \n3. Can the bottleneck of the solution be improved if\n    1. I break down the problem in a different way?\n    2. I apply **hardware-specific** tricks to improve the performance?\n\nTo meaningfully answer these questions, one needs to understand the GPU hardware.\n\n## GPU Hardware\n\n![A simplified overview of GPU architecture, numbers are for modern (as of 2024) GPU\n**SM**: Streaming Multiprocessor, the first-level ‚Äúparallel component‚Äù in GPU, there‚Äôre 128 SM in a RTX4090\n**HBM**: High Bandwidth Memory, the ‚Äúglobal memory‚Äù/‚Äùdevice memory‚Äù of GPU, size is usually around 20GB~80GB. Communicating with this memory is considered extremely slow, on the order of 400-800 cycles per access.\n**L2 cache**: The cache for HBM, read and writes to HBM will be cached here. Communication with this memory is [much faster](https://stackoverflow.com/questions/66921433/is-memory-operation-for-l2-cache-significantly-faster-than-global-memory-for-nvi) (but Nvidia doesn‚Äôt disclose it publicly), a ballpark number for  is 2TB/s.\n**SMSP**: Streaming Multiprocessor Sub-Partition, introduced in the Ampere architecture, the second-level ‚Äúparallel component‚Äù in GPU, there‚Äôre 4 SMSP in an SM.\n**L1 cache**: Each SM has its own L1 cache (smaller), also used to cache read and writes to HBM. Read/write to this memory usually takes 20-40 cycles.\n**Shared Memory**: Each SM has a chunk of memory for all threads/processes running on all of its SMSP. Read/write to this memory usually takes 20-40 cycles as well.\n**Register File**: A chunk of registers local to each SMSP (and local to the threads running on it). Read/write to registers takes 1 cycle (as fast as you can get).\n**Warp Scheduler**: The scheduler that schedules which warp gets run on the SMSP at any given time, more on this later.\n**INT32**: The arithmetic ‚Äúcore‚Äù that performs 32-bit integer arithmetics. This core works on scalar values. \n**FP32**: The arithmetic ‚Äúcore‚Äù that performs 32-bit floating point arithmetics. This core works on scalar values.\n**Tensor Cores**: The arithmetic ‚Äúcore‚Äù that can both perform floating point arithmetics and integer arithmetics. This core works on a bunch of values at a time (hence the name tensor)](memory_hierarchy.png){.lightbox}\n\n\nThe above diagram hopefully depicts what a modern (Nvidia) GPU consists of. There‚Äôre a few things to note here about the hardware:\n\n1. Both L1 cache and L2 cache are ‚Äúinvisible‚Äù to programmers in the sense that you can‚Äôt directly manipulate them (but you can [set the persistence size of L2 cache](https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-l2-access-management), or [give hints](https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#cache-operators) to the machine w.r.t. the cache policy)\n2. L1 cache and Shared Memory actually the same physical memory, it‚Äôs up to the programmer to configure the size of each.\n3. The bandwidth between each component varies greatly from GPU to GPU, but generally\n    \n    $$\n    \\text{HBM} < \\text{L2} <\\text{L1} = \\text{Shared Memory} < \\text{Register File}\n    $$\n    \n4. Different GPU have different configurations of cores\n5. Tensor core [does not support fp32 operations](https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#wmma-type-sizes)\n\nWhat we can immediately conclude from this is that **we want to avoid communication with HBM by caching data aggressively**.\n\n### Memory Hierarchy\n\nLet‚Äôs take a closer look at the memories in a GPU. The following diagram demonstrates Nvidia GPU‚Äôs memory hierarchy, notice how each SMSP has its own registers, SMSPs in the same SM shares the the same shared memory and L1 cache. This is why thread blocks are assigned to SM, not SMSP.\n\n![Memory hierarchy of A100](A100_memory.png){.lightbox}\n\n## GPU Execution Model\n\nAnother important aspect of the GPU hardware is to understand how it executes. \n\n### SIMT\n\nThe execution model follows a [SIMT](https://en.wikipedia.org/wiki/Single_instruction,_multiple_threads#:~:text=Single%20instruction%2C%20multiple%20threads%20(SIMT,SIMD)%20is%20combined%20with%20multithreading.) model (as opposed to [SIMD](https://en.wikipedia.org/wiki/Single_instruction,_multiple_data) or other forms of parallel computing model), this roughly means **every line of code you write gets executed on multiple threads**, in parallel, as opposed to explicitly telling the program how to parallelize the workload.\n\nThe following examples demonstrate 2 cases where you explicitly tell the program how to do the parallelization.\n\n```python\nfrom multiprocessing import Pool\n\ndef f(x):\n\treturn x*x\n\nwith Pool(processes=4) as pool:\n\tresult = pool.map(f, range(10))\n```\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <omp.h>\n\nint f(int x) {\n    return x * x;\n}\n\nint main() {\n    const int num_elements = 10;\n    std::vector<int> result(num_elements);\n\n    // Parallelize the loop with OpenMP\n    #pragma omp parallel for\n    for (int i = 0; i < num_elements; ++i) {\n        result[i] = f(i);\n    }\n}\n```\n\nThe following example demonstrates CUDA‚Äôs SMIT model, just read the highlighted part.\n\n```cpp\n#include <iostream>\n#include <vector>\n\n// This is the device code, runs in GPU\n**// IMPORTANT: Every thread executes the same program, you don't have for loops**\n__global__ void square(int *d_result, int num_elements) {\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i < num_elements) {\n        d_result[i] = i * i;\n    }\n}\n\n// This is the host code, runs in CPU\nint main() {\n    const int num_elements = 10;\n    std::vector<int> result(num_elements);\n\n    int *d_result;\n    cudaMalloc((void**)&d_result, num_elements * sizeof(int));\n\n    int blockSize = 256;\n    int numBlocks = (num_elements + blockSize - 1) / blockSize;\n    **// This launchs the CUDA kernel on the GPU\n    // NOTE: this is non-blocking**\n    square<<<numBlocks, blockSize>>>(d_result, num_elements);\n\n    cudaMemcpy(result.data(), d_result, num_elements * sizeof(int), cudaMemcpyDeviceToHost);\n\n    cudaFree(d_result);\n\n    // Print the result\n    for (int i = 0; i < num_elements; ++i) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n\n```\n\nA reasonable question to ask is, if every thread is executing the same code, how is it going to solve any useful task? The subtlety here is that although each thread is executing the same code, **the data pointed by addresses in each thread is different**.\n\n### Execution Hierarchy\n\nGiven the hardware hierarchy above, CUDA provides an execution hierarchy as follows\n\n![Simplified CUDA execution hierarchy](execution_hierarchy.png){.lightbox}\n\nIn CUDA, the execution of every problem/kernel program is represented as **a set of thread blocks (called the grid)**. The way this division of the problem is done is managed by the programmer, for example, to do matrix multiplication of two 4096 * 4096 matrix, one can choose to assign the calculation of every 128 * 128 output to one block, effectively giving 1024 blocks (4096^2 / 128^2).\n\nEach block is assigned to **one and only one SM** (streaming multiprocessor), but multiple blocks can be assigned to one SM. The exact block-to-block distribution policy is not made public by Nvidia, but according to [3], the default distribution policy is **round-robin** (provided that there‚Äôs only one stream). Also, because each block will take up resources (register files, shared memory), the number of blocks (also called **occupancy**) that can be assigned to a single SM is limited by each block‚Äôs resource usage. As we‚Äôll see later, **we want higher occupancy in order to hide memory latency.**\n\nAnother important concept in CUDA is called a **warp**, which basically means a group of 32 threads. A block can contain a configurable number of warps. The idea of warp is important because it‚Äôs the smallest scheduling primitive in CUDA.\n\n![Warp is the smallest scheduling primitive, an SMSP can only execute instructions for one warp at a time. The ‚Äú.add‚Äù here simply symbolizes an addition operation carried out by each warp.](warp.png){.lightbox}\n\n\n![Every thread in a warp always executes the same thing (mostly, thread divergence can happen, sometimes intentionally by the programmer, in which case the execution is serialized by masking one group, execute; then masking another group, execute. This usually means degraded performance)](thread.png){.lightbox}\n\nEvery thread in a warp always executes the same thing (mostly, thread divergence can happen, sometimes intentionally by the programmer, in which case the execution is serialized by masking one group, execute; then masking another group, execute. This usually means degraded performance)\n\n### Latency Hiding\n\nThe left image above shows how different warps execute sequentially, but they are all doing arithmetic operations (addition), which is only part of the picture. Let‚Äôs see what happens if we  try to depict a more realistic picture, i.e., we should load data from/to memory before doing addition.\n\n![A more realistic depiction of different warp carrying out memory loading before doing addition. ](latency_hiding_1.png){.lightbox}\n\nAn important realization is that **memory operation takes much longer time (~400 cycles)** than arithmetic operations (~20 cycles [4]), so if there‚Äôs not enough warps on an SM that the scheduler can issue instructions to (because all of them are waiting for the memory load to complete, as all of their next operation depends on this), there will be cycles where no instructions are issued by the warp scheduler. This is very bad for performance because we are essentially wasting hardwares.\n\nNow consider what happens if we have more warps\n\n![More warps hide memory latency, no wasted cycles!](latency_hiding_2.png){.lightbox}\n\nAs more warps are assigned to an SM, the parallelism allows us to hide the latency of memory load, because we are always doing some work. Note that the parallelism can come from more warps per block, or more blocks. The difference that makes is that warps from different blocks can‚Äôt talk to each other via shared memory.\n\n### Occupancy\n\nOccupancy measures the ratio between the number of active warps on an SM and the theoretical limit, i.e.,\n\n$$\n\\text{Occupancy} = \\frac{\\text{Active concurrent warps}}{\\text{Theoretical limit of number of active warps in an SM}} \n$$\n\nUsually, **the higher the occupancy, the more opportunity that the SM scheduler has in terms of hiding latency**. However, importantly, **this does not universally lead to more efficient program because more warps means smaller register usage per warp, and register access is much faster than shared memory access**. More on this can be found on [@nvidia_lower_occupancy].\n\nTo get the numerator, we have to profile the kernel and obtained from measuring the warp scheduler‚Äôs issuance statistics. Usually this done via Nvidia‚Äôs [nsight compute](https://developer.nvidia.com/nsight-compute) (in the old days it‚Äôs nvprof, but that‚Äôs long gone).\n\nThe denominator is fixed once the programmer determines the kernel‚Äôs launch configuration (block size, grid size, etc.), **at compile time.** Note that the theoretical limit has another upper bound regardless of your launch configuration, i.e., the hardware-defined maximum number of resident warps per SM (look for the `Maximum number of resident warps per SM` term on [@nvidia_cuda_guide]). The latest number for Hopper architecture is 64.\n\nAt compile time, the denominator is determined by mainly 3 resources as shown below\n\n|  | Block Resource Required | Limiting Factor |\n| --- | --- | --- |\n| 1 | Shared Memory per Block | Shared Memory per SM |\n| 2 | # Threads per block | # Threads limit per SM |\n| 3 | # Register usage per thread | Register File per SM |\n\nConcretely, the number of blocks that can be assigned to an SM is determined by taking the minimum of $\\frac{\\text{Total Resource}}{\\text{Resources Required per Block}}$ for all these 3 resources, meaning\n\n$$\n\\begin{gathered}\\text { Theoretical Limit }=\\\\\\min\\left(\\lfloor\\frac{\\text{SHM/ SM}}{\\text{SHM / block}}\\cdot\\text{Warp/block}\\rfloor, \\lfloor\\frac{\\text{MaxThreads/SM}}{\\text{WarpSize}}\\rfloor, \\lfloor\\frac{\\text{Reg Size/SM}}{\\text{Reg/thread} \\cdot \\text{WarpSize}}\\rfloor\\right)\\end{gathered}\n\n$$\n\nnotations are as follows\n\n- MaxThreads : the maximum number of threads an SM can take\n- SHM: shared memory in bytes\n- Warp/Block: number of warps per block, or blockSize/warpSize\n- WarpSize: number of threads per warp, always 32 in all Nvidia GPU so far\n- Reg/thread: register usage per thread\n\nDue to the importance of occupancy, there both [official](https://developer.nvidia.com/nsight-compute) and [unofficial](https://xmartlabs.github.io/cuda-calculator/) tools to calculate the theoretical limit.\n\n![theoretical `#warps` depending on different launch configuration/resource usage, from [CUDA Occupancy Calculator (xmartlabs.github.io)](https://xmartlabs.github.io/cuda-calculator/)](occupancy.png){.lightbox}\n\nNote how the `#warps` look like step change functions as the resource usage changes. This is because the $\\lfloor \\quad \\rfloor$ operation we did, as  `#warps` needs to be an integer. The implication is that for a given level of occupancy, there‚Äôs a range of resource allocation we can give to each thread without affecting occupancy.\n\n# Matrix Multiplication\n\nNow that we covered the basics, let‚Äôs try to do a matrix multiplication. We are going to demonstrate various CUDA techniques by doing this.\n\n1. Naive\n2. Shared memory caching\n3. Thread tiling\n4. Thread tiling + vectorized access + coalesced access\n5. Thread tiling+ vectorized access + coalesced access +  prefetching/pipelining\n6. Thread tiling+ vectorized access + coalesced access +  prefetching/pipelining + swizzle\n7. Warp tiling + vectorized access\n8. ~~Warp tiling + vectorized access + memory access swizzle~~\n9. Warp tiling + vectorized access + k-split\n\n## Naive\n\nThe naive algorithm to solve the matrix multiplication is demonstrated by both the mathematical definition as well as the diagram below\n\n![Naive matmul](naive_matmul.png){.lightbox}\n\n$$\n\\begin{gathered}C_{ij}  = \\sum_{k=1}^{K}A_{ik}B_{kj}\\end{gathered}\n$$\n\nThe above shows the most essential operation in matmul, but in practice, people usually do \n\n$$\nC = \\alpha\\cdot(A \\times B) + \\beta\\cdot C\n$$\n\nwhich is a multiply-accumulation (MAC) operation with 2 scaling factors.\n\nThe following code shows the implementation of the naive matmul operation.\n\n```cpp\n#include <cuda_runtime.h>\n\n#define DIV_CEIL(M, N) int(((M) + (N)-1) / (N))\n\n__global__ void sgemm_naive(int M, int N, int K, float alpha, const float *A,\n                            const float *B, float beta, float *C) {\n  const uint x = blockIdx.x * blockDim.x + threadIdx.x;\n  const uint y = blockIdx.y * blockDim.y + threadIdx.y;\n\n  if (x < M && y < N) {\n    float tmp = 0.0;\n    for (int i = 0; i < K; ++i) {\n      tmp += A[x * K + i] * B[i * N + y];\n    }\n    C[x * N + y] = alpha * tmp + beta * C[x * N + y];\n  }\n}\n\nint main(int M, int N, int K) {\n...\n\ndim3 blockDim(32, 32);\ndim3 gridDim(DIV_CEIL(M, 32), DIV_CEIL(N, 32));\nsgemm_naive<<<gridDim, blockDim>>>(M, N, K)\n\n...\n}\n```\n\nRunning the above code gives us the following poor performance.\n\n![Naive matmul performance](naive_matmul_perf.png){.lightbox}\n\nTo understand why the performance is poor, consider the [arithmetic intensity](https://crd.lbl.gov/divisions/amcr/computer-science-amcr/par/research/roofline/introduction/#:~:text=Arithmetic%20Intensity%20is%20the%20ratio,ndependent%20of%20the%20vector%20size.) of this kernel:\n\n$$\n\\begin{gathered}\n\\text{Arithmetic Intensity} = \\frac{\\text{Bytes Computed}}{\\text{Bytes I/IO}}\\\\\n= \\frac{1(C_{ij}) \\times 4 (\\text{bytes per float})}{(M(A_{i:})+ N(B_{:j}))\\times 4(\\text{bytes per float})}\\\\\n=\\frac{1}{2K}\n\\end{gathered}\n$$\n\nwhich is very low. This is saying, for every $2K$ elements read, we are only calculating $1$ element from the memory read. This is bad because memory read is expensive, and we ideally want to do more work on the read data than just computing 1 number.\n\nThis can be verified by profiling this kernel with nsight compute and checking the roofline model:\n\n![As can be seen, the arithmetic intensity of this kernel is too low, resulting 6% of theoretical fp32 performance achieved](naive_matmul_roofline.png){.lightbox}\n\nNot only is the arithmetic intensity low, attention should also be paid to the 2 purple lines above\n\n```cpp\ntmp += A[x * K + i] * B[i * N + y];\n...\n    C[x * N + y] = alpha * tmp + beta * C[x * N + y];\n```\n\nThe first line reads data from the device/global memory, without touching the shared memory at all, and the second line read from and write to device/global memory. Both lines are going to be very slow in GPU context. This will result in a very high **throughput**, but very bad performance. This is an example showing that **maximizing throughput should never be the only optimization goal.**\n\n![This naive kernel achieves full throughput in both memory and compute! but it‚Äôs very bad algorithm](full_throughput.png){.lightbox}\n\n## Shared Memory Caching\n\nSince we are not using shared memory, let‚Äôs try to resolve this first by using shared memory to cache the data before doing calculation, which results in the following algorithm.\n\n![Naive implementation + smem cache\nBM and BN are parameters determining how we partition the C matrix by blocks\nBK is the parameter determining how much data we load from global memory to shared memory every time. We have to have this BK parameter because shared memory is very limited, a whole BMxK block of data usually doesn‚Äôt fit](smem_matmul.png)\n\nAdding smem access gives us the following performance, which is not that impressive. This is because adding smem access does not change the arithmetic intensity. The reason we still see some benefit in small matrix sizes is likely due to the fact that it increases L2 cache hit rate and the memory access is more coalesced as we are loading larger chunk of memories.\n\n![Shared memory cached matmul performance](smem_matmul_perf.png){.lightbox}\n\n- Smem access kernel\n\n    ```cpp\n    template<const int BLOCK_SIZE>\n    __global__ void sgemm_smem(int M, int N, int K, float alpha, float *A, float *B, float beta, float *C) {\n        int bx = blockIdx.x;\n        int by = blockIdx.y;\n    \n        const int BM = BLOCK_SIZE;\n        const int BN = BLOCK_SIZE;\n        const int BK = BLOCK_SIZE;\n    \n        int tx = threadIdx.x % BN;\n        int ty = threadIdx.x / BN;\n    \n        __shared__ float As[BM * BK];\n        __shared__ float Bs[BK * BN];\n    \n        A = &A[by * BM * K];\n        B = &B[bx * BN];\n        C = &C[by * BM * N + bx * BN];\n    \n        float tmp = 0.;\n        for (int k = 0; k < K; k += BK) {\n            As[ty * BK + tx] = A[ty * K + tx];\n            Bs[ty * BN + tx] = B[ty * N + tx];\n            __syncthreads();\n            A += BK;\n            B += BK * N;\n            for (int i = 0; i < BK; i++) {\n                tmp += As[ty * BK + i] * Bs[i * BN + tx];\n            }\n            __syncthreads();\n        }\n        C[ty * N + tx] = alpha * tmp + beta * C[ty * N + tx];\n    }\n    ```\n    \n\n## Thread Tiling\n\nNow let‚Äôs try to improve the arithmetic intensity. We can do this because for each $A_{i:}$  we read, we can theoretically calculate the entire row of $C_{i:}$, provided that we have the corresponding columns of $B$ read in. So as opposed to calculating a single element in $C$, we can theoretically calculate a whole row in $C$. But that‚Äôs too extreme, in practice, we can do something called thread tiling:\n\n![Thread tiling + Shared memory access](smem_thread_tile_matmul.png){.lightbox}\n\nThe immediate benefit can be seen by calculating the arithmetic intensity again:\n\n$$\n\\begin{gathered}\n\\text{Arithmetic Intensity} = \\frac{\\text{Bytes Computed}}{\\text{Bytes I/IO}}\\\\\n= \\frac{TM \\times TN \\times 4 (\\text{bytes per float})}{(K\\times TN +  K\\times TM)\\times 4(\\text{bytes per float})}\\\\\n=\\frac{TM\\times TN}{K\\times(TM + TN)}\n\\end{gathered}\n$$\n\nAnd therefore the arithmetic intensity improvement is\n\n$$\n\\text{Improvement} = \\frac{\\frac{TM\\cdot TN}{K\\cdot(TM + TN)}}{\\frac{1}{2K}} = \\frac{2}{1/TM + 1/TN}\n$$\n\nfor squared matrices, this can be further simplified\n\n$$\n\\text{Improvement} = \\frac{2}{2/TM} = TM\n$$\n\nwhich means the arithmetic intensity improvement is proportional to the size of the thread tiling. Note that we can‚Äôt arbitrarily make $TM$ as large as we want for the following reason:\n\n1. A $LM/LN$ too large means less threads/warps, which causes occupancy to drop, therefore hinders performance\n2. A $LM/LN$ too large means more register usage per warp, which also causes occupancy to drop\n3. A $LM/LN$ too large can even cause register to overflow to local storage (on global memory), thereby significantly degrading performance\n\nWithout much tuning, we are able to get the following performance with thread tiling:\n\n![Thread tiling performance](thread_tiling_perf.png){.lightbox}\n\nNow we are talking üôÇ\n\n- Thread tiling code\n    \n    ```cpp\n    #pragma once\n    \n    #include <cuda_runtime.h>\n    #include <cublas_v2.h>\n    #include <stdio.h>\n    #include <stdlib.h>\n    \n    template<const int BM,\n            const int BN,\n            const int BK,\n            const int TM,\n            const int TN>\n    __global__ void mysgemm_v4(int M, int N, int K, float alpha, float *A, float *B, float beta, float *C) {\n        int bx = blockIdx.x;\n        int by = blockIdx.y;\n    \n        int block_row_thread = BN / TN;\n        int block_col_thread = BM / TM;\n        int thread_num = block_row_thread * block_col_thread;\n    \n        int tx = (threadIdx.x % block_row_thread) * TN;\n        int ty = (threadIdx.x / block_row_thread) * TM;\n    \n        __shared__ float As[BM * BK];\n        __shared__ float Bs[BK * BN];\n    \n        A = &A[by * BM * K];\n        B = &B[bx * BN];\n        C = &C[by * BM * N + bx * BN];\n    \n        int a_tile_row = threadIdx.x / BK;\n        int a_tile_col = threadIdx.x % BK;\n        int a_tile_stride = thread_num / BK;\n    \n        int b_tile_row = threadIdx.x / BN;\n        int b_tile_col = threadIdx.x % BN;\n        int b_tile_stride = thread_num / BN;\n    \n        float tmp[TM][TN] = {0.};\n        for (int k = 0; k < K; k += BK) {\n            for (int i = 0; i < BM; i += a_tile_stride) {\n                As[(a_tile_row + i) * BK + a_tile_col] = A[(a_tile_row + i) * K + a_tile_col];\n            }\n            for (int i = 0; i < BK; i += b_tile_stride) {\n                Bs[(b_tile_row + i) * BN + b_tile_col] = B[(b_tile_row + i) * N + b_tile_col];\n            }\n            __syncthreads();\n            A += BK;\n            B += BK * N;\n            for (int i = 0; i < BK; i++) {\n                for (int j = 0; j < TM; j++) {\n                    for (int l = 0; l < TN; l++)\n                        tmp[j][l] += As[(ty + j) * BK + i] * Bs[tx + l + i * BN];\n                }\n            }\n            __syncthreads();\n        }\n        for (int j = 0; j < TM; j++) {\n            for (int l = 0; l < TN; l++)\n                C[(ty + j) * N + tx + l] = alpha * tmp[j][l] + beta * C[(ty + j) * N + tx + l];\n        }\n    }\n    ```\n    \n\n## Vectorized Access & Coalesced Access\n\nOne of the common optimization method is [@nvidia_vectorized_memory], which is basically saying instead of getting a single float at a time, we want to get 2, or 4 floats at a time. This improves performance because\n\n- In CUDA, all device/global memory access is done via 32-, 64-, or 128-byte memory transactions\n- For threads within a warp accessing global memories, their access will be grouped together in 32-, 64-, or 128-byte memory transactions, after data is read from memory, data for the warp will be distributed onto individual threads\n- If we are getting 4 consecutive 32-byte memory (8 floats) from a warp, we are issuing 4 instructions (the `LD` instruction); but if we are getting one 128-byte from a warp, we are only issuing 1 instruction (the `LD.128` instruction). There‚Äôre 2 benefits:\n    - Smaller number of instructions ‚áí instruction cache hit rate will improve\n    - Despite that the issuance of load instruction itself takes small number of cycles (majority of time for a `LD` operation is spent on waiting, and that‚Äôs usually hidden via high occupancy), there‚Äôre still small benefit of the reduced number of instruction issuance.\n    \n\nThe following graph demonstrates the benefit of vectorized loading.\n\n![Data movement rate comparison between different size of element read per thread](vectorization.png){.lightbox}\n\nThe actual implementation in CUDA is actually simple, instead of dealing with `float` type, just deal with `float4` , and the compiler will compile it to the correct instruction.\n\nBeside vectorizing global memory access, we can also notice that there‚Äôs a non-coalesced memory access from shared memory when actually performing the per-thread multiplication. Consider the 2 outlined blocks of data that currently resides in shared memory:\n\n1. the access to the red block from B is coalesced, because B is row-majored\n2. the access to the red block from A is **not coalesced**, also because A is row-majored\n\nNote that it doesn‚Äôt matter how we choose iterate within the thread tile, we can read in a sub-row from A and a sub-column from B and one of them would still be **non-coalesced**.\n\n![Coalesced access](coalesced_access.png){.lightbox}\n\nTo solve this, we can simply adopt a transposed shared memory layout.\n\n![Transpose the shared memory layout can result in coalesced read into registers (but non-coalesced write into shared memory, which can be handled via pipelining).\nHere the region marked by t1 and t2 are indicating what data each thread is responsible of loading from global memory and writing to shared memory. In practice, a thread can handle less than a row in the sub-block of global memory.](transpose_memory.png){.lightbox}\n\nCombining the vectorization load and coalesced access, we get the following performance\n\n![Approaching 80% CuBLAS performance with vectorization and coalesced access](coalesced_perf.png){.lightbox}\n\n- code\n    \n    ```cpp\n    #pragma once\n    \n    #include <cuda_runtime.h>\n    #include <cublas_v2.h>\n    #include <stdio.h>\n    #include <stdlib.h>\n    \n    #define OFFSET(row, col, ld) ((row)*(ld)+(col))\n    #ifndef FETCH_FLOAT4\n    #define FETCH_FLOAT4(pointer) (reinterpret_cast<float4*>(&(pointer))[0])\n    #endif\n    \n    template<const int BM,\n            const int BN,\n            const int BK,\n            const int TM,\n            const int TN>\n    __global__ void sgemm_tt_(int M, int N, int K, float alpha, float *A, float *B, float beta, float *C) {\n        int bx = blockIdx.x;\n        int by = blockIdx.y;\n    \n        const int block_row_thread = BN / TN;\n        const int block_col_thread = BM / TM;\n        const int thread_num = block_row_thread * block_col_thread;\n    \n        int tx = (threadIdx.x % block_row_thread) * TN;\n        int ty = (threadIdx.x / block_row_thread) * TM;\n    \n        __shared__ float As[BK * BM];\n        __shared__ float Bs[BK * BN];\n    \n        const int ldg_a_num = BK * BM / thread_num / 4; \n        const int ldg_b_num = BK * BN / thread_num / 4;\n    \n        int a_tile_row = threadIdx.x / (BK / 4);\n        int a_tile_col = threadIdx.x % (BK / 4) * 4;\n        int a_tile_stride = BM / ldg_a_num; \n    \n        int b_tile_row = threadIdx.x / (BN / 4);\n        int b_tile_col = threadIdx.x % (BN / 4) * 4;\n        int b_tile_stride = BK / ldg_b_num;\n    \n        float accum[TM][TN] = {0.};\n    \n        float ldg_a_reg[4 * ldg_a_num] = {0.};\n    \n        float a_frag[TM];\n        float b_frag[TN];\n    \n        A = &A[by * BM * K];\n        B = &B[bx * BN];\n        C = &C[by * BM * N + bx * BN];\n    \n        for (int k = 0; k < K; k += BK) {\n            for (int i = 0; i < BM; i += a_tile_stride) {\n                int ldg_index = i / a_tile_stride * 4; \n                FETCH_FLOAT4(ldg_a_reg[ldg_index]) =\n                        FETCH_FLOAT4(A[OFFSET(a_tile_row + i, a_tile_col, K)]);\n                As[OFFSET(a_tile_col, i + a_tile_row, BM)] = ldg_a_reg[ldg_index];\n                As[OFFSET(a_tile_col + 1, i + a_tile_row, BM)] = ldg_a_reg[ldg_index + 1];\n                As[OFFSET(a_tile_col + 2, i + a_tile_row, BM)] = ldg_a_reg[ldg_index + 2];\n                As[OFFSET(a_tile_col + 3, i + a_tile_row, BM)] = ldg_a_reg[ldg_index + 3];\n            }\n            for (int i = 0; i < BK; i += b_tile_stride) {\n                FETCH_FLOAT4(Bs[OFFSET(b_tile_row + i, b_tile_col, BN)]) =\n                        FETCH_FLOAT4(B[OFFSET(b_tile_row + i, b_tile_col, N)]);\n            }\n            __syncthreads();\n            A += BK;\n            B += BK * N;\n            for (int i = 0; i < BK; i++) {\n                for (int m = 0; m < TM; m += 4) {\n                    FETCH_FLOAT4(a_frag[m]) = FETCH_FLOAT4(As[OFFSET(i, ty + m, BM)]);\n                }\n                for (int n = 0; n < TN; n += 4) {\n                    FETCH_FLOAT4(b_frag[n]) = FETCH_FLOAT4(Bs[OFFSET(i, tx + n, BN)]);\n                }\n                for (int m = 0; m < TM; m++) {\n                    for (int n = 0; n < TN; n++) {\n                        accum[m][n] += a_frag[m] * b_frag[n];\n                    }\n                }\n            }\n            __syncthreads();\n        }\n        for (int m = 0; m < TM; m++) {\n            for (int n = 0; n < TN; n += 4) {\n                float4 ctmp = FETCH_FLOAT4(C[OFFSET(ty + m, tx + n, N)]);\n                ctmp.x = alpha * accum[m][n] + beta * ctmp.x;\n                ctmp.y = alpha * accum[m][n + 1] + beta * ctmp.y;\n                ctmp.z = alpha * accum[m][n + 2] + beta * ctmp.z;\n                ctmp.w = alpha * accum[m][n + 3] + beta * ctmp.w;\n                FETCH_FLOAT4(C[OFFSET(ty + m, tx + n, N)]) = ctmp;\n            }\n        }\n    }\n    ```\n    \n\n## Data prefetching/pipelining\n\nIn CUDA, from the point of view of the warp scheduler, most instructions are ‚Äúasynchronous‚Äù in the sense that they all take some cycles to finish. \n\nFor example\n\n```cpp\nld.s32 r1, [j];\nld.s32 r2, [k];\nadd.s32 r3, r1, r2;\nst.s32 [i], r3;\n```\n\nIn this PTX code (PTX is the pseudo-assembly language that C++ CUDA code compiles to), let‚Äôs say that the warp scheduler schedules the first `line ld.s32 r1, [j];`, the data from address `[j]` will not become ready in the next cycle (and won‚Äôt be for around 400 cycles if we are loading from global memory), so the scheduler simply fires away and issues the `ld.s32 r2, [k];` without waiting for `r1`  to be loaded.\n\nBut when the scheduler sees `add.s32 r3, r1, r2;`  there‚Äôs clearly a dependency on `r1` and `r2` to be available.  So this warp will not be **eligible** for executing the next instruction, and we call it a **stalled warp**. Instead the scheduler will look at other warps to see if it schedule them. If no warps are eligible for execution, we‚Äôll be wasting execution units, and the number of active warps we talked about in the previous section will reduced, causing a lower occupancy.\n\nWith this in mind, we can devise a new way to optimize our kernel by prefetching the data and overlapping the fetch with computation. Here‚Äôs what I mean\n\n![Prefetching with 2 stages](pipeline_matmul.png){.lightbox}\n\nOf course we don‚Äôt have to limit ourselves to 2 stages, and in fact, modern CUDA has a nice [`pipeline` interface](https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#asynchronous-data-copies-using-cuda-pipeline) to work with for multi-stage loading. \n\n![Prefetching with 3 stages](pipeline_matmul_3_stages.png){.lightbox}\n\nNote that we can also do prefetching for the loading from smem to register step.\n\nTo implement prefetching is actually pretty simple, because the warp scheduler implements it for us. All we need to do is double the size of shared memory and register size and keep an index that points to the current stage of computation.\n\nWith prefetching, this is the result\n\n![Performance with prefetching](pipeline_matmul_perf.png){.lightbox}\n\n- Code\n    \n    ```cpp\n    #pragma once\n    \n    #include <cuda_runtime.h>\n    #include <cublas_v2.h>\n    #include <stdio.h>\n    #include <stdlib.h>\n    \n    #ifndef FETCH_FLOAT4\n    #define FETCH_FLOAT4(pointer) (reinterpret_cast<float4 *>(&(pointer))[0])\n    #endif\n    #ifndef DIV_UP\n    #define DIV_UP(m, n) ((m + n - 1) / n)\n    #endif\n    #define GROUP_SIZE 8\n    #define WARP_SIZE 32\n    \n    namespace kernel9 {\n    \n    template<int BM, int BN, int BK>\n    __device__ __forceinline__ void gmem_to_smem(float *A, float *B, float smem_a[][BK][BM], float smem_b[][BK][BN], float ldreg_a[][4], float ldreg_b[][4], int a_smem_rounds, int a_stride, int a_smem_x, int a_smem_y, int b_smem_rounds, int b_stride, int b_smem_y, int b_smem_x, int phase)\n    {\n    #pragma unroll // A: global -> reg buffer\n        for (int i = 0; i < a_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_a[i]) = FETCH_FLOAT4(A[i * a_stride]);\n            smem_a[phase][a_smem_x][a_smem_y + i * a_stride] = ldreg_a[i][0];\n            smem_a[phase][a_smem_x + 1][a_smem_y + i * a_stride] = ldreg_a[i][1];\n            smem_a[phase][a_smem_x + 2][a_smem_y + i * a_stride] = ldreg_a[i][2];\n            smem_a[phase][a_smem_x + 3][a_smem_y + i * a_stride] = ldreg_a[i][3];\n        }\n    #pragma unroll // B: global -> reg buffer\n        for (int i = 0; i < b_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_b[i]) = FETCH_FLOAT4(B[i * b_stride]);\n            FETCH_FLOAT4(smem_b[phase][b_smem_y][b_smem_x + i * b_stride]) = FETCH_FLOAT4(ldreg_b[i]);\n        }\n    }\n    \n    __device__ __forceinline__ void gmem_to_reg(float *A, float *B, float ldreg_a[][4], float ldreg_b[][4], int a_smem_rounds, int a_stride, int b_smem_rounds, int b_stride)\n    {\n    #pragma unroll // A: global -> reg buffer\n        for (int i = 0; i < a_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_a[i]) = FETCH_FLOAT4(A[i * a_stride]);\n        }\n    #pragma unroll // B: global -> reg buffer\n        for (int i = 0; i < b_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_b[i]) = FETCH_FLOAT4(B[i * b_stride]);\n        }\n    }\n    \n    template<int BM, int BN, int BK>\n    __device__ __forceinline__ void reg_to_smem(float smem_a[][BK][BM], float smem_b[][BK][BN], float ldreg_a[][4], float ldreg_b[][4], int a_smem_rounds, int a_stride, int a_smem_x, int a_smem_y, int b_smem_rounds, int b_stride, int b_smem_y, int b_smem_x, int phase)\n    {\n    #pragma unroll // A: reg buffer -> smem\n        for (int i = 0; i < a_smem_rounds; ++i)\n        { // note that this is uncoalesce memory write, and only 4 floats * 4 byte/float = 16 bytes per write\n            smem_a[phase][a_smem_x][a_smem_y + i * a_stride] = ldreg_a[i][0];\n            smem_a[phase][a_smem_x + 1][a_smem_y + i * a_stride] = ldreg_a[i][1];\n            smem_a[phase][a_smem_x + 2][a_smem_y + i * a_stride] = ldreg_a[i][2];\n            smem_a[phase][a_smem_x + 3][a_smem_y + i * a_stride] = ldreg_a[i][3];\n        }\n    #pragma unroll // B: reg buffer -> smem\n        for (int i = 0; i < b_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(smem_b[phase][b_smem_y][b_smem_x + i * b_stride]) = FETCH_FLOAT4(ldreg_b[i]);\n        }\n    }\n    \n    template<int BM, int BN, int BK, int TM, int TN>\n    __device__ __forceinline__ void smem_to_frag(float frag_a[][TM], float frag_b[][TN], float smem_a[][BK][BM], float smem_b[][BK][BN], int frag_phase, int smem_phase, int bk)\n    {\n        // int swizzel_id = (threadIdx.x / 4) % 2;\n    #pragma unroll \n        for (int i = 0; i < TM; i += 4)\n        {\n            // int swizzel_i = ((i / 4) ^ swizzel_id) * 4;\n            FETCH_FLOAT4(frag_a[frag_phase][i]) = FETCH_FLOAT4(smem_a[smem_phase][bk][threadIdx.y * TM + i]);\n        }\n    #pragma unroll\n        for (int i = 0; i < TN; i += 4)\n        {\n            // int swizzel_i = ((i / 4) ^ swizzel_id) * 4;\n            FETCH_FLOAT4(frag_b[frag_phase][i]) = FETCH_FLOAT4(smem_b[smem_phase][bk][threadIdx.x * TN + i]);\n        }\n    }\n    \n    } // namespace kernel 9\n    \n    // This function assumes B is already transposed\n    template <const int BM,\n              const int BN,\n              const int BK,\n              const int TM,\n              const int TN,\n              const int THREAD_NUMS>\n    __global__ void __launch_bounds__(THREAD_NUMS, 2) mysgemm_v9(int M, int N, int K, float alpha, float *A, float *B, float beta, float *C)\n    {\n        int bx = blockIdx.x;\n        int by = blockIdx.y;\n        constexpr int threads_per_block = BM / TM * BN / TN;\n        constexpr int a_ele_per_thread_smem = BM * BK / threads_per_block;\n        constexpr int b_ele_per_thread_smem = BK * BN / threads_per_block;\n        constexpr int a_smem_rounds = a_ele_per_thread_smem / 4;\n        constexpr int b_smem_rounds = b_ele_per_thread_smem / 4;\n        constexpr int a_threads_per_row_per_round = BK / 4;\n        int a_stride = threads_per_block / a_threads_per_row_per_round * K;\n        constexpr int b_threads_per_row_per_round = BN / 4;\n        int b_stride = threads_per_block / b_threads_per_row_per_round * N;\n        // int tid = threadIdx.y * blockDim.x + threadIdx.x;\n        // int lane_id = tid % 32;\n        int a_smem_x = ((threadIdx.y * blockDim.x + threadIdx.x) % a_threads_per_row_per_round) * 4;\n        int a_smem_y = (threadIdx.y * blockDim.x + threadIdx.x) / a_threads_per_row_per_round;\n        int b_smem_x = ((threadIdx.y * blockDim.x + threadIdx.x) % b_threads_per_row_per_round) * 4;\n        int b_smem_y = (threadIdx.y * blockDim.x + threadIdx.x) / b_threads_per_row_per_round;\n    \n        static_assert((BM * BK) % threads_per_block == 0);\n        static_assert((BK * BN) % threads_per_block == 0);\n        static_assert(a_ele_per_thread_smem % 4 == 0);\n        static_assert(b_ele_per_thread_smem % 4 == 0);\n        static_assert(BK % 4 == 0);\n        static_assert(BN % 4 == 0);\n        static_assert(threads_per_block / a_threads_per_row_per_round >= 1); // at least cover a row per round\n        static_assert(threads_per_block / b_threads_per_row_per_round >= 1); // at least cover a row per round\n        static_assert(TN % 4 == 0); // at least 4 elements per thread and TN is a multiple of 4\n    \n        float accum[TM][TN] = {0.};\n    \n        __shared__ float smem_a[2][BK][BM]; // a transposed version of A block\n        __shared__ float smem_b[2][BK][BN];\n    \n        // register for loading from global mem to smem\n        float ldreg_a[a_smem_rounds][4];\n        float ldreg_b[b_smem_rounds][4];\n    \n        // fragment/register for computation\n        float frag_a[2][TM];\n        float frag_b[2][TN];\n    \n        // move A to thread start\n        A = &A[by * BM * K + a_smem_y * K + a_smem_x];\n        B = &B[b_smem_y * N + bx * BN + b_smem_x];\n    \n        // 1.1 fetch from global to smem, use register as buffer\n        kernel9::gmem_to_smem<BM, BN, BK>(A, B, smem_a, smem_b, ldreg_a, ldreg_b, a_smem_rounds, a_stride, a_smem_x, a_smem_y, b_smem_rounds, b_stride, b_smem_y, b_smem_x, 0);\n        __syncthreads(); // need the sync such that the following fragment can be obtained\n    \n        // 1.2 load 0 round of smem->frag\n        kernel9::smem_to_frag<BM, BN, BK, TM, TN>(frag_a, frag_b, smem_a, smem_b, 0, 0, 0); // load first batch of frag from first block of smem\n        int smem_write_index = 1; // next index of smems to write to\n        int smem_read_index; // read is current write\n    \n        // 2. start the blockwise loop\n        for (int k = 0; k < K / BK ; ++k)\n        {\n            // 2.0 fetch from global to smem, use register as buffer\n            if (k + 1 < K / BK) {\n                A += BK; // every iteration, A moves BK to the right\n                B += N * BK; // every iteration, B moves BK * N down\n                kernel9::gmem_to_reg(A, B, ldreg_a, ldreg_b, a_smem_rounds, a_stride, b_smem_rounds, b_stride); // only load to reg, this is non-blocking\n            }\n            // 2.1 use the frag already loaded to compute the outer product, note that we do register prefetching here\n    \n            smem_read_index = smem_write_index ^ 1;\n    #pragma unroll\n            for (int b_k = 1; b_k < BK; ++b_k) // load one sub row at a time from smem to frag\n            {\n                kernel9::smem_to_frag<BM, BN, BK, TM, TN>(frag_a, frag_b, smem_a, smem_b, b_k % 2, smem_read_index, b_k);\n    #pragma unroll\n                for (int i = 0; i < TM; ++i)\n                { // outer product for the previous prefetched frag\n    #pragma unroll\n                    for (int j = 0; j < TN; ++j)\n                    {\n                        accum[i][j] += frag_a[(b_k - 1) % 2][i] * frag_b[(b_k - 1) % 2][j];\n                    }\n                }\n            }\n            // 2.2 if there's next block, start loading from reg to smem\n            if (k + 1 < K / BK) {\n                kernel9::reg_to_smem<BM, BN, BK>(smem_a, smem_b, ldreg_a, ldreg_b, a_smem_rounds, a_stride, a_smem_x, a_smem_y, b_smem_rounds, b_stride, b_smem_y, b_smem_x, smem_write_index);\n                __syncthreads();\n                // prefetch a round of fragments from the current write, this will be blocking\n                kernel9::smem_to_frag<BM, BN, BK, TM, TN>(frag_a, frag_b, smem_a, smem_b, 0, smem_write_index, 0);\n                smem_write_index ^= 1; // update next write\n            }\n    #pragma unroll\n            for (int i = 0; i < TM; ++i) \n            { // one last round of outer product because we have only done BK - 1 products\n    #pragma unroll\n                for (int j = 0; j < TN; ++j)\n                {\n                    accum[i][j] += frag_a[(BK - 1) % 2][i] * frag_b[(BK - 1) % 2][j];\n                }\n            }\n        }\n    \n        // 3. put the accumulate value down to C\n        // move C to thread tile start\n        C = &C[(by * BM + threadIdx.y * TM) * N + bx * BN + threadIdx.x * TN];\n    #pragma unroll\n        for (int i = 0; i < TM; ++i) {\n    #pragma unroll\n            for (int j = 0; j < TM; j += 4) {\n                float4 tmp = FETCH_FLOAT4(C[i * N + j]);\n                tmp.x = alpha * accum[i][j] + beta * tmp.x;\n                tmp.y = alpha * accum[i][j + 1] + beta * tmp.y;\n                tmp.z = alpha * accum[i][j + 2] + beta * tmp.z;\n                tmp.w = alpha * accum[i][j + 3] + beta * tmp.w;\n                FETCH_FLOAT4(C[i * N + j]) = tmp;\n            }\n        }\n    }\n    \n    ```\n    \n\n## Swizzle\n\nI was not particularly impressed with the result achieved by prefetching. If I profile the kernel, I found that the arithmetic intensity is high enough to achieve theoretical full performance, I also saw a good enough occupancy ($\\text{active warps} = 3.84$ ‚áí $\\text{occupancy} = \\frac{3.84}{4} = 96\\%$ ). So the issue should be a ‚Äúnon-algorithmic‚Äù one.\n\n::: {layout-ncol=2}\n\n![Arithmetic intensity is high enough](swizzle_intensity_high.png){.lightbox}\n\n![Occupancy is high](swizzle_occupancy_high.png){.lightbox}\n\n:::\n\n\nLooking closer at the profiler raw output, I noticed that there‚Äôs a very hight count of `l1text__data_bank_conflicts_pipe_lsu_mem_shared.sum` and `smsp__sass_l1text_data_bank_conflicts_pipe_lsu_mem_shared_op_st.sum` , the former indicates the memory read instructions have a very high ‚Äúbank conflict‚Äù, the latter indicates that memory writes instructions have a very high ‚Äúbank conflict‚Äù.\n\n![Profiling result indicating high bank conflicts](swizzle_bank_conflict.png)\n\nThere‚Äôre [good resources](https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#shared-memory-5-x) explaining what bank conflicts are, here‚Äôs how I understand it. Remember when we discussed vectorization, I said that in CUDA, all global memory access are done in 32-, 64-, or 128-byte transactions? Turns out that a different access constraint is applied on shared memory access. \n\nIn CUDA, every shared memory access is done via a memory ‚Äúbank‚Äù (think of it as an access point with 32-bit bandwidth per cycle). There‚Äôre 32 banks in shared memory for all SMs. The bank that a certain memory access goes through is determined by \n\n$$\n\\text{Bank ID} = \\lfloor(\\text{Addr} \\% 128) / 4\\rfloor\n$$\n\nwhere we assume the memory is byte-addressable. The 32 banks correspond to 32 threads in a warp, so the best pattern for arrange shared memory access is one where each thread access a different 4-byte (32 bits) in a 128-byte aligned consecutive 128-byte chunk of shared memory.\n\n::: {.column-margin}\n![Diagram illustrating bank conflict, [source](https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#shared-memory-5-x)](bank_illustration.png){.lightbox}\n:::\n\nLooking at the way the kernel writes to shared memory, there‚Äôs clearly bank conflicts, as shown below\n\n![Diagram illustrating bank conflict during shared memory write. Note that there‚Äôs no bank conflict from reading global memory because all read from a warp is coalesced into memory transactions, so the first read from global memory would actually read more data than requested (since each thread requests a non-continuous chunk of data, which will turn into a memory transaction larger than 4 byte), but this is fine because they will reside in L2/L1 cache and will speed up subsequent reads.](swizzle_illustration.png)\n\nFrom the perspective of memory banks, it‚Äôs called a 4-way bank conflict since each bank has 4 threads accessing it.\n\nAlso note that the bank conflict happens not only during write to shared memory, but also during read from shared memory.\n\n![Diagram illustrating 4-way bank conflict](4_way_conflict.png)\n\nTo solve this, we can use something called **swizzle**, which is a way to rearrange bank access such that all banks are utilized in all iterations.\n\nThe following diagram illustrates the idea.\n\n![Diagram illustrating swizzle operation‚Äôs outcome](swizzle_idea.png)\n\nTo actually implement swizzle is as follows:\n\n1. For $N$-way bank conflict, if we conceptualize a particular memory operation to be 2 mappings\n    1. One map from memory address to Bank ID and is given by \n        \n        $$\n        \\text{Bank ID}(\\text{Addr}_t) = f(\\text{Addr}_t) = \\lfloor(\\text{Addr}_t \\% 128) / 4\\rfloor\n        $$\n        \n        where the subscript indicates the memory address is requested from thread $t$\n        \n    2. One map from Bank ID and thread ID to bank row (n-th thread to access a particular bank), and is given by\n        \n        $$\n        \\text{Bank Row}(t, \\text{Addr}_t) = \\sum_{i=0}^{t-1}1\\cdot (\\text{Bank ID}(\\text{Addr}_i) = \\text{Bank ID}(\\text{Addr}_t))\n        $$\n        \n2. We can then use the **XOR** operator to create a new mapping from $(\\text{Bank ID, Bank Row}) \\rightarrow \\text{Swizzled Bank ID}$. We can do this because the group of $({0, ...,2^{n}}, \\text{XOR})$ is a [closed group](https://en.wikipedia.org/wiki/Group_theory) and the mapping is bijective.\n    \n    $$\n    \\text{Swizzled ID} = \\text{Bank Row} \\oplus \\text{Bank ID}\n    $$\n    \n    ![Diagram illustrating desired swizzle operation, notice how each initial bank id gets mapped to a possibly different swizzled bank id without conflict, and that any bank id is only accessed once in each row. Also note that this swizzle operation can be applied where bank row and bank id are not necessarily the same set of numbers.](swizzle_close.png)\n\n    \n3. After obtaining the new bank id, convert it back to memory address with\n    \n    $$\n    \\text{Swizzled Addr} = f^{-1}(\\text{Swizzled Bank ID})\n    $$\n    \n     Note that to calculate $f^{-1}$, we often need more parameters than just the new bank id because $f$ is not bijective.\n    \n4. After obtaining the memory address, the write to and read from shared memory should share the same swizzle pattern to ensure correctness.\n\nAfter applying swizzle to the share memory read operation (due to time constraint, I didn‚Äôt apply to memory store), and rerun the profiling\n\n![Share memory conflict significantly reduced, it didn‚Äôt reduce to 0 because of reason that will become clear in the subsequent section](swizzle_result.png)\n\n\nHowever, the performance is completely disastrous\n\n![Performance of prefetching + swizzle goes back to round 1](swizzle_perf.png)\n\nThe reason that this happens, despite little bank conflicts, is due to the fact that the swizzling algorithm only works **if all the threads being considered come from the same warp**, so in an implementation where we don‚Äôt distinguish warps (we are just doing 2-D thread tiling within a block), the result from swizzling is neural at best, at worst it causes significant non-coalesced memory access. The result shown above indicates the latter is at play.\n\nNow we have a proper motivation for warp tiling.\n\n- code for swizzle, relevant parts are highlighted\n    \n    ```cpp\n    #pragma once\n    \n    #include <cuda_runtime.h>\n    #include <cublas_v2.h>\n    #include <stdio.h>\n    #include <stdlib.h>\n    \n    #ifndef FETCH_FLOAT4\n    #define FETCH_FLOAT4(pointer) (reinterpret_cast<float4 *>(&(pointer))[0])\n    #endif\n    #ifndef DIV_UP\n    #define DIV_UP(m, n) ((m + n - 1) / n)\n    #endif\n    #define GROUP_SIZE 8\n    #define WARP_SIZE 32\n    \n    namespace kernel9 {\n    \n    template<int BM, int BN, int BK>\n    __device__ __forceinline__ void gmem_to_smem(float *A, float *B, float smem_a[][BK][BM], float smem_b[][BK][BN], float ldreg_a[][4], float ldreg_b[][4], int a_smem_rounds, int a_stride, int a_smem_x, int a_smem_y, int b_smem_rounds, int b_stride, int b_smem_y, int b_smem_x, int phase)\n    {\n    #pragma unroll // A: global -> reg buffer\n        for (int i = 0; i < a_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_a[i]) = FETCH_FLOAT4(A[i * a_stride]);\n            // int bank_id = a_smem_y;\n            // int bank_row = tid * BK / 128;\n            // int swizzled_a_smem_y = a_smem_y + bank_row * WARP_SIZE * 4 / BK;\n    \n            smem_a[phase][a_smem_x][a_smem_y + i * a_stride] = ldreg_a[i][0];\n            smem_a[phase][a_smem_x + 1][a_smem_y + i * a_stride] = ldreg_a[i][1];\n            smem_a[phase][a_smem_x + 2][a_smem_y + i * a_stride] = ldreg_a[i][2];\n            smem_a[phase][a_smem_x + 3][a_smem_y + i * a_stride] = ldreg_a[i][3];\n        }\n    #pragma unroll // B: global -> reg buffer\n        for (int i = 0; i < b_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_b[i]) = FETCH_FLOAT4(B[i * b_stride]);\n            FETCH_FLOAT4(smem_b[phase][b_smem_y][b_smem_x + i * b_stride]) = FETCH_FLOAT4(ldreg_b[i]);\n        }\n    }\n    \n    __device__ __forceinline__ void gmem_to_reg(float *A, float *B, float ldreg_a[][4], float ldreg_b[][4], int a_smem_rounds, int a_stride, int b_smem_rounds, int b_stride)\n    {\n    #pragma unroll // A: global -> reg buffer\n        for (int i = 0; i < a_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_a[i]) = FETCH_FLOAT4(A[i * a_stride]);\n        }\n    #pragma unroll // B: global -> reg buffer\n        for (int i = 0; i < b_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_b[i]) = FETCH_FLOAT4(B[i * b_stride]);\n        }\n    }\n    \n    template<int BM, int BN, int BK>\n    __device__ __forceinline__ void reg_to_smem(float smem_a[][BK][BM], float smem_b[][BK][BN], float ldreg_a[][4], float ldreg_b[][4], int a_smem_rounds, int a_stride, int a_smem_x, int a_smem_y, int b_smem_rounds, int b_stride, int b_smem_y, int b_smem_x, int phase)\n    {\n    #pragma unroll // A: reg buffer -> smem\n        for (int i = 0; i < a_smem_rounds; ++i)\n        { // note that this is uncoalesce memory write, and only 4 floats * 4 byte/float = 16 bytes per write\n            smem_a[phase][a_smem_x][a_smem_y + i * a_stride] = ldreg_a[i][0];\n            smem_a[phase][a_smem_x + 1][a_smem_y + i * a_stride] = ldreg_a[i][1];\n            smem_a[phase][a_smem_x + 2][a_smem_y + i * a_stride] = ldreg_a[i][2];\n            smem_a[phase][a_smem_x + 3][a_smem_y + i * a_stride] = ldreg_a[i][3];\n        }\n    #pragma unroll // B: reg buffer -> smem\n        for (int i = 0; i < b_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(smem_b[phase][b_smem_y][b_smem_x + i * b_stride]) = FETCH_FLOAT4(ldreg_b[i]);\n        }\n    }\n    \n    template<int BM, int BN, int BK, int TM, int TN>\n    __device__ __forceinline__ void smem_to_frag(float frag_a[][TM], float frag_b[][TN], float smem_a[][BK][BM], float smem_b[][BK][BN], int frag_phase, int smem_phase, int bk)\n    {\n    #pragma unroll \n        for (int i = 0; i < TM; i += 4)\n        {\n            int tmp = (threadIdx.y * TM + i);\n            tmp = ((tmp / WARP_SIZE) ^ ((tmp % WARP_SIZE) / 4)) % 2 * 4;\n            FETCH_FLOAT4(frag_a[frag_phase][tmp]) = FETCH_FLOAT4(smem_a[smem_phase][bk][threadIdx.y * TM + tmp]);\n        }\n    #pragma unroll\n        for (int i = 0; i < TN; i += 4)\n        {\n            int tmp = (threadIdx.x * TN + i);\n            tmp = ((tmp / WARP_SIZE) ^ ((tmp % WARP_SIZE) / 4)) % 2 * 4;\n            FETCH_FLOAT4(frag_b[frag_phase][tmp]) = FETCH_FLOAT4(smem_b[smem_phase][bk][threadIdx.x * TN + tmp]);\n        }\n    }\n    \n    } // namespace kernel 9\n    \n    // This function assumes B is already transposed\n    template <const int BM,\n              const int BN,\n              const int BK,\n              const int TM,\n              const int TN,\n              const int THREAD_NUMS>\n    __global__ void __launch_bounds__(THREAD_NUMS, 2) mysgemm_v9(int M, int N, int K, float alpha, float *A, float *B, float beta, float *C)\n    {\n        int bx = blockIdx.x;\n        int by = blockIdx.y;\n        constexpr int threads_per_block = BM / TM * BN / TN;\n        constexpr int a_ele_per_thread_smem = BM * BK / threads_per_block;\n        constexpr int b_ele_per_thread_smem = BK * BN / threads_per_block;\n        constexpr int a_smem_rounds = a_ele_per_thread_smem / 4;\n        constexpr int b_smem_rounds = b_ele_per_thread_smem / 4;\n        constexpr int a_threads_per_row_per_round = BK / 4;\n        int a_stride = threads_per_block / a_threads_per_row_per_round * K;\n        constexpr int b_threads_per_row_per_round = BN / 4;\n        int b_stride = threads_per_block / b_threads_per_row_per_round * N;\n        int tid = threadIdx.y * blockDim.x + threadIdx.x;\n        // int lane_id = tid % 32;\n        int a_smem_x = (tid % a_threads_per_row_per_round) * 4;\n        int a_smem_y = tid / a_threads_per_row_per_round;\n        int b_smem_x = (tid % b_threads_per_row_per_round) * 4;\n        int b_smem_y = tid / b_threads_per_row_per_round;\n    \n        static_assert((BM * BK) % threads_per_block == 0);\n        static_assert((BK * BN) % threads_per_block == 0);\n        static_assert(a_ele_per_thread_smem % 4 == 0);\n        static_assert(b_ele_per_thread_smem % 4 == 0);\n        static_assert(BK % 4 == 0);\n        static_assert(BN % 4 == 0);\n        static_assert(threads_per_block / a_threads_per_row_per_round >= 1); // at least cover a row per round\n        static_assert(threads_per_block / b_threads_per_row_per_round >= 1); // at least cover a row per round\n        static_assert(TN % 4 == 0); // at least 4 elements per thread and TN is a multiple of 4\n    \n        float accum[TM][TN] = {0.};\n    \n        __shared__ float smem_a[2][BK][BM]; // a transposed version of A block\n        __shared__ float smem_b[2][BK][BN];\n    \n        // register for loading from global mem to smem\n        float ldreg_a[a_smem_rounds][4];\n        float ldreg_b[b_smem_rounds][4];\n    \n        // fragment/register for computation\n        float frag_a[2][TM];\n        float frag_b[2][TN];\n    \n        // move A to thread start\n        A = &A[by * BM * K + a_smem_y * K + a_smem_x];\n        B = &B[b_smem_y * N + bx * BN + b_smem_x];\n    \n        // 1.1 fetch from global to smem, use register as buffer\n        kernel9::gmem_to_smem<BM, BN, BK>(A, B, smem_a, smem_b, ldreg_a, ldreg_b, a_smem_rounds, a_stride, a_smem_x, a_smem_y, b_smem_rounds, b_stride, b_smem_y, b_smem_x, 0);\n        __syncthreads(); // need the sync such that the following fragment can be obtained\n    \n        // 1.2 load 0 round of smem->frag\n        kernel9::smem_to_frag<BM, BN, BK, TM, TN>(frag_a, frag_b, smem_a, smem_b, 0, 0, 0); // load first batch of frag from first block of smem\n        int smem_write_index = 1; // next index of smems to write to\n        int smem_read_index; // read is current write\n    \n        // 2. start the blockwise loop\n        for (int k = 0; k < K / BK ; ++k)\n        {\n            // 2.0 fetch from global to smem, use register as buffer\n            if (k + 1 < K / BK) {\n                A += BK; // every iteration, A moves BK to the right\n                B += N * BK; // every iteration, B moves BK * N down\n                kernel9::gmem_to_reg(A, B, ldreg_a, ldreg_b, a_smem_rounds, a_stride, b_smem_rounds, b_stride); // only load to reg, this is non-blocking\n            }\n            // 2.1 use the frag already loaded to compute the outer product, note that we do register prefetching here\n    \n            smem_read_index = smem_write_index ^ 1;\n    #pragma unroll\n            for (int b_k = 1; b_k < BK; ++b_k) // load one sub row at a time from smem to frag\n            {\n                kernel9::smem_to_frag<BM, BN, BK, TM, TN>(frag_a, frag_b, smem_a, smem_b, b_k % 2, smem_read_index, b_k);\n    #pragma unroll\n                for (int i = 0; i < TM; ++i)\n                { // outer product for the previous prefetched frag\n    #pragma unroll\n                    for (int j = 0; j < TN; ++j)\n                    {\n                        accum[i][j] += frag_a[(b_k - 1) % 2][i] * frag_b[(b_k - 1) % 2][j];\n                    }\n                }\n            }\n            // 2.2 if there's next block, start loading from reg to smem\n            if (k + 1 < K / BK) {\n                kernel9::reg_to_smem<BM, BN, BK>(smem_a, smem_b, ldreg_a, ldreg_b, a_smem_rounds, a_stride, a_smem_x, a_smem_y, b_smem_rounds, b_stride, b_smem_y, b_smem_x, smem_write_index);\n                __syncthreads();\n                // prefetch a round of fragments from the current write, this will be blocking\n                kernel9::smem_to_frag<BM, BN, BK, TM, TN>(frag_a, frag_b, smem_a, smem_b, 0, smem_write_index, 0);\n                smem_write_index ^= 1; // update next write\n            }\n    #pragma unroll\n            for (int i = 0; i < TM; ++i) \n            { // one last round of outer product because we have only done BK - 1 products\n    #pragma unroll\n                for (int j = 0; j < TN; ++j)\n                {\n                    accum[i][j] += frag_a[(BK - 1) % 2][i] * frag_b[(BK - 1) % 2][j];\n                }\n            }\n        }\n    \n        // 3. put the accumulate value down to C\n        // move C to thread tile start\n        C = &C[(by * BM + threadIdx.y * TM) * N + bx * BN + threadIdx.x * TN];\n    #pragma unroll\n        for (int i = 0; i < TM; ++i) {\n    #pragma unroll\n            for (int j = 0; j < TM; j += 4) {\n                float4 tmp = FETCH_FLOAT4(C[i * N + j]);\n                tmp.x = alpha * accum[i][j] + beta * tmp.x;\n                tmp.y = alpha * accum[i][j + 1] + beta * tmp.y;\n                tmp.z = alpha * accum[i][j + 2] + beta * tmp.z;\n                tmp.w = alpha * accum[i][j + 3] + beta * tmp.w;\n                FETCH_FLOAT4(C[i * N + j]) = tmp;\n            }\n        }\n    }\n    \n    ```\n    \n\n## Warp Tiling\n\nWarp tiling, as the name suggests, is basically tiling at the warp level. Here‚Äôs the visual for the algorithm:\n\n![Diagram for warp tiling](warp_tiling.png)\n\nThe idea is that instead of treating threads in a block as equivalent, we distinguish them by which warp they come from. Therefore each warp now handles a larger tile (warp tile). To give flexibility to the selection of warp tile sizes, while allowing for the selection of thread tile sizes, we have to allow each thread to process more than one thread tile. Therefore each warp tile is further divided into multiple ‚Äúsubtile‚Äù, where each subtile consists of $32 \\times \\text{TM}\\times\\text{TN}$ elements, meaning for each subtile to be calculated, all 32 threads needs to calculate only once. But to fill a whole warp tile, all 32 threads need to move from one subtile to another, causing the zig-zag movement seen above.\n\nThere‚Äôre many benefit to this approach:\n\n1. Having the concept of warp tiling allows us to do effective swizzle.\n2. A strided memory access pattern (from a thread‚Äôs perspective) allows for coalesced memory access.\n3. Most importantly, because we are doing more work per thread (9 thread-tiles per thread, in the example), we are again increasing the arithmetic intensity! \n    1. From shared memory‚Äôs perspective, processing each $TM\\times TN$ elements still requires $2K$ reads from shared memory\n    2. But from device memory‚Äôs perspective, processing each $\\#\\text{subtiles}\\times TM \\times TN$ elements only requires $\\text{sm}\\times TM \\times K + \\text{sn}\\times TN \\times K$ reads from global memory, meaning the arithmetic intensity is now\n    \n    $$\n    \\frac{\\text{sm}\\cdot\\text{sn}\\cdot\\text{TM}\\cdot\\text{TN}}{K\\cdot(\\text{sm}\\cdot \\text{TM} + \\text{sn}\\cdot\\text{TN})}\n    $$\n    \n\nI‚Äôll leave the calculation for the arithmetic intensity improvement to the reader.\n\nAfter implementing the warp tiling algorithm, this is the result:\n\n![Performance of warp tiling](warp_tiling_perf.png)\n\nNote that there‚Äôre a few design decisions I made after experiments:\n\n- I intentionally didn‚Äôt implement buffering/prefetching/pipelining, because doing so increases the required shared memory per block, the reduction of occupancy caused a bigger issue than the benefit of prefetching.\n- Due to time constraint, I didn‚Äôt implement swizzling on this kernel, but because of the strided access pattern, I‚Äôm only suffering from 2-way bank conflict, which was acceptable for me.\n\n- The code\n    \n    ```cpp\n    #pragma once\n    \n    #include <algorithm>\n    #include <cassert>\n    #include <cstdio>\n    #include <cstdlib>\n    #include <cublas_v2.h>\n    #include <cuda_runtime.h>\n    \n    #ifndef FETCH_FLOAT4\n    #define FETCH_FLOAT4(pointer) (reinterpret_cast<float4 *>(&(pointer))[0])\n    #endif\n    #ifndef FETCH_FLOAT4_CONST\n    #define FETCH_FLOAT4_CONST(pointer) (reinterpret_cast<const float4 *>(&(pointer))[0])\n    #endif\n    #define GROUP_SIZE 8\n    #define WARP_SIZE 32\n    \n    namespace kernel10 {\n        template<int BM, int BN, int BK, int lda_m_stride, int ldb_k_stride>\n        __device__ __forceinline__ void gmem_to_smem(const float * A, const float * B, int M, int N, int K, float * smem_a, float * smem_b)\n        {\n            // #pragma unroll // A: global -> reg buffer\n            for (uint i = 0; i + lda_m_stride <= BM; i += lda_m_stride)\n            {\n                const float4 tmp = FETCH_FLOAT4_CONST(A[i * K]);\n                smem_a[i] = tmp.x;\n                smem_a[BM + i] = tmp.y;\n                smem_a[2 * BM + i] = tmp.z;\n                smem_a[3 * BM + i] = tmp.w;\n            }\n            // #pragma unroll // B: global -> reg buffer\n            for (uint i = 0; i + ldb_k_stride <= BK; i += ldb_k_stride)\n            {\n                FETCH_FLOAT4(smem_b[i * BN]) = FETCH_FLOAT4_CONST(B[i * N]);\n            }\n        }\n    \n        template <const int BM,\n                  const int BN,\n                  const int BK,\n                  const int WM,\n                  const int WN,\n                  const int TM,\n                  const int TN,\n                  const int WM_SUBTILE,\n                  const int WN_SUBTILE,\n                  const int m_subtiles,\n                  const int n_subtiles>\n        __device__ __forceinline__ void warp_matmul(const float *smem_a, const float *smem_b, float *acc, float *frag_a, float *frag_b) {\n            // #pragma unroll\n            for (uint k = 0; k < BK; ++k) { \n                // #pragma unroll\n                for (uint i = 0; i < m_subtiles; ++i) {\n                    // #pragma unroll\n                    for (uint m = 0; m < TM; m+=1) {\n                        frag_a[i * TM + m] = smem_a[k * BM + i * WM_SUBTILE + m];\n                    }\n                }\n                // #pragma unroll\n                for (uint i = 0; i < n_subtiles; ++i) {\n                    // #pragma unroll\n                    for (uint n = 0; n < TN; n+=1) {\n                        frag_b[i * TN + n] = smem_b[k * BN + i * WN_SUBTILE + n];\n                    }\n                }\n                // #pragma unroll\n                for (uint i = 0; i < m_subtiles; ++i) {\n                    // #pragma unroll\n                    for (uint j = 0; j < n_subtiles; ++j) {\n                        // #pragma unroll\n                        for (uint m = 0; m < TM; ++m) {\n                            // #pragma unroll\n                            for (uint n = 0; n < TN; ++n) {\n                                acc[(i * TM + m) * n_subtiles * TN + j * TN + n] += frag_a[i * TM + m] * frag_b[j * TN + n];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    \n    } // namespace kernel 10\n    \n    // WARP tiling without double cache, performing C = alpha * A * B + beta * C\n    template <const int BM,\n              const int BN,\n              const int BK,\n              const int WM,\n              const int WN,\n              const int TM,\n              const int TN,\n              const int WM_SUBTILE,\n              const int WN_SUBTILE,\n              const int NUM_THREADS,\n              const int lda_m_stride,\n              const int ldb_k_stride,\n              const int m_subtiles,\n              const int n_subtiles\n              >\n    __global__ void __launch_bounds__(NUM_THREADS, 3) mysgemm_v10(int M, int N, int K, float alpha, float *A, float *B, float beta, float *C)\n    {\n        // every thread loads 4 floats at a time in stride-fashion\n        const uint warp_m_offset = (threadIdx.x / WARP_SIZE) / (BN / WN) * WM;\n        const uint warp_n_offset = (threadIdx.x / WARP_SIZE) % (BN / WN) * WN;\n        const uint m_idx_a = threadIdx.x * 4 / BK;\n        const uint k_idx_a = threadIdx.x % (BK / 4) * 4;\n        const uint k_idx_b = threadIdx.x * 4 / BN;\n        const uint n_idx_b = threadIdx.x % (BN / 4) * 4;\n        const uint subtile_idx_m = (threadIdx.x % WARP_SIZE) / (WN_SUBTILE / TN) * TM;\n        const uint subtile_idx_n = (threadIdx.x % WARP_SIZE) % (WN_SUBTILE / TN) * TN;\n    \n        static_assert(lda_m_stride > 0, \"lda_m_stride must be positive to ensure uniform strides\");\n        static_assert(ldb_k_stride > 0, \"ldb_k_stride must be positive to ensure uniform strides\");\n    \n        // declare shared memory\n        __shared__ float smem_a[BK * BM]; // transposed\n        __shared__ float smem_b[BK * BN];\n    \n        A += blockIdx.y * BM * K + m_idx_a * K + k_idx_a;\n        B += blockIdx.x * BN + k_idx_b * N + n_idx_b;\n        // move C to the warp start\n        C += (blockIdx.y * BM + warp_m_offset + subtile_idx_m) * N  + blockIdx.x * BN + warp_n_offset + subtile_idx_n;\n    \n        // move A and B to thread start for loading, this has nothing to do with warps\n    \n        // declare accumulators\n        float acc[m_subtiles * n_subtiles * TM * TN] = {0.};\n    \n        // declare fragments\n        float frag_a[m_subtiles * TM] = {0.};\n        float frag_b[n_subtiles * TN] = {0.};\n    \n        \n        // #pragma unroll\n        for (uint k = 0; k < K; k += BK) {\n            kernel10::gmem_to_smem<BM, BN, BK, lda_m_stride, ldb_k_stride>(A, B, M, N, K, smem_a + k_idx_a * BM + m_idx_a, smem_b + k_idx_b * BN + n_idx_b);\n            __syncthreads();\n            // compute the warp level matmul\n            kernel10::warp_matmul<BM, BN, BK, WM, WN, TM, TN, WM_SUBTILE, WN_SUBTILE, m_subtiles, n_subtiles>(smem_a + warp_m_offset + subtile_idx_m, smem_b + + warp_n_offset + subtile_idx_n, acc, frag_a, frag_b);\n            A += BK;\n            B += BK * N;\n            __syncthreads();\n        }\n    \n        // reduce\n    \n        for (uint i = 0; i < m_subtiles; ++i) {\n            for (uint j = 0; j < n_subtiles; ++j) {\n                // move C to the subtile start\n                float *C_subtile = C + i * WM_SUBTILE * N + j * WN_SUBTILE;\n                // #pragma unroll\n                for (uint m = 0; m < TM; m += 1) {\n                    // #pragma unroll\n                    for (uint n = 0; n < TN; n += 4) {\n                        float4 tmp = FETCH_FLOAT4(\n                            C_subtile[m * N + n]);\n                        const int acc_offset = (i * TM + m) * n_subtiles * TN + j * TN + n;\n                        tmp.x = alpha * acc[acc_offset] + beta * tmp.x;\n                        tmp.y = alpha * acc[acc_offset + 1] + beta * tmp.y;\n                        tmp.z = alpha * acc[acc_offset + 2] + beta * tmp.z;\n                        tmp.w = alpha * acc[acc_offset + 3] + beta * tmp.w;\n                        FETCH_FLOAT4(C_subtile[m * N + n]) = tmp;\n                    }\n                }\n            }\n        }\n    }\n    \n    ```\n    \n\n## Split-K\n\nComparing the kernel I wrote with CuBLAS, I noticed how the grid dim of CuBLAS has a third dimension (the (256, 2, 3) number). This suggest that the CuBLAS implementation is also splitting the matmul problem along the K dimension.\n\n![Profiling result from nsight compute, Kernel 2 is CuBLAS, mysgemm_v10 is the warp tiling kernel](split_k_profile.png)\n\nThe idea with split-K is as follows:\n\n- As opposed to having each block, each warp, each thread iterating throughout the dimension K, we split the K dimension among blocks, so each block only computes a partial result.\n- After computing a partial result, we kick off another reduction kernel that merges all the partial result together.\n- The hope is that by increasing the number of blocks, we further increase occupancy and this benefit is hopefully larger than the additional overhead that the reduction kernel brings.\n\n![Diagram illustrating split-K](split_k.png)\n\nAfter implementing the split-K algorithm, here‚Äôs the performance I got:\n\n![Performance of Split-K](split_k_perf.png)\n\nHuh? It got worse than plain warp-tiling. After some tinkering (changing dimensions, etc.), I think the reason for the worse performance is possibly:\n\n1. I haven‚Äôt run a complete sweep of hyper-parameters of this kernel, which is what CuBLAS surely did.\n2. I‚Äôm using the kernel launch as an inter-block synchronization primitive (basically, calling the reduction kernel after the computation kernel in the same stream), but ideally, reduction can also happen in a block-by-block fashion, where as long as a set of blocks that cover the entire K dimension has finished calculation, a reduction kernel can be kicked off along that dimension. I‚Äôm not sure how to achieve this though, because afaik CUDA doesn‚Äôt have any other inter-block synchronization primitive than kernel launching.\n3. I‚Äôm not using fancy things like [stream-k](https://arxiv.org/abs/2301.03598).\n4. I‚Äôm too exhausted to do a proper swizzle on this kernel.\n\nBut anyway, I‚Äôm happy that the split-K get implemented and is functionally correct. Here‚Äôs the code.\n\n- Code for Split-k\n    \n    ```cpp\n    #pragma once\n    \n    #include <algorithm>\n    #include <cassert>\n    #include <cstdio>\n    #include <cstdlib>\n    #include <cublas_v2.h>\n    #include <cuda_runtime.h>\n    #include <cooperative_groups.h>\n    #include <cooperative_groups/memcpy_async.h>\n    #include <cooperative_groups/reduce.h>\n    #include <cuda/barrier>\n    #include <cuda/pipeline>\n    \n    namespace cg = cooperative_groups;\n    \n    #ifndef FETCH_FLOAT4\n    #define FETCH_FLOAT4(pointer) (reinterpret_cast<float4 *>(&(pointer))[0])\n    #endif\n    #ifndef FETCH_FLOAT4_CONST\n    #define FETCH_FLOAT4_CONST(pointer) (reinterpret_cast<const float4 *>(&(pointer))[0])\n    #endif\n    #ifndef DIV_UP\n    #define DIV_UP(m, n) (((m) + (n) - 1) / (n))\n    #endif\n    #define GROUP_SIZE 8\n    #define WARP_SIZE 32\n    \n    namespace kernel11 {\n        template<int BM, int BN, int BK, int lda_m_stride, int ldb_k_stride>\n        __device__ __forceinline__ void gmem_to_smem(const float * A, const float * B, int M, int N, int K, float * smem_a, float * smem_b)\n        {\n            // #pragma unroll // A: global -> reg buffer\n            for (uint i = 0; i + lda_m_stride <= BM; i += lda_m_stride)\n            {\n                const float4 tmp = FETCH_FLOAT4_CONST(A[i * K]);\n                smem_a[i] = tmp.x;\n                smem_a[BM + i] = tmp.y;\n                smem_a[2 * BM + i] = tmp.z;\n                smem_a[3 * BM + i] = tmp.w;\n            }\n            // #pragma unroll // B: global -> reg buffer\n            for (uint i = 0; i + ldb_k_stride <= BK; i += ldb_k_stride)\n            {\n                FETCH_FLOAT4(smem_b[i * BN]) = FETCH_FLOAT4_CONST(B[i * N]);\n            }\n        }\n    \n        template <const int BM,\n                  const int BN,\n                  const int BK,\n                  const int WM,\n                  const int WN,\n                  const int TM,\n                  const int TN,\n                  const int WM_SUBTILE,\n                  const int WN_SUBTILE,\n                  const int m_subtiles,\n                  const int n_subtiles>\n        __device__ void warp_matmul(const float *smem_a, const float *smem_b, float *acc, float *frag_a, float *frag_b, int warp_m_offset, int subtile_idx_m, int warp_n_offset, int subtile_idx_n) {\n            smem_a += warp_m_offset + subtile_idx_m;\n            smem_b += warp_n_offset + subtile_idx_n;\n            // #pragma unroll\n            for (uint k = 0; k < BK; ++k) { \n                // #pragma unroll\n                for (uint i = 0; i < m_subtiles; ++i) {\n                    // #pragma unroll\n                    // for (uint m = 0; m < TM; m+=4) {\n                    //     FETCH_FLOAT4(frag_a[i * TM + m]) = FETCH_FLOAT4_CONST(smem_a[k * BM + i * WM_SUBTILE + m]);\n                    // }\n                    // #pragma unroll\n                    for (uint m = 0; m < TM; m+=1) {\n                        frag_a[i * TM + m] = smem_a[k * BM + i * WM_SUBTILE + m];\n                    }\n                }\n                // #pragma unroll\n                for (uint i = 0; i < n_subtiles; ++i) {\n                    // #pragma unroll\n                    // for (uint n = 0; n < TN; n+=4) {\n                    //     FETCH_FLOAT4(frag_b[i * TN + n]) = FETCH_FLOAT4_CONST(smem_b[k * BN + i * WN_SUBTILE + n]);\n                    // }\n                    // #pragma unroll\n                    for (uint n = 0; n < TN; n+=1) {\n                        frag_b[i * TN + n] = smem_b[k * BN + i * WN_SUBTILE + n];\n                    }\n                }\n                // #pragma unroll\n                for (uint i = 0; i < m_subtiles; ++i) {\n                    // #pragma unroll\n                    for (uint j = 0; j < n_subtiles; ++j) {\n                        // #pragma unroll\n                        for (uint m = 0; m < TM; ++m) {\n                            // #pragma unroll\n                            for (uint n = 0; n < TN; ++n) {\n                                acc[(i * TM + m) * n_subtiles * TN + j * TN + n] += frag_a[i * TM + m] * frag_b[j * TN + n];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    \n    } // namespace kernel 11\n    \n    // WARP tiling without double cache, performing C = alpha * A * B + beta * C\n    template <const int BM,\n              const int BN,\n              const int BK,\n              const int SPLIT,\n              const int WM,\n              const int WN,\n              const int TM,\n              const int TN,\n              const int WM_SUBTILE,\n              const int WN_SUBTILE,\n              const int NUM_THREADS,\n              const int lda_m_stride,\n              const int ldb_k_stride,\n              const int m_subtiles,\n              const int n_subtiles\n              >\n    __global__ void __launch_bounds__(NUM_THREADS, 2) mysgemm_v11(int M, int N, int K, float alpha, float *A, float *B, float beta, float *tC, float *C)\n    {\n        // The strided split K can be visualized as follows:\n        // ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n        // ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ\n        // ‚îÇ split0 ‚îÇ split1 ‚îÇ split0 ‚îÇ split1 ‚îÇ split0 ‚îÇ split1 ‚îÇ split0 ‚îÇ\n        // ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ\n        // ‚îÇ block0 ‚îÇ block1 ‚îÇ block2 ‚îÇ block3 ‚îÇ block4 ‚îÇ block5 ‚îÇ block6 ‚îÇ\n        // ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ\n        // ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n        // The reason for strided splits is that different splits handle BKs in a strided fashion to improve L2 cache hit rate.\n        // Note that there might be remainder blocks left causing imbalanced processing across CTAs, this can be handled via stream-K (https://arxiv.org/pdf/2301.03598), but here we'll just ignore (the imbalance) and process it anyway.\n        // To assist reduction, it's better to store the output from different splits together:\n        //  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                     \n        //  ‚îÇ    unit0 - split0   ‚îÇ                     \n        //  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§                     \n        //  ‚îÇ    unit0 - split1   ‚îÇ                     \n        //  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§                     \n        //  ‚îÇ    unit1 - split0   ‚îÇ                     \n        //  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§                     \n        //  ‚îÇ    unit1 - split0   ‚îÇ                     \n        //  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                     \n                                  \n    \n        const uint iters_per_split = DIV_UP(K, BK) / SPLIT; // number of BKs a split handles (at least)\n        const uint last_iter_splits = DIV_UP(K, BK) % SPLIT;\n    \n        // every thread loads 4 floats at a time in stride-fashion\n        const uint warp_m_offset = (threadIdx.x / WARP_SIZE) / (BN / WN) * WM;\n        const uint warp_n_offset = (threadIdx.x / WARP_SIZE) % (BN / WN) * WN;\n        const uint m_idx_a = threadIdx.x * 4 / BK;\n        const uint k_idx_a = threadIdx.x % (BK / 4) * 4;\n        const uint k_idx_b = threadIdx.x * 4 / BN;\n        const uint n_idx_b = threadIdx.x % (BN / 4) * 4;\n        const uint subtile_idx_m = (threadIdx.x % WARP_SIZE) / (WN_SUBTILE / TN) * TM;\n        const uint subtile_idx_n = (threadIdx.x % WARP_SIZE) % (WN_SUBTILE / TN) * TN;\n       \n    \n        static_assert(lda_m_stride > 0, \"lda_m_stride must be positive to ensure uniform strides\");\n        static_assert(ldb_k_stride > 0, \"ldb_k_stride must be positive to ensure uniform strides\");\n    \n        // declare shared memory\n        __shared__ float smem_a[BK * BM]; // transposed\n        __shared__ float smem_b[BK * BN];\n    \n        // move A and B to thread start for loading, this has nothing to do with warps\n        A += blockIdx.y * BM * K + m_idx_a * K + k_idx_a + blockIdx.z * BK;\n        B += blockIdx.x * BN + k_idx_b * N + n_idx_b + blockIdx.z * BK * N;\n        // move tC to the warp start, tC is the temporary gmem to store splits results\n        tC += ((blockIdx.y * BM + warp_m_offset + subtile_idx_m) * N  + blockIdx.x * BN + warp_n_offset + subtile_idx_n) * SPLIT;\n        // move C to the warp start as well\n        C += (blockIdx.y * BM + warp_m_offset + subtile_idx_m) * N  + blockIdx.x * BN + warp_n_offset + subtile_idx_n;\n    \n        // declare accumulators\n        float acc[m_subtiles * n_subtiles * TM * TN] = {0.};\n    \n        // declare fragments\n        float frag_a[m_subtiles * TM] = {0.};\n        float frag_b[n_subtiles * TN] = {0.};\n    \n        \n        // #pragma unroll\n        for (uint it = 0; it < iters_per_split; ++it) {\n            kernel11::gmem_to_smem<BM, BN, BK, lda_m_stride, ldb_k_stride>(A, B, M, N, K, smem_a + k_idx_a * BM + m_idx_a, smem_b + k_idx_b * BN + n_idx_b);\n            __syncthreads();\n            // compute the warp level matmul\n            kernel11::warp_matmul<BM, BN, BK, WM, WN, TM, TN, WM_SUBTILE, WN_SUBTILE, m_subtiles, n_subtiles>(smem_a, smem_b, acc, frag_a, frag_b, warp_m_offset, subtile_idx_m, warp_n_offset, subtile_idx_n);\n            A += BK * SPLIT;\n            B += BK * SPLIT * N;\n            __syncthreads();\n        }\n    \n        if (last_iter_splits > 0 && blockIdx.z < last_iter_splits) { // process last iteration\n            kernel11::gmem_to_smem<BM, BN, BK, lda_m_stride, ldb_k_stride>(A, B, M, N, K, smem_a + k_idx_a * BM + m_idx_a, smem_b + k_idx_b * BN + n_idx_b);\n            __syncthreads();\n            // compute the warp level matmul\n            kernel11::warp_matmul<BM, BN, BK, WM, WN, TM, TN, WM_SUBTILE, WN_SUBTILE, m_subtiles, n_subtiles>(smem_a, smem_b, acc, frag_a, frag_b, warp_m_offset, subtile_idx_m, warp_n_offset, subtile_idx_n);\n            __syncthreads();\n        }\n    \n        // epilogue: reduce to (temporary) gmem\n        for (uint i = 0; i < m_subtiles; ++i) {\n            for (uint j = 0; j < n_subtiles; ++j) {\n                // move C to the subtile start\n                float *C_subtile = C + (i * WM_SUBTILE * N + j * WN_SUBTILE);\n                float *tC_subtile = tC + (i * WM_SUBTILE * N + j * WN_SUBTILE) * SPLIT;\n                // #pragma unroll\n                for (uint m = 0; m < TM; m += 1) {\n                    // #pragma unroll\n                    for (uint n = 0; n < TN; n += 4) {\n                        const int acc_offset = (i * TM + m) * n_subtiles * TN + j * TN + n;\n                        if (blockIdx.z == 0) { // only the first block in that split should accumulate from original C matrix\n                            float4 tmp = FETCH_FLOAT4(C_subtile[m * N + n]);\n                            tmp.x = alpha * acc[acc_offset] + beta * tmp.x;\n                            tmp.y = alpha * acc[acc_offset + 1] + beta * tmp.y;\n                            tmp.z = alpha * acc[acc_offset + 2] + beta * tmp.z;\n                            tmp.w = alpha * acc[acc_offset + 3] + beta * tmp.w;\n                            \n                            tC_subtile[m * N * SPLIT + n * SPLIT] = tmp.x;\n                            tC_subtile[m * N * SPLIT + (n + 1) * SPLIT] = tmp.y;\n                            tC_subtile[m * N * SPLIT + (n + 2) * SPLIT] = tmp.z;\n                            tC_subtile[m * N * SPLIT + (n + 3) * SPLIT] = tmp.w;\n                        } else {\n                            tC_subtile[m * N * SPLIT + n * SPLIT + blockIdx.z] = alpha * acc[acc_offset];\n                            tC_subtile[m * N * SPLIT + (n + 1) * SPLIT + blockIdx.z] = alpha * acc[acc_offset + 1];\n                            tC_subtile[m * N * SPLIT + (n + 2) * SPLIT + blockIdx.z] = alpha * acc[acc_offset + 2];\n                            tC_subtile[m * N * SPLIT + (n + 3) * SPLIT + blockIdx.z] = alpha * acc[acc_offset + 3];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    template <int SPLIT,\n              int smem_elements,\n              int stages,\n              int reduction_iters>\n    __global__ void reduce_k(const int M, const int N, float* __restrict__ tC, float* __restrict__ C, const int block_iters) {\n        auto grid = cg::this_grid();\n        auto block = cg::this_thread_block(); // data is loaded using block as a group\n        auto tile = cg::tiled_partition<SPLIT>(block); // data is reduced using tile as a group\n    \n        extern __shared__ float smem[];\n        uint smem_stage_offsets[stages];\n        float sum[reduction_iters] = {0.0f};\n        for (int s = 0; s < stages; ++s) smem_stage_offsets[s] = s * smem_elements * SPLIT;\n    \n        uint gmem_init_offset = blockIdx.x * smem_elements * SPLIT;\n        uint gmem_stride = gridDim.x * smem_elements * SPLIT;\n        uint smem_stride = tile.meta_group_size() * SPLIT;\n    \n        __shared__ cuda::pipeline_shared_state<\n            cuda::thread_scope::thread_scope_block,\n            stages\n        > shared_state;\n        auto pipeline = cuda::make_pipeline(block, &shared_state);\n    \n        for (uint reduce_iter = 0, fetch_iter = 0; reduce_iter < block_iters; ++reduce_iter) {\n            for (; fetch_iter < block_iters && fetch_iter < (reduce_iter + stages); ++fetch_iter) {\n                pipeline.producer_acquire();\n                uint shared_idx = fetch_iter % stages;\n                cuda::memcpy_async(block,\n                                   smem + smem_stage_offsets[shared_idx],\n                                   tC + gmem_init_offset + gmem_stride * fetch_iter,\n                                   sizeof(float) * smem_elements * SPLIT,\n                                   pipeline);\n                pipeline.producer_commit();\n            }\n            pipeline.consumer_wait();\n            uint shared_idx = reduce_iter % stages;\n            uint smem_offset =  tile.meta_group_rank() * SPLIT + tile.thread_rank();\n            for (; smem_offset < smem_elements * SPLIT; smem_offset += smem_stride) {\n                uint element_idx = smem_offset / smem_stride;\n                sum[element_idx] = smem[smem_stage_offsets[shared_idx] + smem_offset];\n                sum[element_idx] = cg::reduce(tile, sum[element_idx], cg::plus<float>());\n                if (tile.thread_rank() == 0) {\n                    uint output_offset = blockIdx.x * smem_elements + gridDim.x * smem_elements * reduce_iter + smem_offset / SPLIT;\n                    C[output_offset] = sum[element_idx]; // copy to global memory\n                }\n            }\n            // __syncthreads();\n            pipeline.consumer_release();\n        }\n    }\n    ```\n    \n\n# Conclusion\n\nThere‚Äôre still non-negligible performance difference between my kernel and CuBLAS, even if we just cherry pick the best performant configuration (95.6%), let along other special dimensions (super thin matrix or super wide matrix), or structured matrices. Also, modern BLAS libraries has evolved to something more like a database look up that picks the best implementation given a particular problem size and particular hardware specs, so it‚Äôs not going to be a fruitful path trying to beat CuBLAS on this imo.\n\nBut hopefully I have proven to you that writing kernels are not that scary, and you should try too.\n\n## Credits\n\n**A lot of credit** goes to [@wangzyon_sgemm] who has set up the benchmarking code, and [@boehm2022cuda_matmul] who has provided an warp tiling implementation. I added a split-K implementation and wrote my own warp tiling implementation, as well as prefetching implementation. If you just want to see the code, check this [repo](https://github.com/seanxwzhang/CUDA_GEMM).\n","srcMarkdownNoYaml":"\n\n*In this post I introduce the CUDA programming ecosystem by writing a kernel achieves 95% of cuBLAS‚Äôs SGEMM performance. I hope this helps those are just getting started in CUDA programming.*\n\n<!--more-->\n\n# Introduction\n\nGEMM is the [corner stone of **modern machine learning**](https://petewarden.com/2015/04/20/why-gemm-is-at-the-heart-of-deep-learning/), many of us have been using high-level interfaces like `torch.matmul` or simply `t1 * t2` for granted without getting into the weeds (for a good reason!) and I was no different. \n\nHowever, machine learning isn‚Äôt always just about designing the best loss function. Given the [skyrocketing cost](https://www.jmlr.org/papers/volume24/23-0069/23-0069.pdf) of training and running large models, apply good system engineering principals to machine learning (or sometimes, [vice versa](https://tvm.apache.org/docs/how_to/tune_with_autotvm/index.html)) is of great interest.\n\nAs I was researching on various ways to make large ML model inference faster (which by itself deserves another post, stay tunedüôÇ), there‚Äôs no going around writing my own kernel. I spent the last couple weeks reviewing CUDA programming from the beginning, and wrote a SGEMM kernel that achieves **95% of cuBLAS** (Nvidia‚Äôs close-sourced **Cu**da **B**asic **L**inear **A**lgebra **S**ubroutine library).\n\n![Performance of hand-written SGEMM kernel, achieving 95.6% or CUBLAS performance at M=N=K=4096](warp_tiling_perf.png){.lightbox}\n\n# Starting from the basics\n\nFundamentally, programming in CUDA (like any other parallel programming paradigm) is about breaking down a problem into sub-problems in a way that **maximally utilize the hardware**, which, usually consists of answering the following questions (iteratively, for multiple times):\n\n1. What are the ways I can break down my problem?\n2. Given a particular way to break down the problem, what‚Äôs the bottleneck of my current solution? \n3. Can the bottleneck of the solution be improved if\n    1. I break down the problem in a different way?\n    2. I apply **hardware-specific** tricks to improve the performance?\n\nTo meaningfully answer these questions, one needs to understand the GPU hardware.\n\n## GPU Hardware\n\n![A simplified overview of GPU architecture, numbers are for modern (as of 2024) GPU\n**SM**: Streaming Multiprocessor, the first-level ‚Äúparallel component‚Äù in GPU, there‚Äôre 128 SM in a RTX4090\n**HBM**: High Bandwidth Memory, the ‚Äúglobal memory‚Äù/‚Äùdevice memory‚Äù of GPU, size is usually around 20GB~80GB. Communicating with this memory is considered extremely slow, on the order of 400-800 cycles per access.\n**L2 cache**: The cache for HBM, read and writes to HBM will be cached here. Communication with this memory is [much faster](https://stackoverflow.com/questions/66921433/is-memory-operation-for-l2-cache-significantly-faster-than-global-memory-for-nvi) (but Nvidia doesn‚Äôt disclose it publicly), a ballpark number for  is 2TB/s.\n**SMSP**: Streaming Multiprocessor Sub-Partition, introduced in the Ampere architecture, the second-level ‚Äúparallel component‚Äù in GPU, there‚Äôre 4 SMSP in an SM.\n**L1 cache**: Each SM has its own L1 cache (smaller), also used to cache read and writes to HBM. Read/write to this memory usually takes 20-40 cycles.\n**Shared Memory**: Each SM has a chunk of memory for all threads/processes running on all of its SMSP. Read/write to this memory usually takes 20-40 cycles as well.\n**Register File**: A chunk of registers local to each SMSP (and local to the threads running on it). Read/write to registers takes 1 cycle (as fast as you can get).\n**Warp Scheduler**: The scheduler that schedules which warp gets run on the SMSP at any given time, more on this later.\n**INT32**: The arithmetic ‚Äúcore‚Äù that performs 32-bit integer arithmetics. This core works on scalar values. \n**FP32**: The arithmetic ‚Äúcore‚Äù that performs 32-bit floating point arithmetics. This core works on scalar values.\n**Tensor Cores**: The arithmetic ‚Äúcore‚Äù that can both perform floating point arithmetics and integer arithmetics. This core works on a bunch of values at a time (hence the name tensor)](memory_hierarchy.png){.lightbox}\n\n\nThe above diagram hopefully depicts what a modern (Nvidia) GPU consists of. There‚Äôre a few things to note here about the hardware:\n\n1. Both L1 cache and L2 cache are ‚Äúinvisible‚Äù to programmers in the sense that you can‚Äôt directly manipulate them (but you can [set the persistence size of L2 cache](https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-l2-access-management), or [give hints](https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#cache-operators) to the machine w.r.t. the cache policy)\n2. L1 cache and Shared Memory actually the same physical memory, it‚Äôs up to the programmer to configure the size of each.\n3. The bandwidth between each component varies greatly from GPU to GPU, but generally\n    \n    $$\n    \\text{HBM} < \\text{L2} <\\text{L1} = \\text{Shared Memory} < \\text{Register File}\n    $$\n    \n4. Different GPU have different configurations of cores\n5. Tensor core [does not support fp32 operations](https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#wmma-type-sizes)\n\nWhat we can immediately conclude from this is that **we want to avoid communication with HBM by caching data aggressively**.\n\n### Memory Hierarchy\n\nLet‚Äôs take a closer look at the memories in a GPU. The following diagram demonstrates Nvidia GPU‚Äôs memory hierarchy, notice how each SMSP has its own registers, SMSPs in the same SM shares the the same shared memory and L1 cache. This is why thread blocks are assigned to SM, not SMSP.\n\n![Memory hierarchy of A100](A100_memory.png){.lightbox}\n\n## GPU Execution Model\n\nAnother important aspect of the GPU hardware is to understand how it executes. \n\n### SIMT\n\nThe execution model follows a [SIMT](https://en.wikipedia.org/wiki/Single_instruction,_multiple_threads#:~:text=Single%20instruction%2C%20multiple%20threads%20(SIMT,SIMD)%20is%20combined%20with%20multithreading.) model (as opposed to [SIMD](https://en.wikipedia.org/wiki/Single_instruction,_multiple_data) or other forms of parallel computing model), this roughly means **every line of code you write gets executed on multiple threads**, in parallel, as opposed to explicitly telling the program how to parallelize the workload.\n\nThe following examples demonstrate 2 cases where you explicitly tell the program how to do the parallelization.\n\n```python\nfrom multiprocessing import Pool\n\ndef f(x):\n\treturn x*x\n\nwith Pool(processes=4) as pool:\n\tresult = pool.map(f, range(10))\n```\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <omp.h>\n\nint f(int x) {\n    return x * x;\n}\n\nint main() {\n    const int num_elements = 10;\n    std::vector<int> result(num_elements);\n\n    // Parallelize the loop with OpenMP\n    #pragma omp parallel for\n    for (int i = 0; i < num_elements; ++i) {\n        result[i] = f(i);\n    }\n}\n```\n\nThe following example demonstrates CUDA‚Äôs SMIT model, just read the highlighted part.\n\n```cpp\n#include <iostream>\n#include <vector>\n\n// This is the device code, runs in GPU\n**// IMPORTANT: Every thread executes the same program, you don't have for loops**\n__global__ void square(int *d_result, int num_elements) {\n    int i = blockIdx.x * blockDim.x + threadIdx.x;\n    if (i < num_elements) {\n        d_result[i] = i * i;\n    }\n}\n\n// This is the host code, runs in CPU\nint main() {\n    const int num_elements = 10;\n    std::vector<int> result(num_elements);\n\n    int *d_result;\n    cudaMalloc((void**)&d_result, num_elements * sizeof(int));\n\n    int blockSize = 256;\n    int numBlocks = (num_elements + blockSize - 1) / blockSize;\n    **// This launchs the CUDA kernel on the GPU\n    // NOTE: this is non-blocking**\n    square<<<numBlocks, blockSize>>>(d_result, num_elements);\n\n    cudaMemcpy(result.data(), d_result, num_elements * sizeof(int), cudaMemcpyDeviceToHost);\n\n    cudaFree(d_result);\n\n    // Print the result\n    for (int i = 0; i < num_elements; ++i) {\n        std::cout << result[i] << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n\n```\n\nA reasonable question to ask is, if every thread is executing the same code, how is it going to solve any useful task? The subtlety here is that although each thread is executing the same code, **the data pointed by addresses in each thread is different**.\n\n### Execution Hierarchy\n\nGiven the hardware hierarchy above, CUDA provides an execution hierarchy as follows\n\n![Simplified CUDA execution hierarchy](execution_hierarchy.png){.lightbox}\n\nIn CUDA, the execution of every problem/kernel program is represented as **a set of thread blocks (called the grid)**. The way this division of the problem is done is managed by the programmer, for example, to do matrix multiplication of two 4096 * 4096 matrix, one can choose to assign the calculation of every 128 * 128 output to one block, effectively giving 1024 blocks (4096^2 / 128^2).\n\nEach block is assigned to **one and only one SM** (streaming multiprocessor), but multiple blocks can be assigned to one SM. The exact block-to-block distribution policy is not made public by Nvidia, but according to [3], the default distribution policy is **round-robin** (provided that there‚Äôs only one stream). Also, because each block will take up resources (register files, shared memory), the number of blocks (also called **occupancy**) that can be assigned to a single SM is limited by each block‚Äôs resource usage. As we‚Äôll see later, **we want higher occupancy in order to hide memory latency.**\n\nAnother important concept in CUDA is called a **warp**, which basically means a group of 32 threads. A block can contain a configurable number of warps. The idea of warp is important because it‚Äôs the smallest scheduling primitive in CUDA.\n\n![Warp is the smallest scheduling primitive, an SMSP can only execute instructions for one warp at a time. The ‚Äú.add‚Äù here simply symbolizes an addition operation carried out by each warp.](warp.png){.lightbox}\n\n\n![Every thread in a warp always executes the same thing (mostly, thread divergence can happen, sometimes intentionally by the programmer, in which case the execution is serialized by masking one group, execute; then masking another group, execute. This usually means degraded performance)](thread.png){.lightbox}\n\nEvery thread in a warp always executes the same thing (mostly, thread divergence can happen, sometimes intentionally by the programmer, in which case the execution is serialized by masking one group, execute; then masking another group, execute. This usually means degraded performance)\n\n### Latency Hiding\n\nThe left image above shows how different warps execute sequentially, but they are all doing arithmetic operations (addition), which is only part of the picture. Let‚Äôs see what happens if we  try to depict a more realistic picture, i.e., we should load data from/to memory before doing addition.\n\n![A more realistic depiction of different warp carrying out memory loading before doing addition. ](latency_hiding_1.png){.lightbox}\n\nAn important realization is that **memory operation takes much longer time (~400 cycles)** than arithmetic operations (~20 cycles [4]), so if there‚Äôs not enough warps on an SM that the scheduler can issue instructions to (because all of them are waiting for the memory load to complete, as all of their next operation depends on this), there will be cycles where no instructions are issued by the warp scheduler. This is very bad for performance because we are essentially wasting hardwares.\n\nNow consider what happens if we have more warps\n\n![More warps hide memory latency, no wasted cycles!](latency_hiding_2.png){.lightbox}\n\nAs more warps are assigned to an SM, the parallelism allows us to hide the latency of memory load, because we are always doing some work. Note that the parallelism can come from more warps per block, or more blocks. The difference that makes is that warps from different blocks can‚Äôt talk to each other via shared memory.\n\n### Occupancy\n\nOccupancy measures the ratio between the number of active warps on an SM and the theoretical limit, i.e.,\n\n$$\n\\text{Occupancy} = \\frac{\\text{Active concurrent warps}}{\\text{Theoretical limit of number of active warps in an SM}} \n$$\n\nUsually, **the higher the occupancy, the more opportunity that the SM scheduler has in terms of hiding latency**. However, importantly, **this does not universally lead to more efficient program because more warps means smaller register usage per warp, and register access is much faster than shared memory access**. More on this can be found on [@nvidia_lower_occupancy].\n\nTo get the numerator, we have to profile the kernel and obtained from measuring the warp scheduler‚Äôs issuance statistics. Usually this done via Nvidia‚Äôs [nsight compute](https://developer.nvidia.com/nsight-compute) (in the old days it‚Äôs nvprof, but that‚Äôs long gone).\n\nThe denominator is fixed once the programmer determines the kernel‚Äôs launch configuration (block size, grid size, etc.), **at compile time.** Note that the theoretical limit has another upper bound regardless of your launch configuration, i.e., the hardware-defined maximum number of resident warps per SM (look for the `Maximum number of resident warps per SM` term on [@nvidia_cuda_guide]). The latest number for Hopper architecture is 64.\n\nAt compile time, the denominator is determined by mainly 3 resources as shown below\n\n|  | Block Resource Required | Limiting Factor |\n| --- | --- | --- |\n| 1 | Shared Memory per Block | Shared Memory per SM |\n| 2 | # Threads per block | # Threads limit per SM |\n| 3 | # Register usage per thread | Register File per SM |\n\nConcretely, the number of blocks that can be assigned to an SM is determined by taking the minimum of $\\frac{\\text{Total Resource}}{\\text{Resources Required per Block}}$ for all these 3 resources, meaning\n\n$$\n\\begin{gathered}\\text { Theoretical Limit }=\\\\\\min\\left(\\lfloor\\frac{\\text{SHM/ SM}}{\\text{SHM / block}}\\cdot\\text{Warp/block}\\rfloor, \\lfloor\\frac{\\text{MaxThreads/SM}}{\\text{WarpSize}}\\rfloor, \\lfloor\\frac{\\text{Reg Size/SM}}{\\text{Reg/thread} \\cdot \\text{WarpSize}}\\rfloor\\right)\\end{gathered}\n\n$$\n\nnotations are as follows\n\n- MaxThreads : the maximum number of threads an SM can take\n- SHM: shared memory in bytes\n- Warp/Block: number of warps per block, or blockSize/warpSize\n- WarpSize: number of threads per warp, always 32 in all Nvidia GPU so far\n- Reg/thread: register usage per thread\n\nDue to the importance of occupancy, there both [official](https://developer.nvidia.com/nsight-compute) and [unofficial](https://xmartlabs.github.io/cuda-calculator/) tools to calculate the theoretical limit.\n\n![theoretical `#warps` depending on different launch configuration/resource usage, from [CUDA Occupancy Calculator (xmartlabs.github.io)](https://xmartlabs.github.io/cuda-calculator/)](occupancy.png){.lightbox}\n\nNote how the `#warps` look like step change functions as the resource usage changes. This is because the $\\lfloor \\quad \\rfloor$ operation we did, as  `#warps` needs to be an integer. The implication is that for a given level of occupancy, there‚Äôs a range of resource allocation we can give to each thread without affecting occupancy.\n\n# Matrix Multiplication\n\nNow that we covered the basics, let‚Äôs try to do a matrix multiplication. We are going to demonstrate various CUDA techniques by doing this.\n\n1. Naive\n2. Shared memory caching\n3. Thread tiling\n4. Thread tiling + vectorized access + coalesced access\n5. Thread tiling+ vectorized access + coalesced access +  prefetching/pipelining\n6. Thread tiling+ vectorized access + coalesced access +  prefetching/pipelining + swizzle\n7. Warp tiling + vectorized access\n8. ~~Warp tiling + vectorized access + memory access swizzle~~\n9. Warp tiling + vectorized access + k-split\n\n## Naive\n\nThe naive algorithm to solve the matrix multiplication is demonstrated by both the mathematical definition as well as the diagram below\n\n![Naive matmul](naive_matmul.png){.lightbox}\n\n$$\n\\begin{gathered}C_{ij}  = \\sum_{k=1}^{K}A_{ik}B_{kj}\\end{gathered}\n$$\n\nThe above shows the most essential operation in matmul, but in practice, people usually do \n\n$$\nC = \\alpha\\cdot(A \\times B) + \\beta\\cdot C\n$$\n\nwhich is a multiply-accumulation (MAC) operation with 2 scaling factors.\n\nThe following code shows the implementation of the naive matmul operation.\n\n```cpp\n#include <cuda_runtime.h>\n\n#define DIV_CEIL(M, N) int(((M) + (N)-1) / (N))\n\n__global__ void sgemm_naive(int M, int N, int K, float alpha, const float *A,\n                            const float *B, float beta, float *C) {\n  const uint x = blockIdx.x * blockDim.x + threadIdx.x;\n  const uint y = blockIdx.y * blockDim.y + threadIdx.y;\n\n  if (x < M && y < N) {\n    float tmp = 0.0;\n    for (int i = 0; i < K; ++i) {\n      tmp += A[x * K + i] * B[i * N + y];\n    }\n    C[x * N + y] = alpha * tmp + beta * C[x * N + y];\n  }\n}\n\nint main(int M, int N, int K) {\n...\n\ndim3 blockDim(32, 32);\ndim3 gridDim(DIV_CEIL(M, 32), DIV_CEIL(N, 32));\nsgemm_naive<<<gridDim, blockDim>>>(M, N, K)\n\n...\n}\n```\n\nRunning the above code gives us the following poor performance.\n\n![Naive matmul performance](naive_matmul_perf.png){.lightbox}\n\nTo understand why the performance is poor, consider the [arithmetic intensity](https://crd.lbl.gov/divisions/amcr/computer-science-amcr/par/research/roofline/introduction/#:~:text=Arithmetic%20Intensity%20is%20the%20ratio,ndependent%20of%20the%20vector%20size.) of this kernel:\n\n$$\n\\begin{gathered}\n\\text{Arithmetic Intensity} = \\frac{\\text{Bytes Computed}}{\\text{Bytes I/IO}}\\\\\n= \\frac{1(C_{ij}) \\times 4 (\\text{bytes per float})}{(M(A_{i:})+ N(B_{:j}))\\times 4(\\text{bytes per float})}\\\\\n=\\frac{1}{2K}\n\\end{gathered}\n$$\n\nwhich is very low. This is saying, for every $2K$ elements read, we are only calculating $1$ element from the memory read. This is bad because memory read is expensive, and we ideally want to do more work on the read data than just computing 1 number.\n\nThis can be verified by profiling this kernel with nsight compute and checking the roofline model:\n\n![As can be seen, the arithmetic intensity of this kernel is too low, resulting 6% of theoretical fp32 performance achieved](naive_matmul_roofline.png){.lightbox}\n\nNot only is the arithmetic intensity low, attention should also be paid to the 2 purple lines above\n\n```cpp\ntmp += A[x * K + i] * B[i * N + y];\n...\n    C[x * N + y] = alpha * tmp + beta * C[x * N + y];\n```\n\nThe first line reads data from the device/global memory, without touching the shared memory at all, and the second line read from and write to device/global memory. Both lines are going to be very slow in GPU context. This will result in a very high **throughput**, but very bad performance. This is an example showing that **maximizing throughput should never be the only optimization goal.**\n\n![This naive kernel achieves full throughput in both memory and compute! but it‚Äôs very bad algorithm](full_throughput.png){.lightbox}\n\n## Shared Memory Caching\n\nSince we are not using shared memory, let‚Äôs try to resolve this first by using shared memory to cache the data before doing calculation, which results in the following algorithm.\n\n![Naive implementation + smem cache\nBM and BN are parameters determining how we partition the C matrix by blocks\nBK is the parameter determining how much data we load from global memory to shared memory every time. We have to have this BK parameter because shared memory is very limited, a whole BMxK block of data usually doesn‚Äôt fit](smem_matmul.png)\n\nAdding smem access gives us the following performance, which is not that impressive. This is because adding smem access does not change the arithmetic intensity. The reason we still see some benefit in small matrix sizes is likely due to the fact that it increases L2 cache hit rate and the memory access is more coalesced as we are loading larger chunk of memories.\n\n![Shared memory cached matmul performance](smem_matmul_perf.png){.lightbox}\n\n- Smem access kernel\n\n    ```cpp\n    template<const int BLOCK_SIZE>\n    __global__ void sgemm_smem(int M, int N, int K, float alpha, float *A, float *B, float beta, float *C) {\n        int bx = blockIdx.x;\n        int by = blockIdx.y;\n    \n        const int BM = BLOCK_SIZE;\n        const int BN = BLOCK_SIZE;\n        const int BK = BLOCK_SIZE;\n    \n        int tx = threadIdx.x % BN;\n        int ty = threadIdx.x / BN;\n    \n        __shared__ float As[BM * BK];\n        __shared__ float Bs[BK * BN];\n    \n        A = &A[by * BM * K];\n        B = &B[bx * BN];\n        C = &C[by * BM * N + bx * BN];\n    \n        float tmp = 0.;\n        for (int k = 0; k < K; k += BK) {\n            As[ty * BK + tx] = A[ty * K + tx];\n            Bs[ty * BN + tx] = B[ty * N + tx];\n            __syncthreads();\n            A += BK;\n            B += BK * N;\n            for (int i = 0; i < BK; i++) {\n                tmp += As[ty * BK + i] * Bs[i * BN + tx];\n            }\n            __syncthreads();\n        }\n        C[ty * N + tx] = alpha * tmp + beta * C[ty * N + tx];\n    }\n    ```\n    \n\n## Thread Tiling\n\nNow let‚Äôs try to improve the arithmetic intensity. We can do this because for each $A_{i:}$  we read, we can theoretically calculate the entire row of $C_{i:}$, provided that we have the corresponding columns of $B$ read in. So as opposed to calculating a single element in $C$, we can theoretically calculate a whole row in $C$. But that‚Äôs too extreme, in practice, we can do something called thread tiling:\n\n![Thread tiling + Shared memory access](smem_thread_tile_matmul.png){.lightbox}\n\nThe immediate benefit can be seen by calculating the arithmetic intensity again:\n\n$$\n\\begin{gathered}\n\\text{Arithmetic Intensity} = \\frac{\\text{Bytes Computed}}{\\text{Bytes I/IO}}\\\\\n= \\frac{TM \\times TN \\times 4 (\\text{bytes per float})}{(K\\times TN +  K\\times TM)\\times 4(\\text{bytes per float})}\\\\\n=\\frac{TM\\times TN}{K\\times(TM + TN)}\n\\end{gathered}\n$$\n\nAnd therefore the arithmetic intensity improvement is\n\n$$\n\\text{Improvement} = \\frac{\\frac{TM\\cdot TN}{K\\cdot(TM + TN)}}{\\frac{1}{2K}} = \\frac{2}{1/TM + 1/TN}\n$$\n\nfor squared matrices, this can be further simplified\n\n$$\n\\text{Improvement} = \\frac{2}{2/TM} = TM\n$$\n\nwhich means the arithmetic intensity improvement is proportional to the size of the thread tiling. Note that we can‚Äôt arbitrarily make $TM$ as large as we want for the following reason:\n\n1. A $LM/LN$ too large means less threads/warps, which causes occupancy to drop, therefore hinders performance\n2. A $LM/LN$ too large means more register usage per warp, which also causes occupancy to drop\n3. A $LM/LN$ too large can even cause register to overflow to local storage (on global memory), thereby significantly degrading performance\n\nWithout much tuning, we are able to get the following performance with thread tiling:\n\n![Thread tiling performance](thread_tiling_perf.png){.lightbox}\n\nNow we are talking üôÇ\n\n- Thread tiling code\n    \n    ```cpp\n    #pragma once\n    \n    #include <cuda_runtime.h>\n    #include <cublas_v2.h>\n    #include <stdio.h>\n    #include <stdlib.h>\n    \n    template<const int BM,\n            const int BN,\n            const int BK,\n            const int TM,\n            const int TN>\n    __global__ void mysgemm_v4(int M, int N, int K, float alpha, float *A, float *B, float beta, float *C) {\n        int bx = blockIdx.x;\n        int by = blockIdx.y;\n    \n        int block_row_thread = BN / TN;\n        int block_col_thread = BM / TM;\n        int thread_num = block_row_thread * block_col_thread;\n    \n        int tx = (threadIdx.x % block_row_thread) * TN;\n        int ty = (threadIdx.x / block_row_thread) * TM;\n    \n        __shared__ float As[BM * BK];\n        __shared__ float Bs[BK * BN];\n    \n        A = &A[by * BM * K];\n        B = &B[bx * BN];\n        C = &C[by * BM * N + bx * BN];\n    \n        int a_tile_row = threadIdx.x / BK;\n        int a_tile_col = threadIdx.x % BK;\n        int a_tile_stride = thread_num / BK;\n    \n        int b_tile_row = threadIdx.x / BN;\n        int b_tile_col = threadIdx.x % BN;\n        int b_tile_stride = thread_num / BN;\n    \n        float tmp[TM][TN] = {0.};\n        for (int k = 0; k < K; k += BK) {\n            for (int i = 0; i < BM; i += a_tile_stride) {\n                As[(a_tile_row + i) * BK + a_tile_col] = A[(a_tile_row + i) * K + a_tile_col];\n            }\n            for (int i = 0; i < BK; i += b_tile_stride) {\n                Bs[(b_tile_row + i) * BN + b_tile_col] = B[(b_tile_row + i) * N + b_tile_col];\n            }\n            __syncthreads();\n            A += BK;\n            B += BK * N;\n            for (int i = 0; i < BK; i++) {\n                for (int j = 0; j < TM; j++) {\n                    for (int l = 0; l < TN; l++)\n                        tmp[j][l] += As[(ty + j) * BK + i] * Bs[tx + l + i * BN];\n                }\n            }\n            __syncthreads();\n        }\n        for (int j = 0; j < TM; j++) {\n            for (int l = 0; l < TN; l++)\n                C[(ty + j) * N + tx + l] = alpha * tmp[j][l] + beta * C[(ty + j) * N + tx + l];\n        }\n    }\n    ```\n    \n\n## Vectorized Access & Coalesced Access\n\nOne of the common optimization method is [@nvidia_vectorized_memory], which is basically saying instead of getting a single float at a time, we want to get 2, or 4 floats at a time. This improves performance because\n\n- In CUDA, all device/global memory access is done via 32-, 64-, or 128-byte memory transactions\n- For threads within a warp accessing global memories, their access will be grouped together in 32-, 64-, or 128-byte memory transactions, after data is read from memory, data for the warp will be distributed onto individual threads\n- If we are getting 4 consecutive 32-byte memory (8 floats) from a warp, we are issuing 4 instructions (the `LD` instruction); but if we are getting one 128-byte from a warp, we are only issuing 1 instruction (the `LD.128` instruction). There‚Äôre 2 benefits:\n    - Smaller number of instructions ‚áí instruction cache hit rate will improve\n    - Despite that the issuance of load instruction itself takes small number of cycles (majority of time for a `LD` operation is spent on waiting, and that‚Äôs usually hidden via high occupancy), there‚Äôre still small benefit of the reduced number of instruction issuance.\n    \n\nThe following graph demonstrates the benefit of vectorized loading.\n\n![Data movement rate comparison between different size of element read per thread](vectorization.png){.lightbox}\n\nThe actual implementation in CUDA is actually simple, instead of dealing with `float` type, just deal with `float4` , and the compiler will compile it to the correct instruction.\n\nBeside vectorizing global memory access, we can also notice that there‚Äôs a non-coalesced memory access from shared memory when actually performing the per-thread multiplication. Consider the 2 outlined blocks of data that currently resides in shared memory:\n\n1. the access to the red block from B is coalesced, because B is row-majored\n2. the access to the red block from A is **not coalesced**, also because A is row-majored\n\nNote that it doesn‚Äôt matter how we choose iterate within the thread tile, we can read in a sub-row from A and a sub-column from B and one of them would still be **non-coalesced**.\n\n![Coalesced access](coalesced_access.png){.lightbox}\n\nTo solve this, we can simply adopt a transposed shared memory layout.\n\n![Transpose the shared memory layout can result in coalesced read into registers (but non-coalesced write into shared memory, which can be handled via pipelining).\nHere the region marked by t1 and t2 are indicating what data each thread is responsible of loading from global memory and writing to shared memory. In practice, a thread can handle less than a row in the sub-block of global memory.](transpose_memory.png){.lightbox}\n\nCombining the vectorization load and coalesced access, we get the following performance\n\n![Approaching 80% CuBLAS performance with vectorization and coalesced access](coalesced_perf.png){.lightbox}\n\n- code\n    \n    ```cpp\n    #pragma once\n    \n    #include <cuda_runtime.h>\n    #include <cublas_v2.h>\n    #include <stdio.h>\n    #include <stdlib.h>\n    \n    #define OFFSET(row, col, ld) ((row)*(ld)+(col))\n    #ifndef FETCH_FLOAT4\n    #define FETCH_FLOAT4(pointer) (reinterpret_cast<float4*>(&(pointer))[0])\n    #endif\n    \n    template<const int BM,\n            const int BN,\n            const int BK,\n            const int TM,\n            const int TN>\n    __global__ void sgemm_tt_(int M, int N, int K, float alpha, float *A, float *B, float beta, float *C) {\n        int bx = blockIdx.x;\n        int by = blockIdx.y;\n    \n        const int block_row_thread = BN / TN;\n        const int block_col_thread = BM / TM;\n        const int thread_num = block_row_thread * block_col_thread;\n    \n        int tx = (threadIdx.x % block_row_thread) * TN;\n        int ty = (threadIdx.x / block_row_thread) * TM;\n    \n        __shared__ float As[BK * BM];\n        __shared__ float Bs[BK * BN];\n    \n        const int ldg_a_num = BK * BM / thread_num / 4; \n        const int ldg_b_num = BK * BN / thread_num / 4;\n    \n        int a_tile_row = threadIdx.x / (BK / 4);\n        int a_tile_col = threadIdx.x % (BK / 4) * 4;\n        int a_tile_stride = BM / ldg_a_num; \n    \n        int b_tile_row = threadIdx.x / (BN / 4);\n        int b_tile_col = threadIdx.x % (BN / 4) * 4;\n        int b_tile_stride = BK / ldg_b_num;\n    \n        float accum[TM][TN] = {0.};\n    \n        float ldg_a_reg[4 * ldg_a_num] = {0.};\n    \n        float a_frag[TM];\n        float b_frag[TN];\n    \n        A = &A[by * BM * K];\n        B = &B[bx * BN];\n        C = &C[by * BM * N + bx * BN];\n    \n        for (int k = 0; k < K; k += BK) {\n            for (int i = 0; i < BM; i += a_tile_stride) {\n                int ldg_index = i / a_tile_stride * 4; \n                FETCH_FLOAT4(ldg_a_reg[ldg_index]) =\n                        FETCH_FLOAT4(A[OFFSET(a_tile_row + i, a_tile_col, K)]);\n                As[OFFSET(a_tile_col, i + a_tile_row, BM)] = ldg_a_reg[ldg_index];\n                As[OFFSET(a_tile_col + 1, i + a_tile_row, BM)] = ldg_a_reg[ldg_index + 1];\n                As[OFFSET(a_tile_col + 2, i + a_tile_row, BM)] = ldg_a_reg[ldg_index + 2];\n                As[OFFSET(a_tile_col + 3, i + a_tile_row, BM)] = ldg_a_reg[ldg_index + 3];\n            }\n            for (int i = 0; i < BK; i += b_tile_stride) {\n                FETCH_FLOAT4(Bs[OFFSET(b_tile_row + i, b_tile_col, BN)]) =\n                        FETCH_FLOAT4(B[OFFSET(b_tile_row + i, b_tile_col, N)]);\n            }\n            __syncthreads();\n            A += BK;\n            B += BK * N;\n            for (int i = 0; i < BK; i++) {\n                for (int m = 0; m < TM; m += 4) {\n                    FETCH_FLOAT4(a_frag[m]) = FETCH_FLOAT4(As[OFFSET(i, ty + m, BM)]);\n                }\n                for (int n = 0; n < TN; n += 4) {\n                    FETCH_FLOAT4(b_frag[n]) = FETCH_FLOAT4(Bs[OFFSET(i, tx + n, BN)]);\n                }\n                for (int m = 0; m < TM; m++) {\n                    for (int n = 0; n < TN; n++) {\n                        accum[m][n] += a_frag[m] * b_frag[n];\n                    }\n                }\n            }\n            __syncthreads();\n        }\n        for (int m = 0; m < TM; m++) {\n            for (int n = 0; n < TN; n += 4) {\n                float4 ctmp = FETCH_FLOAT4(C[OFFSET(ty + m, tx + n, N)]);\n                ctmp.x = alpha * accum[m][n] + beta * ctmp.x;\n                ctmp.y = alpha * accum[m][n + 1] + beta * ctmp.y;\n                ctmp.z = alpha * accum[m][n + 2] + beta * ctmp.z;\n                ctmp.w = alpha * accum[m][n + 3] + beta * ctmp.w;\n                FETCH_FLOAT4(C[OFFSET(ty + m, tx + n, N)]) = ctmp;\n            }\n        }\n    }\n    ```\n    \n\n## Data prefetching/pipelining\n\nIn CUDA, from the point of view of the warp scheduler, most instructions are ‚Äúasynchronous‚Äù in the sense that they all take some cycles to finish. \n\nFor example\n\n```cpp\nld.s32 r1, [j];\nld.s32 r2, [k];\nadd.s32 r3, r1, r2;\nst.s32 [i], r3;\n```\n\nIn this PTX code (PTX is the pseudo-assembly language that C++ CUDA code compiles to), let‚Äôs say that the warp scheduler schedules the first `line ld.s32 r1, [j];`, the data from address `[j]` will not become ready in the next cycle (and won‚Äôt be for around 400 cycles if we are loading from global memory), so the scheduler simply fires away and issues the `ld.s32 r2, [k];` without waiting for `r1`  to be loaded.\n\nBut when the scheduler sees `add.s32 r3, r1, r2;`  there‚Äôs clearly a dependency on `r1` and `r2` to be available.  So this warp will not be **eligible** for executing the next instruction, and we call it a **stalled warp**. Instead the scheduler will look at other warps to see if it schedule them. If no warps are eligible for execution, we‚Äôll be wasting execution units, and the number of active warps we talked about in the previous section will reduced, causing a lower occupancy.\n\nWith this in mind, we can devise a new way to optimize our kernel by prefetching the data and overlapping the fetch with computation. Here‚Äôs what I mean\n\n![Prefetching with 2 stages](pipeline_matmul.png){.lightbox}\n\nOf course we don‚Äôt have to limit ourselves to 2 stages, and in fact, modern CUDA has a nice [`pipeline` interface](https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#asynchronous-data-copies-using-cuda-pipeline) to work with for multi-stage loading. \n\n![Prefetching with 3 stages](pipeline_matmul_3_stages.png){.lightbox}\n\nNote that we can also do prefetching for the loading from smem to register step.\n\nTo implement prefetching is actually pretty simple, because the warp scheduler implements it for us. All we need to do is double the size of shared memory and register size and keep an index that points to the current stage of computation.\n\nWith prefetching, this is the result\n\n![Performance with prefetching](pipeline_matmul_perf.png){.lightbox}\n\n- Code\n    \n    ```cpp\n    #pragma once\n    \n    #include <cuda_runtime.h>\n    #include <cublas_v2.h>\n    #include <stdio.h>\n    #include <stdlib.h>\n    \n    #ifndef FETCH_FLOAT4\n    #define FETCH_FLOAT4(pointer) (reinterpret_cast<float4 *>(&(pointer))[0])\n    #endif\n    #ifndef DIV_UP\n    #define DIV_UP(m, n) ((m + n - 1) / n)\n    #endif\n    #define GROUP_SIZE 8\n    #define WARP_SIZE 32\n    \n    namespace kernel9 {\n    \n    template<int BM, int BN, int BK>\n    __device__ __forceinline__ void gmem_to_smem(float *A, float *B, float smem_a[][BK][BM], float smem_b[][BK][BN], float ldreg_a[][4], float ldreg_b[][4], int a_smem_rounds, int a_stride, int a_smem_x, int a_smem_y, int b_smem_rounds, int b_stride, int b_smem_y, int b_smem_x, int phase)\n    {\n    #pragma unroll // A: global -> reg buffer\n        for (int i = 0; i < a_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_a[i]) = FETCH_FLOAT4(A[i * a_stride]);\n            smem_a[phase][a_smem_x][a_smem_y + i * a_stride] = ldreg_a[i][0];\n            smem_a[phase][a_smem_x + 1][a_smem_y + i * a_stride] = ldreg_a[i][1];\n            smem_a[phase][a_smem_x + 2][a_smem_y + i * a_stride] = ldreg_a[i][2];\n            smem_a[phase][a_smem_x + 3][a_smem_y + i * a_stride] = ldreg_a[i][3];\n        }\n    #pragma unroll // B: global -> reg buffer\n        for (int i = 0; i < b_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_b[i]) = FETCH_FLOAT4(B[i * b_stride]);\n            FETCH_FLOAT4(smem_b[phase][b_smem_y][b_smem_x + i * b_stride]) = FETCH_FLOAT4(ldreg_b[i]);\n        }\n    }\n    \n    __device__ __forceinline__ void gmem_to_reg(float *A, float *B, float ldreg_a[][4], float ldreg_b[][4], int a_smem_rounds, int a_stride, int b_smem_rounds, int b_stride)\n    {\n    #pragma unroll // A: global -> reg buffer\n        for (int i = 0; i < a_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_a[i]) = FETCH_FLOAT4(A[i * a_stride]);\n        }\n    #pragma unroll // B: global -> reg buffer\n        for (int i = 0; i < b_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_b[i]) = FETCH_FLOAT4(B[i * b_stride]);\n        }\n    }\n    \n    template<int BM, int BN, int BK>\n    __device__ __forceinline__ void reg_to_smem(float smem_a[][BK][BM], float smem_b[][BK][BN], float ldreg_a[][4], float ldreg_b[][4], int a_smem_rounds, int a_stride, int a_smem_x, int a_smem_y, int b_smem_rounds, int b_stride, int b_smem_y, int b_smem_x, int phase)\n    {\n    #pragma unroll // A: reg buffer -> smem\n        for (int i = 0; i < a_smem_rounds; ++i)\n        { // note that this is uncoalesce memory write, and only 4 floats * 4 byte/float = 16 bytes per write\n            smem_a[phase][a_smem_x][a_smem_y + i * a_stride] = ldreg_a[i][0];\n            smem_a[phase][a_smem_x + 1][a_smem_y + i * a_stride] = ldreg_a[i][1];\n            smem_a[phase][a_smem_x + 2][a_smem_y + i * a_stride] = ldreg_a[i][2];\n            smem_a[phase][a_smem_x + 3][a_smem_y + i * a_stride] = ldreg_a[i][3];\n        }\n    #pragma unroll // B: reg buffer -> smem\n        for (int i = 0; i < b_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(smem_b[phase][b_smem_y][b_smem_x + i * b_stride]) = FETCH_FLOAT4(ldreg_b[i]);\n        }\n    }\n    \n    template<int BM, int BN, int BK, int TM, int TN>\n    __device__ __forceinline__ void smem_to_frag(float frag_a[][TM], float frag_b[][TN], float smem_a[][BK][BM], float smem_b[][BK][BN], int frag_phase, int smem_phase, int bk)\n    {\n        // int swizzel_id = (threadIdx.x / 4) % 2;\n    #pragma unroll \n        for (int i = 0; i < TM; i += 4)\n        {\n            // int swizzel_i = ((i / 4) ^ swizzel_id) * 4;\n            FETCH_FLOAT4(frag_a[frag_phase][i]) = FETCH_FLOAT4(smem_a[smem_phase][bk][threadIdx.y * TM + i]);\n        }\n    #pragma unroll\n        for (int i = 0; i < TN; i += 4)\n        {\n            // int swizzel_i = ((i / 4) ^ swizzel_id) * 4;\n            FETCH_FLOAT4(frag_b[frag_phase][i]) = FETCH_FLOAT4(smem_b[smem_phase][bk][threadIdx.x * TN + i]);\n        }\n    }\n    \n    } // namespace kernel 9\n    \n    // This function assumes B is already transposed\n    template <const int BM,\n              const int BN,\n              const int BK,\n              const int TM,\n              const int TN,\n              const int THREAD_NUMS>\n    __global__ void __launch_bounds__(THREAD_NUMS, 2) mysgemm_v9(int M, int N, int K, float alpha, float *A, float *B, float beta, float *C)\n    {\n        int bx = blockIdx.x;\n        int by = blockIdx.y;\n        constexpr int threads_per_block = BM / TM * BN / TN;\n        constexpr int a_ele_per_thread_smem = BM * BK / threads_per_block;\n        constexpr int b_ele_per_thread_smem = BK * BN / threads_per_block;\n        constexpr int a_smem_rounds = a_ele_per_thread_smem / 4;\n        constexpr int b_smem_rounds = b_ele_per_thread_smem / 4;\n        constexpr int a_threads_per_row_per_round = BK / 4;\n        int a_stride = threads_per_block / a_threads_per_row_per_round * K;\n        constexpr int b_threads_per_row_per_round = BN / 4;\n        int b_stride = threads_per_block / b_threads_per_row_per_round * N;\n        // int tid = threadIdx.y * blockDim.x + threadIdx.x;\n        // int lane_id = tid % 32;\n        int a_smem_x = ((threadIdx.y * blockDim.x + threadIdx.x) % a_threads_per_row_per_round) * 4;\n        int a_smem_y = (threadIdx.y * blockDim.x + threadIdx.x) / a_threads_per_row_per_round;\n        int b_smem_x = ((threadIdx.y * blockDim.x + threadIdx.x) % b_threads_per_row_per_round) * 4;\n        int b_smem_y = (threadIdx.y * blockDim.x + threadIdx.x) / b_threads_per_row_per_round;\n    \n        static_assert((BM * BK) % threads_per_block == 0);\n        static_assert((BK * BN) % threads_per_block == 0);\n        static_assert(a_ele_per_thread_smem % 4 == 0);\n        static_assert(b_ele_per_thread_smem % 4 == 0);\n        static_assert(BK % 4 == 0);\n        static_assert(BN % 4 == 0);\n        static_assert(threads_per_block / a_threads_per_row_per_round >= 1); // at least cover a row per round\n        static_assert(threads_per_block / b_threads_per_row_per_round >= 1); // at least cover a row per round\n        static_assert(TN % 4 == 0); // at least 4 elements per thread and TN is a multiple of 4\n    \n        float accum[TM][TN] = {0.};\n    \n        __shared__ float smem_a[2][BK][BM]; // a transposed version of A block\n        __shared__ float smem_b[2][BK][BN];\n    \n        // register for loading from global mem to smem\n        float ldreg_a[a_smem_rounds][4];\n        float ldreg_b[b_smem_rounds][4];\n    \n        // fragment/register for computation\n        float frag_a[2][TM];\n        float frag_b[2][TN];\n    \n        // move A to thread start\n        A = &A[by * BM * K + a_smem_y * K + a_smem_x];\n        B = &B[b_smem_y * N + bx * BN + b_smem_x];\n    \n        // 1.1 fetch from global to smem, use register as buffer\n        kernel9::gmem_to_smem<BM, BN, BK>(A, B, smem_a, smem_b, ldreg_a, ldreg_b, a_smem_rounds, a_stride, a_smem_x, a_smem_y, b_smem_rounds, b_stride, b_smem_y, b_smem_x, 0);\n        __syncthreads(); // need the sync such that the following fragment can be obtained\n    \n        // 1.2 load 0 round of smem->frag\n        kernel9::smem_to_frag<BM, BN, BK, TM, TN>(frag_a, frag_b, smem_a, smem_b, 0, 0, 0); // load first batch of frag from first block of smem\n        int smem_write_index = 1; // next index of smems to write to\n        int smem_read_index; // read is current write\n    \n        // 2. start the blockwise loop\n        for (int k = 0; k < K / BK ; ++k)\n        {\n            // 2.0 fetch from global to smem, use register as buffer\n            if (k + 1 < K / BK) {\n                A += BK; // every iteration, A moves BK to the right\n                B += N * BK; // every iteration, B moves BK * N down\n                kernel9::gmem_to_reg(A, B, ldreg_a, ldreg_b, a_smem_rounds, a_stride, b_smem_rounds, b_stride); // only load to reg, this is non-blocking\n            }\n            // 2.1 use the frag already loaded to compute the outer product, note that we do register prefetching here\n    \n            smem_read_index = smem_write_index ^ 1;\n    #pragma unroll\n            for (int b_k = 1; b_k < BK; ++b_k) // load one sub row at a time from smem to frag\n            {\n                kernel9::smem_to_frag<BM, BN, BK, TM, TN>(frag_a, frag_b, smem_a, smem_b, b_k % 2, smem_read_index, b_k);\n    #pragma unroll\n                for (int i = 0; i < TM; ++i)\n                { // outer product for the previous prefetched frag\n    #pragma unroll\n                    for (int j = 0; j < TN; ++j)\n                    {\n                        accum[i][j] += frag_a[(b_k - 1) % 2][i] * frag_b[(b_k - 1) % 2][j];\n                    }\n                }\n            }\n            // 2.2 if there's next block, start loading from reg to smem\n            if (k + 1 < K / BK) {\n                kernel9::reg_to_smem<BM, BN, BK>(smem_a, smem_b, ldreg_a, ldreg_b, a_smem_rounds, a_stride, a_smem_x, a_smem_y, b_smem_rounds, b_stride, b_smem_y, b_smem_x, smem_write_index);\n                __syncthreads();\n                // prefetch a round of fragments from the current write, this will be blocking\n                kernel9::smem_to_frag<BM, BN, BK, TM, TN>(frag_a, frag_b, smem_a, smem_b, 0, smem_write_index, 0);\n                smem_write_index ^= 1; // update next write\n            }\n    #pragma unroll\n            for (int i = 0; i < TM; ++i) \n            { // one last round of outer product because we have only done BK - 1 products\n    #pragma unroll\n                for (int j = 0; j < TN; ++j)\n                {\n                    accum[i][j] += frag_a[(BK - 1) % 2][i] * frag_b[(BK - 1) % 2][j];\n                }\n            }\n        }\n    \n        // 3. put the accumulate value down to C\n        // move C to thread tile start\n        C = &C[(by * BM + threadIdx.y * TM) * N + bx * BN + threadIdx.x * TN];\n    #pragma unroll\n        for (int i = 0; i < TM; ++i) {\n    #pragma unroll\n            for (int j = 0; j < TM; j += 4) {\n                float4 tmp = FETCH_FLOAT4(C[i * N + j]);\n                tmp.x = alpha * accum[i][j] + beta * tmp.x;\n                tmp.y = alpha * accum[i][j + 1] + beta * tmp.y;\n                tmp.z = alpha * accum[i][j + 2] + beta * tmp.z;\n                tmp.w = alpha * accum[i][j + 3] + beta * tmp.w;\n                FETCH_FLOAT4(C[i * N + j]) = tmp;\n            }\n        }\n    }\n    \n    ```\n    \n\n## Swizzle\n\nI was not particularly impressed with the result achieved by prefetching. If I profile the kernel, I found that the arithmetic intensity is high enough to achieve theoretical full performance, I also saw a good enough occupancy ($\\text{active warps} = 3.84$ ‚áí $\\text{occupancy} = \\frac{3.84}{4} = 96\\%$ ). So the issue should be a ‚Äúnon-algorithmic‚Äù one.\n\n::: {layout-ncol=2}\n\n![Arithmetic intensity is high enough](swizzle_intensity_high.png){.lightbox}\n\n![Occupancy is high](swizzle_occupancy_high.png){.lightbox}\n\n:::\n\n\nLooking closer at the profiler raw output, I noticed that there‚Äôs a very hight count of `l1text__data_bank_conflicts_pipe_lsu_mem_shared.sum` and `smsp__sass_l1text_data_bank_conflicts_pipe_lsu_mem_shared_op_st.sum` , the former indicates the memory read instructions have a very high ‚Äúbank conflict‚Äù, the latter indicates that memory writes instructions have a very high ‚Äúbank conflict‚Äù.\n\n![Profiling result indicating high bank conflicts](swizzle_bank_conflict.png)\n\nThere‚Äôre [good resources](https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#shared-memory-5-x) explaining what bank conflicts are, here‚Äôs how I understand it. Remember when we discussed vectorization, I said that in CUDA, all global memory access are done in 32-, 64-, or 128-byte transactions? Turns out that a different access constraint is applied on shared memory access. \n\nIn CUDA, every shared memory access is done via a memory ‚Äúbank‚Äù (think of it as an access point with 32-bit bandwidth per cycle). There‚Äôre 32 banks in shared memory for all SMs. The bank that a certain memory access goes through is determined by \n\n$$\n\\text{Bank ID} = \\lfloor(\\text{Addr} \\% 128) / 4\\rfloor\n$$\n\nwhere we assume the memory is byte-addressable. The 32 banks correspond to 32 threads in a warp, so the best pattern for arrange shared memory access is one where each thread access a different 4-byte (32 bits) in a 128-byte aligned consecutive 128-byte chunk of shared memory.\n\n::: {.column-margin}\n![Diagram illustrating bank conflict, [source](https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#shared-memory-5-x)](bank_illustration.png){.lightbox}\n:::\n\nLooking at the way the kernel writes to shared memory, there‚Äôs clearly bank conflicts, as shown below\n\n![Diagram illustrating bank conflict during shared memory write. Note that there‚Äôs no bank conflict from reading global memory because all read from a warp is coalesced into memory transactions, so the first read from global memory would actually read more data than requested (since each thread requests a non-continuous chunk of data, which will turn into a memory transaction larger than 4 byte), but this is fine because they will reside in L2/L1 cache and will speed up subsequent reads.](swizzle_illustration.png)\n\nFrom the perspective of memory banks, it‚Äôs called a 4-way bank conflict since each bank has 4 threads accessing it.\n\nAlso note that the bank conflict happens not only during write to shared memory, but also during read from shared memory.\n\n![Diagram illustrating 4-way bank conflict](4_way_conflict.png)\n\nTo solve this, we can use something called **swizzle**, which is a way to rearrange bank access such that all banks are utilized in all iterations.\n\nThe following diagram illustrates the idea.\n\n![Diagram illustrating swizzle operation‚Äôs outcome](swizzle_idea.png)\n\nTo actually implement swizzle is as follows:\n\n1. For $N$-way bank conflict, if we conceptualize a particular memory operation to be 2 mappings\n    1. One map from memory address to Bank ID and is given by \n        \n        $$\n        \\text{Bank ID}(\\text{Addr}_t) = f(\\text{Addr}_t) = \\lfloor(\\text{Addr}_t \\% 128) / 4\\rfloor\n        $$\n        \n        where the subscript indicates the memory address is requested from thread $t$\n        \n    2. One map from Bank ID and thread ID to bank row (n-th thread to access a particular bank), and is given by\n        \n        $$\n        \\text{Bank Row}(t, \\text{Addr}_t) = \\sum_{i=0}^{t-1}1\\cdot (\\text{Bank ID}(\\text{Addr}_i) = \\text{Bank ID}(\\text{Addr}_t))\n        $$\n        \n2. We can then use the **XOR** operator to create a new mapping from $(\\text{Bank ID, Bank Row}) \\rightarrow \\text{Swizzled Bank ID}$. We can do this because the group of $({0, ...,2^{n}}, \\text{XOR})$ is a [closed group](https://en.wikipedia.org/wiki/Group_theory) and the mapping is bijective.\n    \n    $$\n    \\text{Swizzled ID} = \\text{Bank Row} \\oplus \\text{Bank ID}\n    $$\n    \n    ![Diagram illustrating desired swizzle operation, notice how each initial bank id gets mapped to a possibly different swizzled bank id without conflict, and that any bank id is only accessed once in each row. Also note that this swizzle operation can be applied where bank row and bank id are not necessarily the same set of numbers.](swizzle_close.png)\n\n    \n3. After obtaining the new bank id, convert it back to memory address with\n    \n    $$\n    \\text{Swizzled Addr} = f^{-1}(\\text{Swizzled Bank ID})\n    $$\n    \n     Note that to calculate $f^{-1}$, we often need more parameters than just the new bank id because $f$ is not bijective.\n    \n4. After obtaining the memory address, the write to and read from shared memory should share the same swizzle pattern to ensure correctness.\n\nAfter applying swizzle to the share memory read operation (due to time constraint, I didn‚Äôt apply to memory store), and rerun the profiling\n\n![Share memory conflict significantly reduced, it didn‚Äôt reduce to 0 because of reason that will become clear in the subsequent section](swizzle_result.png)\n\n\nHowever, the performance is completely disastrous\n\n![Performance of prefetching + swizzle goes back to round 1](swizzle_perf.png)\n\nThe reason that this happens, despite little bank conflicts, is due to the fact that the swizzling algorithm only works **if all the threads being considered come from the same warp**, so in an implementation where we don‚Äôt distinguish warps (we are just doing 2-D thread tiling within a block), the result from swizzling is neural at best, at worst it causes significant non-coalesced memory access. The result shown above indicates the latter is at play.\n\nNow we have a proper motivation for warp tiling.\n\n- code for swizzle, relevant parts are highlighted\n    \n    ```cpp\n    #pragma once\n    \n    #include <cuda_runtime.h>\n    #include <cublas_v2.h>\n    #include <stdio.h>\n    #include <stdlib.h>\n    \n    #ifndef FETCH_FLOAT4\n    #define FETCH_FLOAT4(pointer) (reinterpret_cast<float4 *>(&(pointer))[0])\n    #endif\n    #ifndef DIV_UP\n    #define DIV_UP(m, n) ((m + n - 1) / n)\n    #endif\n    #define GROUP_SIZE 8\n    #define WARP_SIZE 32\n    \n    namespace kernel9 {\n    \n    template<int BM, int BN, int BK>\n    __device__ __forceinline__ void gmem_to_smem(float *A, float *B, float smem_a[][BK][BM], float smem_b[][BK][BN], float ldreg_a[][4], float ldreg_b[][4], int a_smem_rounds, int a_stride, int a_smem_x, int a_smem_y, int b_smem_rounds, int b_stride, int b_smem_y, int b_smem_x, int phase)\n    {\n    #pragma unroll // A: global -> reg buffer\n        for (int i = 0; i < a_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_a[i]) = FETCH_FLOAT4(A[i * a_stride]);\n            // int bank_id = a_smem_y;\n            // int bank_row = tid * BK / 128;\n            // int swizzled_a_smem_y = a_smem_y + bank_row * WARP_SIZE * 4 / BK;\n    \n            smem_a[phase][a_smem_x][a_smem_y + i * a_stride] = ldreg_a[i][0];\n            smem_a[phase][a_smem_x + 1][a_smem_y + i * a_stride] = ldreg_a[i][1];\n            smem_a[phase][a_smem_x + 2][a_smem_y + i * a_stride] = ldreg_a[i][2];\n            smem_a[phase][a_smem_x + 3][a_smem_y + i * a_stride] = ldreg_a[i][3];\n        }\n    #pragma unroll // B: global -> reg buffer\n        for (int i = 0; i < b_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_b[i]) = FETCH_FLOAT4(B[i * b_stride]);\n            FETCH_FLOAT4(smem_b[phase][b_smem_y][b_smem_x + i * b_stride]) = FETCH_FLOAT4(ldreg_b[i]);\n        }\n    }\n    \n    __device__ __forceinline__ void gmem_to_reg(float *A, float *B, float ldreg_a[][4], float ldreg_b[][4], int a_smem_rounds, int a_stride, int b_smem_rounds, int b_stride)\n    {\n    #pragma unroll // A: global -> reg buffer\n        for (int i = 0; i < a_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_a[i]) = FETCH_FLOAT4(A[i * a_stride]);\n        }\n    #pragma unroll // B: global -> reg buffer\n        for (int i = 0; i < b_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(ldreg_b[i]) = FETCH_FLOAT4(B[i * b_stride]);\n        }\n    }\n    \n    template<int BM, int BN, int BK>\n    __device__ __forceinline__ void reg_to_smem(float smem_a[][BK][BM], float smem_b[][BK][BN], float ldreg_a[][4], float ldreg_b[][4], int a_smem_rounds, int a_stride, int a_smem_x, int a_smem_y, int b_smem_rounds, int b_stride, int b_smem_y, int b_smem_x, int phase)\n    {\n    #pragma unroll // A: reg buffer -> smem\n        for (int i = 0; i < a_smem_rounds; ++i)\n        { // note that this is uncoalesce memory write, and only 4 floats * 4 byte/float = 16 bytes per write\n            smem_a[phase][a_smem_x][a_smem_y + i * a_stride] = ldreg_a[i][0];\n            smem_a[phase][a_smem_x + 1][a_smem_y + i * a_stride] = ldreg_a[i][1];\n            smem_a[phase][a_smem_x + 2][a_smem_y + i * a_stride] = ldreg_a[i][2];\n            smem_a[phase][a_smem_x + 3][a_smem_y + i * a_stride] = ldreg_a[i][3];\n        }\n    #pragma unroll // B: reg buffer -> smem\n        for (int i = 0; i < b_smem_rounds; ++i)\n        {\n            FETCH_FLOAT4(smem_b[phase][b_smem_y][b_smem_x + i * b_stride]) = FETCH_FLOAT4(ldreg_b[i]);\n        }\n    }\n    \n    template<int BM, int BN, int BK, int TM, int TN>\n    __device__ __forceinline__ void smem_to_frag(float frag_a[][TM], float frag_b[][TN], float smem_a[][BK][BM], float smem_b[][BK][BN], int frag_phase, int smem_phase, int bk)\n    {\n    #pragma unroll \n        for (int i = 0; i < TM; i += 4)\n        {\n            int tmp = (threadIdx.y * TM + i);\n            tmp = ((tmp / WARP_SIZE) ^ ((tmp % WARP_SIZE) / 4)) % 2 * 4;\n            FETCH_FLOAT4(frag_a[frag_phase][tmp]) = FETCH_FLOAT4(smem_a[smem_phase][bk][threadIdx.y * TM + tmp]);\n        }\n    #pragma unroll\n        for (int i = 0; i < TN; i += 4)\n        {\n            int tmp = (threadIdx.x * TN + i);\n            tmp = ((tmp / WARP_SIZE) ^ ((tmp % WARP_SIZE) / 4)) % 2 * 4;\n            FETCH_FLOAT4(frag_b[frag_phase][tmp]) = FETCH_FLOAT4(smem_b[smem_phase][bk][threadIdx.x * TN + tmp]);\n        }\n    }\n    \n    } // namespace kernel 9\n    \n    // This function assumes B is already transposed\n    template <const int BM,\n              const int BN,\n              const int BK,\n              const int TM,\n              const int TN,\n              const int THREAD_NUMS>\n    __global__ void __launch_bounds__(THREAD_NUMS, 2) mysgemm_v9(int M, int N, int K, float alpha, float *A, float *B, float beta, float *C)\n    {\n        int bx = blockIdx.x;\n        int by = blockIdx.y;\n        constexpr int threads_per_block = BM / TM * BN / TN;\n        constexpr int a_ele_per_thread_smem = BM * BK / threads_per_block;\n        constexpr int b_ele_per_thread_smem = BK * BN / threads_per_block;\n        constexpr int a_smem_rounds = a_ele_per_thread_smem / 4;\n        constexpr int b_smem_rounds = b_ele_per_thread_smem / 4;\n        constexpr int a_threads_per_row_per_round = BK / 4;\n        int a_stride = threads_per_block / a_threads_per_row_per_round * K;\n        constexpr int b_threads_per_row_per_round = BN / 4;\n        int b_stride = threads_per_block / b_threads_per_row_per_round * N;\n        int tid = threadIdx.y * blockDim.x + threadIdx.x;\n        // int lane_id = tid % 32;\n        int a_smem_x = (tid % a_threads_per_row_per_round) * 4;\n        int a_smem_y = tid / a_threads_per_row_per_round;\n        int b_smem_x = (tid % b_threads_per_row_per_round) * 4;\n        int b_smem_y = tid / b_threads_per_row_per_round;\n    \n        static_assert((BM * BK) % threads_per_block == 0);\n        static_assert((BK * BN) % threads_per_block == 0);\n        static_assert(a_ele_per_thread_smem % 4 == 0);\n        static_assert(b_ele_per_thread_smem % 4 == 0);\n        static_assert(BK % 4 == 0);\n        static_assert(BN % 4 == 0);\n        static_assert(threads_per_block / a_threads_per_row_per_round >= 1); // at least cover a row per round\n        static_assert(threads_per_block / b_threads_per_row_per_round >= 1); // at least cover a row per round\n        static_assert(TN % 4 == 0); // at least 4 elements per thread and TN is a multiple of 4\n    \n        float accum[TM][TN] = {0.};\n    \n        __shared__ float smem_a[2][BK][BM]; // a transposed version of A block\n        __shared__ float smem_b[2][BK][BN];\n    \n        // register for loading from global mem to smem\n        float ldreg_a[a_smem_rounds][4];\n        float ldreg_b[b_smem_rounds][4];\n    \n        // fragment/register for computation\n        float frag_a[2][TM];\n        float frag_b[2][TN];\n    \n        // move A to thread start\n        A = &A[by * BM * K + a_smem_y * K + a_smem_x];\n        B = &B[b_smem_y * N + bx * BN + b_smem_x];\n    \n        // 1.1 fetch from global to smem, use register as buffer\n        kernel9::gmem_to_smem<BM, BN, BK>(A, B, smem_a, smem_b, ldreg_a, ldreg_b, a_smem_rounds, a_stride, a_smem_x, a_smem_y, b_smem_rounds, b_stride, b_smem_y, b_smem_x, 0);\n        __syncthreads(); // need the sync such that the following fragment can be obtained\n    \n        // 1.2 load 0 round of smem->frag\n        kernel9::smem_to_frag<BM, BN, BK, TM, TN>(frag_a, frag_b, smem_a, smem_b, 0, 0, 0); // load first batch of frag from first block of smem\n        int smem_write_index = 1; // next index of smems to write to\n        int smem_read_index; // read is current write\n    \n        // 2. start the blockwise loop\n        for (int k = 0; k < K / BK ; ++k)\n        {\n            // 2.0 fetch from global to smem, use register as buffer\n            if (k + 1 < K / BK) {\n                A += BK; // every iteration, A moves BK to the right\n                B += N * BK; // every iteration, B moves BK * N down\n                kernel9::gmem_to_reg(A, B, ldreg_a, ldreg_b, a_smem_rounds, a_stride, b_smem_rounds, b_stride); // only load to reg, this is non-blocking\n            }\n            // 2.1 use the frag already loaded to compute the outer product, note that we do register prefetching here\n    \n            smem_read_index = smem_write_index ^ 1;\n    #pragma unroll\n            for (int b_k = 1; b_k < BK; ++b_k) // load one sub row at a time from smem to frag\n            {\n                kernel9::smem_to_frag<BM, BN, BK, TM, TN>(frag_a, frag_b, smem_a, smem_b, b_k % 2, smem_read_index, b_k);\n    #pragma unroll\n                for (int i = 0; i < TM; ++i)\n                { // outer product for the previous prefetched frag\n    #pragma unroll\n                    for (int j = 0; j < TN; ++j)\n                    {\n                        accum[i][j] += frag_a[(b_k - 1) % 2][i] * frag_b[(b_k - 1) % 2][j];\n                    }\n                }\n            }\n            // 2.2 if there's next block, start loading from reg to smem\n            if (k + 1 < K / BK) {\n                kernel9::reg_to_smem<BM, BN, BK>(smem_a, smem_b, ldreg_a, ldreg_b, a_smem_rounds, a_stride, a_smem_x, a_smem_y, b_smem_rounds, b_stride, b_smem_y, b_smem_x, smem_write_index);\n                __syncthreads();\n                // prefetch a round of fragments from the current write, this will be blocking\n                kernel9::smem_to_frag<BM, BN, BK, TM, TN>(frag_a, frag_b, smem_a, smem_b, 0, smem_write_index, 0);\n                smem_write_index ^= 1; // update next write\n            }\n    #pragma unroll\n            for (int i = 0; i < TM; ++i) \n            { // one last round of outer product because we have only done BK - 1 products\n    #pragma unroll\n                for (int j = 0; j < TN; ++j)\n                {\n                    accum[i][j] += frag_a[(BK - 1) % 2][i] * frag_b[(BK - 1) % 2][j];\n                }\n            }\n        }\n    \n        // 3. put the accumulate value down to C\n        // move C to thread tile start\n        C = &C[(by * BM + threadIdx.y * TM) * N + bx * BN + threadIdx.x * TN];\n    #pragma unroll\n        for (int i = 0; i < TM; ++i) {\n    #pragma unroll\n            for (int j = 0; j < TM; j += 4) {\n                float4 tmp = FETCH_FLOAT4(C[i * N + j]);\n                tmp.x = alpha * accum[i][j] + beta * tmp.x;\n                tmp.y = alpha * accum[i][j + 1] + beta * tmp.y;\n                tmp.z = alpha * accum[i][j + 2] + beta * tmp.z;\n                tmp.w = alpha * accum[i][j + 3] + beta * tmp.w;\n                FETCH_FLOAT4(C[i * N + j]) = tmp;\n            }\n        }\n    }\n    \n    ```\n    \n\n## Warp Tiling\n\nWarp tiling, as the name suggests, is basically tiling at the warp level. Here‚Äôs the visual for the algorithm:\n\n![Diagram for warp tiling](warp_tiling.png)\n\nThe idea is that instead of treating threads in a block as equivalent, we distinguish them by which warp they come from. Therefore each warp now handles a larger tile (warp tile). To give flexibility to the selection of warp tile sizes, while allowing for the selection of thread tile sizes, we have to allow each thread to process more than one thread tile. Therefore each warp tile is further divided into multiple ‚Äúsubtile‚Äù, where each subtile consists of $32 \\times \\text{TM}\\times\\text{TN}$ elements, meaning for each subtile to be calculated, all 32 threads needs to calculate only once. But to fill a whole warp tile, all 32 threads need to move from one subtile to another, causing the zig-zag movement seen above.\n\nThere‚Äôre many benefit to this approach:\n\n1. Having the concept of warp tiling allows us to do effective swizzle.\n2. A strided memory access pattern (from a thread‚Äôs perspective) allows for coalesced memory access.\n3. Most importantly, because we are doing more work per thread (9 thread-tiles per thread, in the example), we are again increasing the arithmetic intensity! \n    1. From shared memory‚Äôs perspective, processing each $TM\\times TN$ elements still requires $2K$ reads from shared memory\n    2. But from device memory‚Äôs perspective, processing each $\\#\\text{subtiles}\\times TM \\times TN$ elements only requires $\\text{sm}\\times TM \\times K + \\text{sn}\\times TN \\times K$ reads from global memory, meaning the arithmetic intensity is now\n    \n    $$\n    \\frac{\\text{sm}\\cdot\\text{sn}\\cdot\\text{TM}\\cdot\\text{TN}}{K\\cdot(\\text{sm}\\cdot \\text{TM} + \\text{sn}\\cdot\\text{TN})}\n    $$\n    \n\nI‚Äôll leave the calculation for the arithmetic intensity improvement to the reader.\n\nAfter implementing the warp tiling algorithm, this is the result:\n\n![Performance of warp tiling](warp_tiling_perf.png)\n\nNote that there‚Äôre a few design decisions I made after experiments:\n\n- I intentionally didn‚Äôt implement buffering/prefetching/pipelining, because doing so increases the required shared memory per block, the reduction of occupancy caused a bigger issue than the benefit of prefetching.\n- Due to time constraint, I didn‚Äôt implement swizzling on this kernel, but because of the strided access pattern, I‚Äôm only suffering from 2-way bank conflict, which was acceptable for me.\n\n- The code\n    \n    ```cpp\n    #pragma once\n    \n    #include <algorithm>\n    #include <cassert>\n    #include <cstdio>\n    #include <cstdlib>\n    #include <cublas_v2.h>\n    #include <cuda_runtime.h>\n    \n    #ifndef FETCH_FLOAT4\n    #define FETCH_FLOAT4(pointer) (reinterpret_cast<float4 *>(&(pointer))[0])\n    #endif\n    #ifndef FETCH_FLOAT4_CONST\n    #define FETCH_FLOAT4_CONST(pointer) (reinterpret_cast<const float4 *>(&(pointer))[0])\n    #endif\n    #define GROUP_SIZE 8\n    #define WARP_SIZE 32\n    \n    namespace kernel10 {\n        template<int BM, int BN, int BK, int lda_m_stride, int ldb_k_stride>\n        __device__ __forceinline__ void gmem_to_smem(const float * A, const float * B, int M, int N, int K, float * smem_a, float * smem_b)\n        {\n            // #pragma unroll // A: global -> reg buffer\n            for (uint i = 0; i + lda_m_stride <= BM; i += lda_m_stride)\n            {\n                const float4 tmp = FETCH_FLOAT4_CONST(A[i * K]);\n                smem_a[i] = tmp.x;\n                smem_a[BM + i] = tmp.y;\n                smem_a[2 * BM + i] = tmp.z;\n                smem_a[3 * BM + i] = tmp.w;\n            }\n            // #pragma unroll // B: global -> reg buffer\n            for (uint i = 0; i + ldb_k_stride <= BK; i += ldb_k_stride)\n            {\n                FETCH_FLOAT4(smem_b[i * BN]) = FETCH_FLOAT4_CONST(B[i * N]);\n            }\n        }\n    \n        template <const int BM,\n                  const int BN,\n                  const int BK,\n                  const int WM,\n                  const int WN,\n                  const int TM,\n                  const int TN,\n                  const int WM_SUBTILE,\n                  const int WN_SUBTILE,\n                  const int m_subtiles,\n                  const int n_subtiles>\n        __device__ __forceinline__ void warp_matmul(const float *smem_a, const float *smem_b, float *acc, float *frag_a, float *frag_b) {\n            // #pragma unroll\n            for (uint k = 0; k < BK; ++k) { \n                // #pragma unroll\n                for (uint i = 0; i < m_subtiles; ++i) {\n                    // #pragma unroll\n                    for (uint m = 0; m < TM; m+=1) {\n                        frag_a[i * TM + m] = smem_a[k * BM + i * WM_SUBTILE + m];\n                    }\n                }\n                // #pragma unroll\n                for (uint i = 0; i < n_subtiles; ++i) {\n                    // #pragma unroll\n                    for (uint n = 0; n < TN; n+=1) {\n                        frag_b[i * TN + n] = smem_b[k * BN + i * WN_SUBTILE + n];\n                    }\n                }\n                // #pragma unroll\n                for (uint i = 0; i < m_subtiles; ++i) {\n                    // #pragma unroll\n                    for (uint j = 0; j < n_subtiles; ++j) {\n                        // #pragma unroll\n                        for (uint m = 0; m < TM; ++m) {\n                            // #pragma unroll\n                            for (uint n = 0; n < TN; ++n) {\n                                acc[(i * TM + m) * n_subtiles * TN + j * TN + n] += frag_a[i * TM + m] * frag_b[j * TN + n];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    \n    } // namespace kernel 10\n    \n    // WARP tiling without double cache, performing C = alpha * A * B + beta * C\n    template <const int BM,\n              const int BN,\n              const int BK,\n              const int WM,\n              const int WN,\n              const int TM,\n              const int TN,\n              const int WM_SUBTILE,\n              const int WN_SUBTILE,\n              const int NUM_THREADS,\n              const int lda_m_stride,\n              const int ldb_k_stride,\n              const int m_subtiles,\n              const int n_subtiles\n              >\n    __global__ void __launch_bounds__(NUM_THREADS, 3) mysgemm_v10(int M, int N, int K, float alpha, float *A, float *B, float beta, float *C)\n    {\n        // every thread loads 4 floats at a time in stride-fashion\n        const uint warp_m_offset = (threadIdx.x / WARP_SIZE) / (BN / WN) * WM;\n        const uint warp_n_offset = (threadIdx.x / WARP_SIZE) % (BN / WN) * WN;\n        const uint m_idx_a = threadIdx.x * 4 / BK;\n        const uint k_idx_a = threadIdx.x % (BK / 4) * 4;\n        const uint k_idx_b = threadIdx.x * 4 / BN;\n        const uint n_idx_b = threadIdx.x % (BN / 4) * 4;\n        const uint subtile_idx_m = (threadIdx.x % WARP_SIZE) / (WN_SUBTILE / TN) * TM;\n        const uint subtile_idx_n = (threadIdx.x % WARP_SIZE) % (WN_SUBTILE / TN) * TN;\n    \n        static_assert(lda_m_stride > 0, \"lda_m_stride must be positive to ensure uniform strides\");\n        static_assert(ldb_k_stride > 0, \"ldb_k_stride must be positive to ensure uniform strides\");\n    \n        // declare shared memory\n        __shared__ float smem_a[BK * BM]; // transposed\n        __shared__ float smem_b[BK * BN];\n    \n        A += blockIdx.y * BM * K + m_idx_a * K + k_idx_a;\n        B += blockIdx.x * BN + k_idx_b * N + n_idx_b;\n        // move C to the warp start\n        C += (blockIdx.y * BM + warp_m_offset + subtile_idx_m) * N  + blockIdx.x * BN + warp_n_offset + subtile_idx_n;\n    \n        // move A and B to thread start for loading, this has nothing to do with warps\n    \n        // declare accumulators\n        float acc[m_subtiles * n_subtiles * TM * TN] = {0.};\n    \n        // declare fragments\n        float frag_a[m_subtiles * TM] = {0.};\n        float frag_b[n_subtiles * TN] = {0.};\n    \n        \n        // #pragma unroll\n        for (uint k = 0; k < K; k += BK) {\n            kernel10::gmem_to_smem<BM, BN, BK, lda_m_stride, ldb_k_stride>(A, B, M, N, K, smem_a + k_idx_a * BM + m_idx_a, smem_b + k_idx_b * BN + n_idx_b);\n            __syncthreads();\n            // compute the warp level matmul\n            kernel10::warp_matmul<BM, BN, BK, WM, WN, TM, TN, WM_SUBTILE, WN_SUBTILE, m_subtiles, n_subtiles>(smem_a + warp_m_offset + subtile_idx_m, smem_b + + warp_n_offset + subtile_idx_n, acc, frag_a, frag_b);\n            A += BK;\n            B += BK * N;\n            __syncthreads();\n        }\n    \n        // reduce\n    \n        for (uint i = 0; i < m_subtiles; ++i) {\n            for (uint j = 0; j < n_subtiles; ++j) {\n                // move C to the subtile start\n                float *C_subtile = C + i * WM_SUBTILE * N + j * WN_SUBTILE;\n                // #pragma unroll\n                for (uint m = 0; m < TM; m += 1) {\n                    // #pragma unroll\n                    for (uint n = 0; n < TN; n += 4) {\n                        float4 tmp = FETCH_FLOAT4(\n                            C_subtile[m * N + n]);\n                        const int acc_offset = (i * TM + m) * n_subtiles * TN + j * TN + n;\n                        tmp.x = alpha * acc[acc_offset] + beta * tmp.x;\n                        tmp.y = alpha * acc[acc_offset + 1] + beta * tmp.y;\n                        tmp.z = alpha * acc[acc_offset + 2] + beta * tmp.z;\n                        tmp.w = alpha * acc[acc_offset + 3] + beta * tmp.w;\n                        FETCH_FLOAT4(C_subtile[m * N + n]) = tmp;\n                    }\n                }\n            }\n        }\n    }\n    \n    ```\n    \n\n## Split-K\n\nComparing the kernel I wrote with CuBLAS, I noticed how the grid dim of CuBLAS has a third dimension (the (256, 2, 3) number). This suggest that the CuBLAS implementation is also splitting the matmul problem along the K dimension.\n\n![Profiling result from nsight compute, Kernel 2 is CuBLAS, mysgemm_v10 is the warp tiling kernel](split_k_profile.png)\n\nThe idea with split-K is as follows:\n\n- As opposed to having each block, each warp, each thread iterating throughout the dimension K, we split the K dimension among blocks, so each block only computes a partial result.\n- After computing a partial result, we kick off another reduction kernel that merges all the partial result together.\n- The hope is that by increasing the number of blocks, we further increase occupancy and this benefit is hopefully larger than the additional overhead that the reduction kernel brings.\n\n![Diagram illustrating split-K](split_k.png)\n\nAfter implementing the split-K algorithm, here‚Äôs the performance I got:\n\n![Performance of Split-K](split_k_perf.png)\n\nHuh? It got worse than plain warp-tiling. After some tinkering (changing dimensions, etc.), I think the reason for the worse performance is possibly:\n\n1. I haven‚Äôt run a complete sweep of hyper-parameters of this kernel, which is what CuBLAS surely did.\n2. I‚Äôm using the kernel launch as an inter-block synchronization primitive (basically, calling the reduction kernel after the computation kernel in the same stream), but ideally, reduction can also happen in a block-by-block fashion, where as long as a set of blocks that cover the entire K dimension has finished calculation, a reduction kernel can be kicked off along that dimension. I‚Äôm not sure how to achieve this though, because afaik CUDA doesn‚Äôt have any other inter-block synchronization primitive than kernel launching.\n3. I‚Äôm not using fancy things like [stream-k](https://arxiv.org/abs/2301.03598).\n4. I‚Äôm too exhausted to do a proper swizzle on this kernel.\n\nBut anyway, I‚Äôm happy that the split-K get implemented and is functionally correct. Here‚Äôs the code.\n\n- Code for Split-k\n    \n    ```cpp\n    #pragma once\n    \n    #include <algorithm>\n    #include <cassert>\n    #include <cstdio>\n    #include <cstdlib>\n    #include <cublas_v2.h>\n    #include <cuda_runtime.h>\n    #include <cooperative_groups.h>\n    #include <cooperative_groups/memcpy_async.h>\n    #include <cooperative_groups/reduce.h>\n    #include <cuda/barrier>\n    #include <cuda/pipeline>\n    \n    namespace cg = cooperative_groups;\n    \n    #ifndef FETCH_FLOAT4\n    #define FETCH_FLOAT4(pointer) (reinterpret_cast<float4 *>(&(pointer))[0])\n    #endif\n    #ifndef FETCH_FLOAT4_CONST\n    #define FETCH_FLOAT4_CONST(pointer) (reinterpret_cast<const float4 *>(&(pointer))[0])\n    #endif\n    #ifndef DIV_UP\n    #define DIV_UP(m, n) (((m) + (n) - 1) / (n))\n    #endif\n    #define GROUP_SIZE 8\n    #define WARP_SIZE 32\n    \n    namespace kernel11 {\n        template<int BM, int BN, int BK, int lda_m_stride, int ldb_k_stride>\n        __device__ __forceinline__ void gmem_to_smem(const float * A, const float * B, int M, int N, int K, float * smem_a, float * smem_b)\n        {\n            // #pragma unroll // A: global -> reg buffer\n            for (uint i = 0; i + lda_m_stride <= BM; i += lda_m_stride)\n            {\n                const float4 tmp = FETCH_FLOAT4_CONST(A[i * K]);\n                smem_a[i] = tmp.x;\n                smem_a[BM + i] = tmp.y;\n                smem_a[2 * BM + i] = tmp.z;\n                smem_a[3 * BM + i] = tmp.w;\n            }\n            // #pragma unroll // B: global -> reg buffer\n            for (uint i = 0; i + ldb_k_stride <= BK; i += ldb_k_stride)\n            {\n                FETCH_FLOAT4(smem_b[i * BN]) = FETCH_FLOAT4_CONST(B[i * N]);\n            }\n        }\n    \n        template <const int BM,\n                  const int BN,\n                  const int BK,\n                  const int WM,\n                  const int WN,\n                  const int TM,\n                  const int TN,\n                  const int WM_SUBTILE,\n                  const int WN_SUBTILE,\n                  const int m_subtiles,\n                  const int n_subtiles>\n        __device__ void warp_matmul(const float *smem_a, const float *smem_b, float *acc, float *frag_a, float *frag_b, int warp_m_offset, int subtile_idx_m, int warp_n_offset, int subtile_idx_n) {\n            smem_a += warp_m_offset + subtile_idx_m;\n            smem_b += warp_n_offset + subtile_idx_n;\n            // #pragma unroll\n            for (uint k = 0; k < BK; ++k) { \n                // #pragma unroll\n                for (uint i = 0; i < m_subtiles; ++i) {\n                    // #pragma unroll\n                    // for (uint m = 0; m < TM; m+=4) {\n                    //     FETCH_FLOAT4(frag_a[i * TM + m]) = FETCH_FLOAT4_CONST(smem_a[k * BM + i * WM_SUBTILE + m]);\n                    // }\n                    // #pragma unroll\n                    for (uint m = 0; m < TM; m+=1) {\n                        frag_a[i * TM + m] = smem_a[k * BM + i * WM_SUBTILE + m];\n                    }\n                }\n                // #pragma unroll\n                for (uint i = 0; i < n_subtiles; ++i) {\n                    // #pragma unroll\n                    // for (uint n = 0; n < TN; n+=4) {\n                    //     FETCH_FLOAT4(frag_b[i * TN + n]) = FETCH_FLOAT4_CONST(smem_b[k * BN + i * WN_SUBTILE + n]);\n                    // }\n                    // #pragma unroll\n                    for (uint n = 0; n < TN; n+=1) {\n                        frag_b[i * TN + n] = smem_b[k * BN + i * WN_SUBTILE + n];\n                    }\n                }\n                // #pragma unroll\n                for (uint i = 0; i < m_subtiles; ++i) {\n                    // #pragma unroll\n                    for (uint j = 0; j < n_subtiles; ++j) {\n                        // #pragma unroll\n                        for (uint m = 0; m < TM; ++m) {\n                            // #pragma unroll\n                            for (uint n = 0; n < TN; ++n) {\n                                acc[(i * TM + m) * n_subtiles * TN + j * TN + n] += frag_a[i * TM + m] * frag_b[j * TN + n];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    \n    } // namespace kernel 11\n    \n    // WARP tiling without double cache, performing C = alpha * A * B + beta * C\n    template <const int BM,\n              const int BN,\n              const int BK,\n              const int SPLIT,\n              const int WM,\n              const int WN,\n              const int TM,\n              const int TN,\n              const int WM_SUBTILE,\n              const int WN_SUBTILE,\n              const int NUM_THREADS,\n              const int lda_m_stride,\n              const int ldb_k_stride,\n              const int m_subtiles,\n              const int n_subtiles\n              >\n    __global__ void __launch_bounds__(NUM_THREADS, 2) mysgemm_v11(int M, int N, int K, float alpha, float *A, float *B, float beta, float *tC, float *C)\n    {\n        // The strided split K can be visualized as follows:\n        // ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n        // ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ\n        // ‚îÇ split0 ‚îÇ split1 ‚îÇ split0 ‚îÇ split1 ‚îÇ split0 ‚îÇ split1 ‚îÇ split0 ‚îÇ\n        // ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ\n        // ‚îÇ block0 ‚îÇ block1 ‚îÇ block2 ‚îÇ block3 ‚îÇ block4 ‚îÇ block5 ‚îÇ block6 ‚îÇ\n        // ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ        ‚îÇ\n        // ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n        // The reason for strided splits is that different splits handle BKs in a strided fashion to improve L2 cache hit rate.\n        // Note that there might be remainder blocks left causing imbalanced processing across CTAs, this can be handled via stream-K (https://arxiv.org/pdf/2301.03598), but here we'll just ignore (the imbalance) and process it anyway.\n        // To assist reduction, it's better to store the output from different splits together:\n        //  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                     \n        //  ‚îÇ    unit0 - split0   ‚îÇ                     \n        //  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§                     \n        //  ‚îÇ    unit0 - split1   ‚îÇ                     \n        //  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§                     \n        //  ‚îÇ    unit1 - split0   ‚îÇ                     \n        //  ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§                     \n        //  ‚îÇ    unit1 - split0   ‚îÇ                     \n        //  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                     \n                                  \n    \n        const uint iters_per_split = DIV_UP(K, BK) / SPLIT; // number of BKs a split handles (at least)\n        const uint last_iter_splits = DIV_UP(K, BK) % SPLIT;\n    \n        // every thread loads 4 floats at a time in stride-fashion\n        const uint warp_m_offset = (threadIdx.x / WARP_SIZE) / (BN / WN) * WM;\n        const uint warp_n_offset = (threadIdx.x / WARP_SIZE) % (BN / WN) * WN;\n        const uint m_idx_a = threadIdx.x * 4 / BK;\n        const uint k_idx_a = threadIdx.x % (BK / 4) * 4;\n        const uint k_idx_b = threadIdx.x * 4 / BN;\n        const uint n_idx_b = threadIdx.x % (BN / 4) * 4;\n        const uint subtile_idx_m = (threadIdx.x % WARP_SIZE) / (WN_SUBTILE / TN) * TM;\n        const uint subtile_idx_n = (threadIdx.x % WARP_SIZE) % (WN_SUBTILE / TN) * TN;\n       \n    \n        static_assert(lda_m_stride > 0, \"lda_m_stride must be positive to ensure uniform strides\");\n        static_assert(ldb_k_stride > 0, \"ldb_k_stride must be positive to ensure uniform strides\");\n    \n        // declare shared memory\n        __shared__ float smem_a[BK * BM]; // transposed\n        __shared__ float smem_b[BK * BN];\n    \n        // move A and B to thread start for loading, this has nothing to do with warps\n        A += blockIdx.y * BM * K + m_idx_a * K + k_idx_a + blockIdx.z * BK;\n        B += blockIdx.x * BN + k_idx_b * N + n_idx_b + blockIdx.z * BK * N;\n        // move tC to the warp start, tC is the temporary gmem to store splits results\n        tC += ((blockIdx.y * BM + warp_m_offset + subtile_idx_m) * N  + blockIdx.x * BN + warp_n_offset + subtile_idx_n) * SPLIT;\n        // move C to the warp start as well\n        C += (blockIdx.y * BM + warp_m_offset + subtile_idx_m) * N  + blockIdx.x * BN + warp_n_offset + subtile_idx_n;\n    \n        // declare accumulators\n        float acc[m_subtiles * n_subtiles * TM * TN] = {0.};\n    \n        // declare fragments\n        float frag_a[m_subtiles * TM] = {0.};\n        float frag_b[n_subtiles * TN] = {0.};\n    \n        \n        // #pragma unroll\n        for (uint it = 0; it < iters_per_split; ++it) {\n            kernel11::gmem_to_smem<BM, BN, BK, lda_m_stride, ldb_k_stride>(A, B, M, N, K, smem_a + k_idx_a * BM + m_idx_a, smem_b + k_idx_b * BN + n_idx_b);\n            __syncthreads();\n            // compute the warp level matmul\n            kernel11::warp_matmul<BM, BN, BK, WM, WN, TM, TN, WM_SUBTILE, WN_SUBTILE, m_subtiles, n_subtiles>(smem_a, smem_b, acc, frag_a, frag_b, warp_m_offset, subtile_idx_m, warp_n_offset, subtile_idx_n);\n            A += BK * SPLIT;\n            B += BK * SPLIT * N;\n            __syncthreads();\n        }\n    \n        if (last_iter_splits > 0 && blockIdx.z < last_iter_splits) { // process last iteration\n            kernel11::gmem_to_smem<BM, BN, BK, lda_m_stride, ldb_k_stride>(A, B, M, N, K, smem_a + k_idx_a * BM + m_idx_a, smem_b + k_idx_b * BN + n_idx_b);\n            __syncthreads();\n            // compute the warp level matmul\n            kernel11::warp_matmul<BM, BN, BK, WM, WN, TM, TN, WM_SUBTILE, WN_SUBTILE, m_subtiles, n_subtiles>(smem_a, smem_b, acc, frag_a, frag_b, warp_m_offset, subtile_idx_m, warp_n_offset, subtile_idx_n);\n            __syncthreads();\n        }\n    \n        // epilogue: reduce to (temporary) gmem\n        for (uint i = 0; i < m_subtiles; ++i) {\n            for (uint j = 0; j < n_subtiles; ++j) {\n                // move C to the subtile start\n                float *C_subtile = C + (i * WM_SUBTILE * N + j * WN_SUBTILE);\n                float *tC_subtile = tC + (i * WM_SUBTILE * N + j * WN_SUBTILE) * SPLIT;\n                // #pragma unroll\n                for (uint m = 0; m < TM; m += 1) {\n                    // #pragma unroll\n                    for (uint n = 0; n < TN; n += 4) {\n                        const int acc_offset = (i * TM + m) * n_subtiles * TN + j * TN + n;\n                        if (blockIdx.z == 0) { // only the first block in that split should accumulate from original C matrix\n                            float4 tmp = FETCH_FLOAT4(C_subtile[m * N + n]);\n                            tmp.x = alpha * acc[acc_offset] + beta * tmp.x;\n                            tmp.y = alpha * acc[acc_offset + 1] + beta * tmp.y;\n                            tmp.z = alpha * acc[acc_offset + 2] + beta * tmp.z;\n                            tmp.w = alpha * acc[acc_offset + 3] + beta * tmp.w;\n                            \n                            tC_subtile[m * N * SPLIT + n * SPLIT] = tmp.x;\n                            tC_subtile[m * N * SPLIT + (n + 1) * SPLIT] = tmp.y;\n                            tC_subtile[m * N * SPLIT + (n + 2) * SPLIT] = tmp.z;\n                            tC_subtile[m * N * SPLIT + (n + 3) * SPLIT] = tmp.w;\n                        } else {\n                            tC_subtile[m * N * SPLIT + n * SPLIT + blockIdx.z] = alpha * acc[acc_offset];\n                            tC_subtile[m * N * SPLIT + (n + 1) * SPLIT + blockIdx.z] = alpha * acc[acc_offset + 1];\n                            tC_subtile[m * N * SPLIT + (n + 2) * SPLIT + blockIdx.z] = alpha * acc[acc_offset + 2];\n                            tC_subtile[m * N * SPLIT + (n + 3) * SPLIT + blockIdx.z] = alpha * acc[acc_offset + 3];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    template <int SPLIT,\n              int smem_elements,\n              int stages,\n              int reduction_iters>\n    __global__ void reduce_k(const int M, const int N, float* __restrict__ tC, float* __restrict__ C, const int block_iters) {\n        auto grid = cg::this_grid();\n        auto block = cg::this_thread_block(); // data is loaded using block as a group\n        auto tile = cg::tiled_partition<SPLIT>(block); // data is reduced using tile as a group\n    \n        extern __shared__ float smem[];\n        uint smem_stage_offsets[stages];\n        float sum[reduction_iters] = {0.0f};\n        for (int s = 0; s < stages; ++s) smem_stage_offsets[s] = s * smem_elements * SPLIT;\n    \n        uint gmem_init_offset = blockIdx.x * smem_elements * SPLIT;\n        uint gmem_stride = gridDim.x * smem_elements * SPLIT;\n        uint smem_stride = tile.meta_group_size() * SPLIT;\n    \n        __shared__ cuda::pipeline_shared_state<\n            cuda::thread_scope::thread_scope_block,\n            stages\n        > shared_state;\n        auto pipeline = cuda::make_pipeline(block, &shared_state);\n    \n        for (uint reduce_iter = 0, fetch_iter = 0; reduce_iter < block_iters; ++reduce_iter) {\n            for (; fetch_iter < block_iters && fetch_iter < (reduce_iter + stages); ++fetch_iter) {\n                pipeline.producer_acquire();\n                uint shared_idx = fetch_iter % stages;\n                cuda::memcpy_async(block,\n                                   smem + smem_stage_offsets[shared_idx],\n                                   tC + gmem_init_offset + gmem_stride * fetch_iter,\n                                   sizeof(float) * smem_elements * SPLIT,\n                                   pipeline);\n                pipeline.producer_commit();\n            }\n            pipeline.consumer_wait();\n            uint shared_idx = reduce_iter % stages;\n            uint smem_offset =  tile.meta_group_rank() * SPLIT + tile.thread_rank();\n            for (; smem_offset < smem_elements * SPLIT; smem_offset += smem_stride) {\n                uint element_idx = smem_offset / smem_stride;\n                sum[element_idx] = smem[smem_stage_offsets[shared_idx] + smem_offset];\n                sum[element_idx] = cg::reduce(tile, sum[element_idx], cg::plus<float>());\n                if (tile.thread_rank() == 0) {\n                    uint output_offset = blockIdx.x * smem_elements + gridDim.x * smem_elements * reduce_iter + smem_offset / SPLIT;\n                    C[output_offset] = sum[element_idx]; // copy to global memory\n                }\n            }\n            // __syncthreads();\n            pipeline.consumer_release();\n        }\n    }\n    ```\n    \n\n# Conclusion\n\nThere‚Äôre still non-negligible performance difference between my kernel and CuBLAS, even if we just cherry pick the best performant configuration (95.6%), let along other special dimensions (super thin matrix or super wide matrix), or structured matrices. Also, modern BLAS libraries has evolved to something more like a database look up that picks the best implementation given a particular problem size and particular hardware specs, so it‚Äôs not going to be a fruitful path trying to beat CuBLAS on this imo.\n\nBut hopefully I have proven to you that writing kernels are not that scary, and you should try too.\n\n## Credits\n\n**A lot of credit** goes to [@wangzyon_sgemm] who has set up the benchmarking code, and [@boehm2022cuda_matmul] who has provided an warp tiling implementation. I added a split-K implementation and wrote my own warp tiling implementation, as well as prefetching implementation. If you just want to see the code, check this [repo](https://github.com/seanxwzhang/CUDA_GEMM).\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":["sandstone"],"title-block-banner":true,"title":"A hitchhiker's guide to CUDA programming","author":"Sean Zhang","date":"2025-03-05","categories":["CUDA","programming","technical"],"image":"warp_tiling_perf.png","description":"Walkthrough of writing a SGEMM kernel that achieves 95% of cuBLAS performance","bibliography":["references.bib"],"link-citations":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}